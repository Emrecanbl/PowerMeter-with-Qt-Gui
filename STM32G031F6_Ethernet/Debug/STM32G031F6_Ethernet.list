
STM32G031F6_Ethernet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007268  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08007324  08007324  00008324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800743c  0800743c  0000909c  2**0
                  CONTENTS
  4 .ARM          00000000  0800743c  0800743c  0000909c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800743c  0800743c  0000909c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800743c  0800743c  0000843c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007440  08007440  00008440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000009c  20000000  08007444  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  2000009c  080074e0  0000909c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000368  080074e0  00009368  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011046  00000000  00000000  000090c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b45  00000000  00000000  0001a10a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001288  00000000  00000000  0001cc50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e84  00000000  00000000  0001ded8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000180c8  00000000  00000000  0001ed5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015fe7  00000000  00000000  00036e24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096737  00000000  00000000  0004ce0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e3542  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a68  00000000  00000000  000e3588  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000e7ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000009c 	.word	0x2000009c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800730c 	.word	0x0800730c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200000a0 	.word	0x200000a0
 8000100:	0800730c 	.word	0x0800730c

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	@ 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	@ 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	@ 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			@ (mov r8, r8)

08000414 <__aeabi_f2uiz>:
 8000414:	219e      	movs	r1, #158	@ 0x9e
 8000416:	b510      	push	{r4, lr}
 8000418:	05c9      	lsls	r1, r1, #23
 800041a:	1c04      	adds	r4, r0, #0
 800041c:	f000 fe7c 	bl	8001118 <__aeabi_fcmpge>
 8000420:	2800      	cmp	r0, #0
 8000422:	d103      	bne.n	800042c <__aeabi_f2uiz+0x18>
 8000424:	1c20      	adds	r0, r4, #0
 8000426:	f000 fd99 	bl	8000f5c <__aeabi_f2iz>
 800042a:	bd10      	pop	{r4, pc}
 800042c:	219e      	movs	r1, #158	@ 0x9e
 800042e:	1c20      	adds	r0, r4, #0
 8000430:	05c9      	lsls	r1, r1, #23
 8000432:	f000 fbef 	bl	8000c14 <__aeabi_fsub>
 8000436:	f000 fd91 	bl	8000f5c <__aeabi_f2iz>
 800043a:	2380      	movs	r3, #128	@ 0x80
 800043c:	061b      	lsls	r3, r3, #24
 800043e:	469c      	mov	ip, r3
 8000440:	4460      	add	r0, ip
 8000442:	e7f2      	b.n	800042a <__aeabi_f2uiz+0x16>

08000444 <__aeabi_fadd>:
 8000444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000446:	46ce      	mov	lr, r9
 8000448:	4647      	mov	r7, r8
 800044a:	0243      	lsls	r3, r0, #9
 800044c:	0a5a      	lsrs	r2, r3, #9
 800044e:	024e      	lsls	r6, r1, #9
 8000450:	0045      	lsls	r5, r0, #1
 8000452:	0fc4      	lsrs	r4, r0, #31
 8000454:	0048      	lsls	r0, r1, #1
 8000456:	4691      	mov	r9, r2
 8000458:	0e2d      	lsrs	r5, r5, #24
 800045a:	0a72      	lsrs	r2, r6, #9
 800045c:	0e00      	lsrs	r0, r0, #24
 800045e:	4694      	mov	ip, r2
 8000460:	b580      	push	{r7, lr}
 8000462:	099b      	lsrs	r3, r3, #6
 8000464:	0fc9      	lsrs	r1, r1, #31
 8000466:	09b6      	lsrs	r6, r6, #6
 8000468:	1a2a      	subs	r2, r5, r0
 800046a:	428c      	cmp	r4, r1
 800046c:	d021      	beq.n	80004b2 <__aeabi_fadd+0x6e>
 800046e:	2a00      	cmp	r2, #0
 8000470:	dd0d      	ble.n	800048e <__aeabi_fadd+0x4a>
 8000472:	2800      	cmp	r0, #0
 8000474:	d12d      	bne.n	80004d2 <__aeabi_fadd+0x8e>
 8000476:	2e00      	cmp	r6, #0
 8000478:	d100      	bne.n	800047c <__aeabi_fadd+0x38>
 800047a:	e08d      	b.n	8000598 <__aeabi_fadd+0x154>
 800047c:	1e51      	subs	r1, r2, #1
 800047e:	2a01      	cmp	r2, #1
 8000480:	d100      	bne.n	8000484 <__aeabi_fadd+0x40>
 8000482:	e11d      	b.n	80006c0 <__aeabi_fadd+0x27c>
 8000484:	2aff      	cmp	r2, #255	@ 0xff
 8000486:	d100      	bne.n	800048a <__aeabi_fadd+0x46>
 8000488:	e0ab      	b.n	80005e2 <__aeabi_fadd+0x19e>
 800048a:	000a      	movs	r2, r1
 800048c:	e027      	b.n	80004de <__aeabi_fadd+0x9a>
 800048e:	2a00      	cmp	r2, #0
 8000490:	d04d      	beq.n	800052e <__aeabi_fadd+0xea>
 8000492:	1b42      	subs	r2, r0, r5
 8000494:	2d00      	cmp	r5, #0
 8000496:	d000      	beq.n	800049a <__aeabi_fadd+0x56>
 8000498:	e0cc      	b.n	8000634 <__aeabi_fadd+0x1f0>
 800049a:	2b00      	cmp	r3, #0
 800049c:	d100      	bne.n	80004a0 <__aeabi_fadd+0x5c>
 800049e:	e079      	b.n	8000594 <__aeabi_fadd+0x150>
 80004a0:	1e54      	subs	r4, r2, #1
 80004a2:	2a01      	cmp	r2, #1
 80004a4:	d100      	bne.n	80004a8 <__aeabi_fadd+0x64>
 80004a6:	e128      	b.n	80006fa <__aeabi_fadd+0x2b6>
 80004a8:	2aff      	cmp	r2, #255	@ 0xff
 80004aa:	d100      	bne.n	80004ae <__aeabi_fadd+0x6a>
 80004ac:	e097      	b.n	80005de <__aeabi_fadd+0x19a>
 80004ae:	0022      	movs	r2, r4
 80004b0:	e0c5      	b.n	800063e <__aeabi_fadd+0x1fa>
 80004b2:	2a00      	cmp	r2, #0
 80004b4:	dc00      	bgt.n	80004b8 <__aeabi_fadd+0x74>
 80004b6:	e096      	b.n	80005e6 <__aeabi_fadd+0x1a2>
 80004b8:	2800      	cmp	r0, #0
 80004ba:	d04f      	beq.n	800055c <__aeabi_fadd+0x118>
 80004bc:	2dff      	cmp	r5, #255	@ 0xff
 80004be:	d100      	bne.n	80004c2 <__aeabi_fadd+0x7e>
 80004c0:	e08f      	b.n	80005e2 <__aeabi_fadd+0x19e>
 80004c2:	2180      	movs	r1, #128	@ 0x80
 80004c4:	04c9      	lsls	r1, r1, #19
 80004c6:	430e      	orrs	r6, r1
 80004c8:	2a1b      	cmp	r2, #27
 80004ca:	dd51      	ble.n	8000570 <__aeabi_fadd+0x12c>
 80004cc:	002a      	movs	r2, r5
 80004ce:	3301      	adds	r3, #1
 80004d0:	e018      	b.n	8000504 <__aeabi_fadd+0xc0>
 80004d2:	2dff      	cmp	r5, #255	@ 0xff
 80004d4:	d100      	bne.n	80004d8 <__aeabi_fadd+0x94>
 80004d6:	e084      	b.n	80005e2 <__aeabi_fadd+0x19e>
 80004d8:	2180      	movs	r1, #128	@ 0x80
 80004da:	04c9      	lsls	r1, r1, #19
 80004dc:	430e      	orrs	r6, r1
 80004de:	2101      	movs	r1, #1
 80004e0:	2a1b      	cmp	r2, #27
 80004e2:	dc08      	bgt.n	80004f6 <__aeabi_fadd+0xb2>
 80004e4:	0031      	movs	r1, r6
 80004e6:	2020      	movs	r0, #32
 80004e8:	40d1      	lsrs	r1, r2
 80004ea:	1a82      	subs	r2, r0, r2
 80004ec:	4096      	lsls	r6, r2
 80004ee:	0032      	movs	r2, r6
 80004f0:	1e50      	subs	r0, r2, #1
 80004f2:	4182      	sbcs	r2, r0
 80004f4:	4311      	orrs	r1, r2
 80004f6:	1a5b      	subs	r3, r3, r1
 80004f8:	015a      	lsls	r2, r3, #5
 80004fa:	d459      	bmi.n	80005b0 <__aeabi_fadd+0x16c>
 80004fc:	2107      	movs	r1, #7
 80004fe:	002a      	movs	r2, r5
 8000500:	4019      	ands	r1, r3
 8000502:	d049      	beq.n	8000598 <__aeabi_fadd+0x154>
 8000504:	210f      	movs	r1, #15
 8000506:	4019      	ands	r1, r3
 8000508:	2904      	cmp	r1, #4
 800050a:	d000      	beq.n	800050e <__aeabi_fadd+0xca>
 800050c:	3304      	adds	r3, #4
 800050e:	0159      	lsls	r1, r3, #5
 8000510:	d542      	bpl.n	8000598 <__aeabi_fadd+0x154>
 8000512:	1c50      	adds	r0, r2, #1
 8000514:	2afe      	cmp	r2, #254	@ 0xfe
 8000516:	d03a      	beq.n	800058e <__aeabi_fadd+0x14a>
 8000518:	019b      	lsls	r3, r3, #6
 800051a:	b2c0      	uxtb	r0, r0
 800051c:	0a5b      	lsrs	r3, r3, #9
 800051e:	05c0      	lsls	r0, r0, #23
 8000520:	4318      	orrs	r0, r3
 8000522:	07e4      	lsls	r4, r4, #31
 8000524:	4320      	orrs	r0, r4
 8000526:	bcc0      	pop	{r6, r7}
 8000528:	46b9      	mov	r9, r7
 800052a:	46b0      	mov	r8, r6
 800052c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800052e:	20fe      	movs	r0, #254	@ 0xfe
 8000530:	4680      	mov	r8, r0
 8000532:	1c6f      	adds	r7, r5, #1
 8000534:	0038      	movs	r0, r7
 8000536:	4647      	mov	r7, r8
 8000538:	4207      	tst	r7, r0
 800053a:	d000      	beq.n	800053e <__aeabi_fadd+0xfa>
 800053c:	e08e      	b.n	800065c <__aeabi_fadd+0x218>
 800053e:	2d00      	cmp	r5, #0
 8000540:	d000      	beq.n	8000544 <__aeabi_fadd+0x100>
 8000542:	e0b4      	b.n	80006ae <__aeabi_fadd+0x26a>
 8000544:	2b00      	cmp	r3, #0
 8000546:	d100      	bne.n	800054a <__aeabi_fadd+0x106>
 8000548:	e0db      	b.n	8000702 <__aeabi_fadd+0x2be>
 800054a:	2e00      	cmp	r6, #0
 800054c:	d06c      	beq.n	8000628 <__aeabi_fadd+0x1e4>
 800054e:	1b98      	subs	r0, r3, r6
 8000550:	0145      	lsls	r5, r0, #5
 8000552:	d400      	bmi.n	8000556 <__aeabi_fadd+0x112>
 8000554:	e0f7      	b.n	8000746 <__aeabi_fadd+0x302>
 8000556:	000c      	movs	r4, r1
 8000558:	1af3      	subs	r3, r6, r3
 800055a:	e03d      	b.n	80005d8 <__aeabi_fadd+0x194>
 800055c:	2e00      	cmp	r6, #0
 800055e:	d01b      	beq.n	8000598 <__aeabi_fadd+0x154>
 8000560:	1e51      	subs	r1, r2, #1
 8000562:	2a01      	cmp	r2, #1
 8000564:	d100      	bne.n	8000568 <__aeabi_fadd+0x124>
 8000566:	e082      	b.n	800066e <__aeabi_fadd+0x22a>
 8000568:	2aff      	cmp	r2, #255	@ 0xff
 800056a:	d03a      	beq.n	80005e2 <__aeabi_fadd+0x19e>
 800056c:	000a      	movs	r2, r1
 800056e:	e7ab      	b.n	80004c8 <__aeabi_fadd+0x84>
 8000570:	0031      	movs	r1, r6
 8000572:	2020      	movs	r0, #32
 8000574:	40d1      	lsrs	r1, r2
 8000576:	1a82      	subs	r2, r0, r2
 8000578:	4096      	lsls	r6, r2
 800057a:	0032      	movs	r2, r6
 800057c:	1e50      	subs	r0, r2, #1
 800057e:	4182      	sbcs	r2, r0
 8000580:	430a      	orrs	r2, r1
 8000582:	189b      	adds	r3, r3, r2
 8000584:	015a      	lsls	r2, r3, #5
 8000586:	d5b9      	bpl.n	80004fc <__aeabi_fadd+0xb8>
 8000588:	1c6a      	adds	r2, r5, #1
 800058a:	2dfe      	cmp	r5, #254	@ 0xfe
 800058c:	d175      	bne.n	800067a <__aeabi_fadd+0x236>
 800058e:	20ff      	movs	r0, #255	@ 0xff
 8000590:	2300      	movs	r3, #0
 8000592:	e7c4      	b.n	800051e <__aeabi_fadd+0xda>
 8000594:	000c      	movs	r4, r1
 8000596:	0033      	movs	r3, r6
 8000598:	08db      	lsrs	r3, r3, #3
 800059a:	2aff      	cmp	r2, #255	@ 0xff
 800059c:	d146      	bne.n	800062c <__aeabi_fadd+0x1e8>
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d0f5      	beq.n	800058e <__aeabi_fadd+0x14a>
 80005a2:	2280      	movs	r2, #128	@ 0x80
 80005a4:	03d2      	lsls	r2, r2, #15
 80005a6:	4313      	orrs	r3, r2
 80005a8:	025b      	lsls	r3, r3, #9
 80005aa:	20ff      	movs	r0, #255	@ 0xff
 80005ac:	0a5b      	lsrs	r3, r3, #9
 80005ae:	e7b6      	b.n	800051e <__aeabi_fadd+0xda>
 80005b0:	019f      	lsls	r7, r3, #6
 80005b2:	09bf      	lsrs	r7, r7, #6
 80005b4:	0038      	movs	r0, r7
 80005b6:	f000 fdb9 	bl	800112c <__clzsi2>
 80005ba:	3805      	subs	r0, #5
 80005bc:	4087      	lsls	r7, r0
 80005be:	4285      	cmp	r5, r0
 80005c0:	dc24      	bgt.n	800060c <__aeabi_fadd+0x1c8>
 80005c2:	003b      	movs	r3, r7
 80005c4:	2120      	movs	r1, #32
 80005c6:	1b42      	subs	r2, r0, r5
 80005c8:	3201      	adds	r2, #1
 80005ca:	40d3      	lsrs	r3, r2
 80005cc:	1a8a      	subs	r2, r1, r2
 80005ce:	4097      	lsls	r7, r2
 80005d0:	1e7a      	subs	r2, r7, #1
 80005d2:	4197      	sbcs	r7, r2
 80005d4:	2200      	movs	r2, #0
 80005d6:	433b      	orrs	r3, r7
 80005d8:	0759      	lsls	r1, r3, #29
 80005da:	d193      	bne.n	8000504 <__aeabi_fadd+0xc0>
 80005dc:	e797      	b.n	800050e <__aeabi_fadd+0xca>
 80005de:	000c      	movs	r4, r1
 80005e0:	0033      	movs	r3, r6
 80005e2:	08db      	lsrs	r3, r3, #3
 80005e4:	e7db      	b.n	800059e <__aeabi_fadd+0x15a>
 80005e6:	2a00      	cmp	r2, #0
 80005e8:	d014      	beq.n	8000614 <__aeabi_fadd+0x1d0>
 80005ea:	1b42      	subs	r2, r0, r5
 80005ec:	2d00      	cmp	r5, #0
 80005ee:	d14b      	bne.n	8000688 <__aeabi_fadd+0x244>
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d0d0      	beq.n	8000596 <__aeabi_fadd+0x152>
 80005f4:	1e51      	subs	r1, r2, #1
 80005f6:	2a01      	cmp	r2, #1
 80005f8:	d100      	bne.n	80005fc <__aeabi_fadd+0x1b8>
 80005fa:	e09e      	b.n	800073a <__aeabi_fadd+0x2f6>
 80005fc:	2aff      	cmp	r2, #255	@ 0xff
 80005fe:	d0ef      	beq.n	80005e0 <__aeabi_fadd+0x19c>
 8000600:	000a      	movs	r2, r1
 8000602:	2a1b      	cmp	r2, #27
 8000604:	dd5f      	ble.n	80006c6 <__aeabi_fadd+0x282>
 8000606:	0002      	movs	r2, r0
 8000608:	1c73      	adds	r3, r6, #1
 800060a:	e77b      	b.n	8000504 <__aeabi_fadd+0xc0>
 800060c:	4b50      	ldr	r3, [pc, #320]	@ (8000750 <__aeabi_fadd+0x30c>)
 800060e:	1a2a      	subs	r2, r5, r0
 8000610:	403b      	ands	r3, r7
 8000612:	e7e1      	b.n	80005d8 <__aeabi_fadd+0x194>
 8000614:	21fe      	movs	r1, #254	@ 0xfe
 8000616:	1c6a      	adds	r2, r5, #1
 8000618:	4211      	tst	r1, r2
 800061a:	d13b      	bne.n	8000694 <__aeabi_fadd+0x250>
 800061c:	2d00      	cmp	r5, #0
 800061e:	d15d      	bne.n	80006dc <__aeabi_fadd+0x298>
 8000620:	2b00      	cmp	r3, #0
 8000622:	d07f      	beq.n	8000724 <__aeabi_fadd+0x2e0>
 8000624:	2e00      	cmp	r6, #0
 8000626:	d17f      	bne.n	8000728 <__aeabi_fadd+0x2e4>
 8000628:	2200      	movs	r2, #0
 800062a:	08db      	lsrs	r3, r3, #3
 800062c:	025b      	lsls	r3, r3, #9
 800062e:	0a5b      	lsrs	r3, r3, #9
 8000630:	b2d0      	uxtb	r0, r2
 8000632:	e774      	b.n	800051e <__aeabi_fadd+0xda>
 8000634:	28ff      	cmp	r0, #255	@ 0xff
 8000636:	d0d2      	beq.n	80005de <__aeabi_fadd+0x19a>
 8000638:	2480      	movs	r4, #128	@ 0x80
 800063a:	04e4      	lsls	r4, r4, #19
 800063c:	4323      	orrs	r3, r4
 800063e:	2401      	movs	r4, #1
 8000640:	2a1b      	cmp	r2, #27
 8000642:	dc07      	bgt.n	8000654 <__aeabi_fadd+0x210>
 8000644:	001c      	movs	r4, r3
 8000646:	2520      	movs	r5, #32
 8000648:	40d4      	lsrs	r4, r2
 800064a:	1aaa      	subs	r2, r5, r2
 800064c:	4093      	lsls	r3, r2
 800064e:	1e5a      	subs	r2, r3, #1
 8000650:	4193      	sbcs	r3, r2
 8000652:	431c      	orrs	r4, r3
 8000654:	1b33      	subs	r3, r6, r4
 8000656:	0005      	movs	r5, r0
 8000658:	000c      	movs	r4, r1
 800065a:	e74d      	b.n	80004f8 <__aeabi_fadd+0xb4>
 800065c:	1b9f      	subs	r7, r3, r6
 800065e:	017a      	lsls	r2, r7, #5
 8000660:	d422      	bmi.n	80006a8 <__aeabi_fadd+0x264>
 8000662:	2f00      	cmp	r7, #0
 8000664:	d1a6      	bne.n	80005b4 <__aeabi_fadd+0x170>
 8000666:	2400      	movs	r4, #0
 8000668:	2000      	movs	r0, #0
 800066a:	2300      	movs	r3, #0
 800066c:	e757      	b.n	800051e <__aeabi_fadd+0xda>
 800066e:	199b      	adds	r3, r3, r6
 8000670:	2501      	movs	r5, #1
 8000672:	3201      	adds	r2, #1
 8000674:	0159      	lsls	r1, r3, #5
 8000676:	d400      	bmi.n	800067a <__aeabi_fadd+0x236>
 8000678:	e740      	b.n	80004fc <__aeabi_fadd+0xb8>
 800067a:	2101      	movs	r1, #1
 800067c:	4835      	ldr	r0, [pc, #212]	@ (8000754 <__aeabi_fadd+0x310>)
 800067e:	4019      	ands	r1, r3
 8000680:	085b      	lsrs	r3, r3, #1
 8000682:	4003      	ands	r3, r0
 8000684:	430b      	orrs	r3, r1
 8000686:	e7a7      	b.n	80005d8 <__aeabi_fadd+0x194>
 8000688:	28ff      	cmp	r0, #255	@ 0xff
 800068a:	d0a9      	beq.n	80005e0 <__aeabi_fadd+0x19c>
 800068c:	2180      	movs	r1, #128	@ 0x80
 800068e:	04c9      	lsls	r1, r1, #19
 8000690:	430b      	orrs	r3, r1
 8000692:	e7b6      	b.n	8000602 <__aeabi_fadd+0x1be>
 8000694:	2aff      	cmp	r2, #255	@ 0xff
 8000696:	d100      	bne.n	800069a <__aeabi_fadd+0x256>
 8000698:	e779      	b.n	800058e <__aeabi_fadd+0x14a>
 800069a:	199b      	adds	r3, r3, r6
 800069c:	085b      	lsrs	r3, r3, #1
 800069e:	0759      	lsls	r1, r3, #29
 80006a0:	d000      	beq.n	80006a4 <__aeabi_fadd+0x260>
 80006a2:	e72f      	b.n	8000504 <__aeabi_fadd+0xc0>
 80006a4:	08db      	lsrs	r3, r3, #3
 80006a6:	e7c1      	b.n	800062c <__aeabi_fadd+0x1e8>
 80006a8:	000c      	movs	r4, r1
 80006aa:	1af7      	subs	r7, r6, r3
 80006ac:	e782      	b.n	80005b4 <__aeabi_fadd+0x170>
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d12c      	bne.n	800070c <__aeabi_fadd+0x2c8>
 80006b2:	2e00      	cmp	r6, #0
 80006b4:	d193      	bne.n	80005de <__aeabi_fadd+0x19a>
 80006b6:	2380      	movs	r3, #128	@ 0x80
 80006b8:	2400      	movs	r4, #0
 80006ba:	20ff      	movs	r0, #255	@ 0xff
 80006bc:	03db      	lsls	r3, r3, #15
 80006be:	e72e      	b.n	800051e <__aeabi_fadd+0xda>
 80006c0:	2501      	movs	r5, #1
 80006c2:	1b9b      	subs	r3, r3, r6
 80006c4:	e718      	b.n	80004f8 <__aeabi_fadd+0xb4>
 80006c6:	0019      	movs	r1, r3
 80006c8:	2520      	movs	r5, #32
 80006ca:	40d1      	lsrs	r1, r2
 80006cc:	1aaa      	subs	r2, r5, r2
 80006ce:	4093      	lsls	r3, r2
 80006d0:	1e5a      	subs	r2, r3, #1
 80006d2:	4193      	sbcs	r3, r2
 80006d4:	430b      	orrs	r3, r1
 80006d6:	0005      	movs	r5, r0
 80006d8:	199b      	adds	r3, r3, r6
 80006da:	e753      	b.n	8000584 <__aeabi_fadd+0x140>
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d100      	bne.n	80006e2 <__aeabi_fadd+0x29e>
 80006e0:	e77e      	b.n	80005e0 <__aeabi_fadd+0x19c>
 80006e2:	2e00      	cmp	r6, #0
 80006e4:	d100      	bne.n	80006e8 <__aeabi_fadd+0x2a4>
 80006e6:	e77c      	b.n	80005e2 <__aeabi_fadd+0x19e>
 80006e8:	2280      	movs	r2, #128	@ 0x80
 80006ea:	03d2      	lsls	r2, r2, #15
 80006ec:	4591      	cmp	r9, r2
 80006ee:	d302      	bcc.n	80006f6 <__aeabi_fadd+0x2b2>
 80006f0:	4594      	cmp	ip, r2
 80006f2:	d200      	bcs.n	80006f6 <__aeabi_fadd+0x2b2>
 80006f4:	0033      	movs	r3, r6
 80006f6:	08db      	lsrs	r3, r3, #3
 80006f8:	e753      	b.n	80005a2 <__aeabi_fadd+0x15e>
 80006fa:	000c      	movs	r4, r1
 80006fc:	1af3      	subs	r3, r6, r3
 80006fe:	3501      	adds	r5, #1
 8000700:	e6fa      	b.n	80004f8 <__aeabi_fadd+0xb4>
 8000702:	2e00      	cmp	r6, #0
 8000704:	d0af      	beq.n	8000666 <__aeabi_fadd+0x222>
 8000706:	000c      	movs	r4, r1
 8000708:	0033      	movs	r3, r6
 800070a:	e78d      	b.n	8000628 <__aeabi_fadd+0x1e4>
 800070c:	2e00      	cmp	r6, #0
 800070e:	d100      	bne.n	8000712 <__aeabi_fadd+0x2ce>
 8000710:	e767      	b.n	80005e2 <__aeabi_fadd+0x19e>
 8000712:	2280      	movs	r2, #128	@ 0x80
 8000714:	03d2      	lsls	r2, r2, #15
 8000716:	4591      	cmp	r9, r2
 8000718:	d3ed      	bcc.n	80006f6 <__aeabi_fadd+0x2b2>
 800071a:	4594      	cmp	ip, r2
 800071c:	d2eb      	bcs.n	80006f6 <__aeabi_fadd+0x2b2>
 800071e:	000c      	movs	r4, r1
 8000720:	0033      	movs	r3, r6
 8000722:	e7e8      	b.n	80006f6 <__aeabi_fadd+0x2b2>
 8000724:	0033      	movs	r3, r6
 8000726:	e77f      	b.n	8000628 <__aeabi_fadd+0x1e4>
 8000728:	199b      	adds	r3, r3, r6
 800072a:	2200      	movs	r2, #0
 800072c:	0159      	lsls	r1, r3, #5
 800072e:	d5b9      	bpl.n	80006a4 <__aeabi_fadd+0x260>
 8000730:	4a07      	ldr	r2, [pc, #28]	@ (8000750 <__aeabi_fadd+0x30c>)
 8000732:	4013      	ands	r3, r2
 8000734:	08db      	lsrs	r3, r3, #3
 8000736:	2201      	movs	r2, #1
 8000738:	e778      	b.n	800062c <__aeabi_fadd+0x1e8>
 800073a:	199b      	adds	r3, r3, r6
 800073c:	3201      	adds	r2, #1
 800073e:	3501      	adds	r5, #1
 8000740:	0159      	lsls	r1, r3, #5
 8000742:	d49a      	bmi.n	800067a <__aeabi_fadd+0x236>
 8000744:	e6da      	b.n	80004fc <__aeabi_fadd+0xb8>
 8000746:	1e03      	subs	r3, r0, #0
 8000748:	d08d      	beq.n	8000666 <__aeabi_fadd+0x222>
 800074a:	08db      	lsrs	r3, r3, #3
 800074c:	e76e      	b.n	800062c <__aeabi_fadd+0x1e8>
 800074e:	46c0      	nop			@ (mov r8, r8)
 8000750:	fbffffff 	.word	0xfbffffff
 8000754:	7dffffff 	.word	0x7dffffff

08000758 <__aeabi_fdiv>:
 8000758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800075a:	464f      	mov	r7, r9
 800075c:	4646      	mov	r6, r8
 800075e:	46d6      	mov	lr, sl
 8000760:	0244      	lsls	r4, r0, #9
 8000762:	b5c0      	push	{r6, r7, lr}
 8000764:	0047      	lsls	r7, r0, #1
 8000766:	1c0e      	adds	r6, r1, #0
 8000768:	0a64      	lsrs	r4, r4, #9
 800076a:	0e3f      	lsrs	r7, r7, #24
 800076c:	0fc5      	lsrs	r5, r0, #31
 800076e:	2f00      	cmp	r7, #0
 8000770:	d03c      	beq.n	80007ec <__aeabi_fdiv+0x94>
 8000772:	2fff      	cmp	r7, #255	@ 0xff
 8000774:	d042      	beq.n	80007fc <__aeabi_fdiv+0xa4>
 8000776:	2300      	movs	r3, #0
 8000778:	2280      	movs	r2, #128	@ 0x80
 800077a:	4699      	mov	r9, r3
 800077c:	469a      	mov	sl, r3
 800077e:	00e4      	lsls	r4, r4, #3
 8000780:	04d2      	lsls	r2, r2, #19
 8000782:	4314      	orrs	r4, r2
 8000784:	3f7f      	subs	r7, #127	@ 0x7f
 8000786:	0273      	lsls	r3, r6, #9
 8000788:	0a5b      	lsrs	r3, r3, #9
 800078a:	4698      	mov	r8, r3
 800078c:	0073      	lsls	r3, r6, #1
 800078e:	0e1b      	lsrs	r3, r3, #24
 8000790:	0ff6      	lsrs	r6, r6, #31
 8000792:	2b00      	cmp	r3, #0
 8000794:	d01b      	beq.n	80007ce <__aeabi_fdiv+0x76>
 8000796:	2bff      	cmp	r3, #255	@ 0xff
 8000798:	d013      	beq.n	80007c2 <__aeabi_fdiv+0x6a>
 800079a:	4642      	mov	r2, r8
 800079c:	2180      	movs	r1, #128	@ 0x80
 800079e:	00d2      	lsls	r2, r2, #3
 80007a0:	04c9      	lsls	r1, r1, #19
 80007a2:	4311      	orrs	r1, r2
 80007a4:	4688      	mov	r8, r1
 80007a6:	2000      	movs	r0, #0
 80007a8:	3b7f      	subs	r3, #127	@ 0x7f
 80007aa:	0029      	movs	r1, r5
 80007ac:	1aff      	subs	r7, r7, r3
 80007ae:	464b      	mov	r3, r9
 80007b0:	4071      	eors	r1, r6
 80007b2:	b2c9      	uxtb	r1, r1
 80007b4:	2b0f      	cmp	r3, #15
 80007b6:	d900      	bls.n	80007ba <__aeabi_fdiv+0x62>
 80007b8:	e0b5      	b.n	8000926 <__aeabi_fdiv+0x1ce>
 80007ba:	4a74      	ldr	r2, [pc, #464]	@ (800098c <__aeabi_fdiv+0x234>)
 80007bc:	009b      	lsls	r3, r3, #2
 80007be:	58d3      	ldr	r3, [r2, r3]
 80007c0:	469f      	mov	pc, r3
 80007c2:	4643      	mov	r3, r8
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d13f      	bne.n	8000848 <__aeabi_fdiv+0xf0>
 80007c8:	3fff      	subs	r7, #255	@ 0xff
 80007ca:	3302      	adds	r3, #2
 80007cc:	e003      	b.n	80007d6 <__aeabi_fdiv+0x7e>
 80007ce:	4643      	mov	r3, r8
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d12d      	bne.n	8000830 <__aeabi_fdiv+0xd8>
 80007d4:	2301      	movs	r3, #1
 80007d6:	0029      	movs	r1, r5
 80007d8:	464a      	mov	r2, r9
 80007da:	4071      	eors	r1, r6
 80007dc:	b2c9      	uxtb	r1, r1
 80007de:	431a      	orrs	r2, r3
 80007e0:	2a0e      	cmp	r2, #14
 80007e2:	d838      	bhi.n	8000856 <__aeabi_fdiv+0xfe>
 80007e4:	486a      	ldr	r0, [pc, #424]	@ (8000990 <__aeabi_fdiv+0x238>)
 80007e6:	0092      	lsls	r2, r2, #2
 80007e8:	5882      	ldr	r2, [r0, r2]
 80007ea:	4697      	mov	pc, r2
 80007ec:	2c00      	cmp	r4, #0
 80007ee:	d113      	bne.n	8000818 <__aeabi_fdiv+0xc0>
 80007f0:	2304      	movs	r3, #4
 80007f2:	4699      	mov	r9, r3
 80007f4:	3b03      	subs	r3, #3
 80007f6:	2700      	movs	r7, #0
 80007f8:	469a      	mov	sl, r3
 80007fa:	e7c4      	b.n	8000786 <__aeabi_fdiv+0x2e>
 80007fc:	2c00      	cmp	r4, #0
 80007fe:	d105      	bne.n	800080c <__aeabi_fdiv+0xb4>
 8000800:	2308      	movs	r3, #8
 8000802:	4699      	mov	r9, r3
 8000804:	3b06      	subs	r3, #6
 8000806:	27ff      	movs	r7, #255	@ 0xff
 8000808:	469a      	mov	sl, r3
 800080a:	e7bc      	b.n	8000786 <__aeabi_fdiv+0x2e>
 800080c:	230c      	movs	r3, #12
 800080e:	4699      	mov	r9, r3
 8000810:	3b09      	subs	r3, #9
 8000812:	27ff      	movs	r7, #255	@ 0xff
 8000814:	469a      	mov	sl, r3
 8000816:	e7b6      	b.n	8000786 <__aeabi_fdiv+0x2e>
 8000818:	0020      	movs	r0, r4
 800081a:	f000 fc87 	bl	800112c <__clzsi2>
 800081e:	2776      	movs	r7, #118	@ 0x76
 8000820:	1f43      	subs	r3, r0, #5
 8000822:	409c      	lsls	r4, r3
 8000824:	2300      	movs	r3, #0
 8000826:	427f      	negs	r7, r7
 8000828:	4699      	mov	r9, r3
 800082a:	469a      	mov	sl, r3
 800082c:	1a3f      	subs	r7, r7, r0
 800082e:	e7aa      	b.n	8000786 <__aeabi_fdiv+0x2e>
 8000830:	4640      	mov	r0, r8
 8000832:	f000 fc7b 	bl	800112c <__clzsi2>
 8000836:	4642      	mov	r2, r8
 8000838:	1f43      	subs	r3, r0, #5
 800083a:	409a      	lsls	r2, r3
 800083c:	2376      	movs	r3, #118	@ 0x76
 800083e:	425b      	negs	r3, r3
 8000840:	1a1b      	subs	r3, r3, r0
 8000842:	4690      	mov	r8, r2
 8000844:	2000      	movs	r0, #0
 8000846:	e7b0      	b.n	80007aa <__aeabi_fdiv+0x52>
 8000848:	2303      	movs	r3, #3
 800084a:	464a      	mov	r2, r9
 800084c:	431a      	orrs	r2, r3
 800084e:	4691      	mov	r9, r2
 8000850:	2003      	movs	r0, #3
 8000852:	33fc      	adds	r3, #252	@ 0xfc
 8000854:	e7a9      	b.n	80007aa <__aeabi_fdiv+0x52>
 8000856:	000d      	movs	r5, r1
 8000858:	20ff      	movs	r0, #255	@ 0xff
 800085a:	2200      	movs	r2, #0
 800085c:	05c0      	lsls	r0, r0, #23
 800085e:	07ed      	lsls	r5, r5, #31
 8000860:	4310      	orrs	r0, r2
 8000862:	4328      	orrs	r0, r5
 8000864:	bce0      	pop	{r5, r6, r7}
 8000866:	46ba      	mov	sl, r7
 8000868:	46b1      	mov	r9, r6
 800086a:	46a8      	mov	r8, r5
 800086c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800086e:	000d      	movs	r5, r1
 8000870:	2000      	movs	r0, #0
 8000872:	2200      	movs	r2, #0
 8000874:	e7f2      	b.n	800085c <__aeabi_fdiv+0x104>
 8000876:	4653      	mov	r3, sl
 8000878:	2b02      	cmp	r3, #2
 800087a:	d0ed      	beq.n	8000858 <__aeabi_fdiv+0x100>
 800087c:	2b03      	cmp	r3, #3
 800087e:	d033      	beq.n	80008e8 <__aeabi_fdiv+0x190>
 8000880:	46a0      	mov	r8, r4
 8000882:	2b01      	cmp	r3, #1
 8000884:	d105      	bne.n	8000892 <__aeabi_fdiv+0x13a>
 8000886:	2000      	movs	r0, #0
 8000888:	2200      	movs	r2, #0
 800088a:	e7e7      	b.n	800085c <__aeabi_fdiv+0x104>
 800088c:	0035      	movs	r5, r6
 800088e:	2803      	cmp	r0, #3
 8000890:	d07a      	beq.n	8000988 <__aeabi_fdiv+0x230>
 8000892:	003b      	movs	r3, r7
 8000894:	337f      	adds	r3, #127	@ 0x7f
 8000896:	2b00      	cmp	r3, #0
 8000898:	dd2d      	ble.n	80008f6 <__aeabi_fdiv+0x19e>
 800089a:	4642      	mov	r2, r8
 800089c:	0752      	lsls	r2, r2, #29
 800089e:	d007      	beq.n	80008b0 <__aeabi_fdiv+0x158>
 80008a0:	220f      	movs	r2, #15
 80008a2:	4641      	mov	r1, r8
 80008a4:	400a      	ands	r2, r1
 80008a6:	2a04      	cmp	r2, #4
 80008a8:	d002      	beq.n	80008b0 <__aeabi_fdiv+0x158>
 80008aa:	2204      	movs	r2, #4
 80008ac:	4694      	mov	ip, r2
 80008ae:	44e0      	add	r8, ip
 80008b0:	4642      	mov	r2, r8
 80008b2:	0112      	lsls	r2, r2, #4
 80008b4:	d505      	bpl.n	80008c2 <__aeabi_fdiv+0x16a>
 80008b6:	4642      	mov	r2, r8
 80008b8:	4b36      	ldr	r3, [pc, #216]	@ (8000994 <__aeabi_fdiv+0x23c>)
 80008ba:	401a      	ands	r2, r3
 80008bc:	003b      	movs	r3, r7
 80008be:	4690      	mov	r8, r2
 80008c0:	3380      	adds	r3, #128	@ 0x80
 80008c2:	2bfe      	cmp	r3, #254	@ 0xfe
 80008c4:	dcc8      	bgt.n	8000858 <__aeabi_fdiv+0x100>
 80008c6:	4642      	mov	r2, r8
 80008c8:	0192      	lsls	r2, r2, #6
 80008ca:	0a52      	lsrs	r2, r2, #9
 80008cc:	b2d8      	uxtb	r0, r3
 80008ce:	e7c5      	b.n	800085c <__aeabi_fdiv+0x104>
 80008d0:	2280      	movs	r2, #128	@ 0x80
 80008d2:	2500      	movs	r5, #0
 80008d4:	20ff      	movs	r0, #255	@ 0xff
 80008d6:	03d2      	lsls	r2, r2, #15
 80008d8:	e7c0      	b.n	800085c <__aeabi_fdiv+0x104>
 80008da:	2280      	movs	r2, #128	@ 0x80
 80008dc:	03d2      	lsls	r2, r2, #15
 80008de:	4214      	tst	r4, r2
 80008e0:	d002      	beq.n	80008e8 <__aeabi_fdiv+0x190>
 80008e2:	4643      	mov	r3, r8
 80008e4:	4213      	tst	r3, r2
 80008e6:	d049      	beq.n	800097c <__aeabi_fdiv+0x224>
 80008e8:	2280      	movs	r2, #128	@ 0x80
 80008ea:	03d2      	lsls	r2, r2, #15
 80008ec:	4322      	orrs	r2, r4
 80008ee:	0252      	lsls	r2, r2, #9
 80008f0:	20ff      	movs	r0, #255	@ 0xff
 80008f2:	0a52      	lsrs	r2, r2, #9
 80008f4:	e7b2      	b.n	800085c <__aeabi_fdiv+0x104>
 80008f6:	2201      	movs	r2, #1
 80008f8:	1ad3      	subs	r3, r2, r3
 80008fa:	2b1b      	cmp	r3, #27
 80008fc:	dcc3      	bgt.n	8000886 <__aeabi_fdiv+0x12e>
 80008fe:	4642      	mov	r2, r8
 8000900:	40da      	lsrs	r2, r3
 8000902:	4643      	mov	r3, r8
 8000904:	379e      	adds	r7, #158	@ 0x9e
 8000906:	40bb      	lsls	r3, r7
 8000908:	1e59      	subs	r1, r3, #1
 800090a:	418b      	sbcs	r3, r1
 800090c:	431a      	orrs	r2, r3
 800090e:	0753      	lsls	r3, r2, #29
 8000910:	d004      	beq.n	800091c <__aeabi_fdiv+0x1c4>
 8000912:	230f      	movs	r3, #15
 8000914:	4013      	ands	r3, r2
 8000916:	2b04      	cmp	r3, #4
 8000918:	d000      	beq.n	800091c <__aeabi_fdiv+0x1c4>
 800091a:	3204      	adds	r2, #4
 800091c:	0153      	lsls	r3, r2, #5
 800091e:	d529      	bpl.n	8000974 <__aeabi_fdiv+0x21c>
 8000920:	2001      	movs	r0, #1
 8000922:	2200      	movs	r2, #0
 8000924:	e79a      	b.n	800085c <__aeabi_fdiv+0x104>
 8000926:	4642      	mov	r2, r8
 8000928:	0163      	lsls	r3, r4, #5
 800092a:	0155      	lsls	r5, r2, #5
 800092c:	42ab      	cmp	r3, r5
 800092e:	d215      	bcs.n	800095c <__aeabi_fdiv+0x204>
 8000930:	201b      	movs	r0, #27
 8000932:	2200      	movs	r2, #0
 8000934:	3f01      	subs	r7, #1
 8000936:	2601      	movs	r6, #1
 8000938:	001c      	movs	r4, r3
 800093a:	0052      	lsls	r2, r2, #1
 800093c:	005b      	lsls	r3, r3, #1
 800093e:	2c00      	cmp	r4, #0
 8000940:	db01      	blt.n	8000946 <__aeabi_fdiv+0x1ee>
 8000942:	429d      	cmp	r5, r3
 8000944:	d801      	bhi.n	800094a <__aeabi_fdiv+0x1f2>
 8000946:	1b5b      	subs	r3, r3, r5
 8000948:	4332      	orrs	r2, r6
 800094a:	3801      	subs	r0, #1
 800094c:	2800      	cmp	r0, #0
 800094e:	d1f3      	bne.n	8000938 <__aeabi_fdiv+0x1e0>
 8000950:	1e58      	subs	r0, r3, #1
 8000952:	4183      	sbcs	r3, r0
 8000954:	4313      	orrs	r3, r2
 8000956:	4698      	mov	r8, r3
 8000958:	000d      	movs	r5, r1
 800095a:	e79a      	b.n	8000892 <__aeabi_fdiv+0x13a>
 800095c:	201a      	movs	r0, #26
 800095e:	2201      	movs	r2, #1
 8000960:	1b5b      	subs	r3, r3, r5
 8000962:	e7e8      	b.n	8000936 <__aeabi_fdiv+0x1de>
 8000964:	3b02      	subs	r3, #2
 8000966:	425a      	negs	r2, r3
 8000968:	4153      	adcs	r3, r2
 800096a:	425b      	negs	r3, r3
 800096c:	0035      	movs	r5, r6
 800096e:	2200      	movs	r2, #0
 8000970:	b2d8      	uxtb	r0, r3
 8000972:	e773      	b.n	800085c <__aeabi_fdiv+0x104>
 8000974:	0192      	lsls	r2, r2, #6
 8000976:	2000      	movs	r0, #0
 8000978:	0a52      	lsrs	r2, r2, #9
 800097a:	e76f      	b.n	800085c <__aeabi_fdiv+0x104>
 800097c:	431a      	orrs	r2, r3
 800097e:	0252      	lsls	r2, r2, #9
 8000980:	0035      	movs	r5, r6
 8000982:	20ff      	movs	r0, #255	@ 0xff
 8000984:	0a52      	lsrs	r2, r2, #9
 8000986:	e769      	b.n	800085c <__aeabi_fdiv+0x104>
 8000988:	4644      	mov	r4, r8
 800098a:	e7ad      	b.n	80008e8 <__aeabi_fdiv+0x190>
 800098c:	0800734c 	.word	0x0800734c
 8000990:	0800738c 	.word	0x0800738c
 8000994:	f7ffffff 	.word	0xf7ffffff

08000998 <__aeabi_fmul>:
 8000998:	b5f0      	push	{r4, r5, r6, r7, lr}
 800099a:	464f      	mov	r7, r9
 800099c:	4646      	mov	r6, r8
 800099e:	46d6      	mov	lr, sl
 80009a0:	0243      	lsls	r3, r0, #9
 80009a2:	0a5b      	lsrs	r3, r3, #9
 80009a4:	0045      	lsls	r5, r0, #1
 80009a6:	b5c0      	push	{r6, r7, lr}
 80009a8:	4699      	mov	r9, r3
 80009aa:	1c0f      	adds	r7, r1, #0
 80009ac:	0e2d      	lsrs	r5, r5, #24
 80009ae:	0fc6      	lsrs	r6, r0, #31
 80009b0:	2d00      	cmp	r5, #0
 80009b2:	d100      	bne.n	80009b6 <__aeabi_fmul+0x1e>
 80009b4:	e088      	b.n	8000ac8 <__aeabi_fmul+0x130>
 80009b6:	2dff      	cmp	r5, #255	@ 0xff
 80009b8:	d100      	bne.n	80009bc <__aeabi_fmul+0x24>
 80009ba:	e08d      	b.n	8000ad8 <__aeabi_fmul+0x140>
 80009bc:	2280      	movs	r2, #128	@ 0x80
 80009be:	00db      	lsls	r3, r3, #3
 80009c0:	04d2      	lsls	r2, r2, #19
 80009c2:	431a      	orrs	r2, r3
 80009c4:	2300      	movs	r3, #0
 80009c6:	4691      	mov	r9, r2
 80009c8:	4698      	mov	r8, r3
 80009ca:	469a      	mov	sl, r3
 80009cc:	3d7f      	subs	r5, #127	@ 0x7f
 80009ce:	027c      	lsls	r4, r7, #9
 80009d0:	007b      	lsls	r3, r7, #1
 80009d2:	0a64      	lsrs	r4, r4, #9
 80009d4:	0e1b      	lsrs	r3, r3, #24
 80009d6:	0fff      	lsrs	r7, r7, #31
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d068      	beq.n	8000aae <__aeabi_fmul+0x116>
 80009dc:	2bff      	cmp	r3, #255	@ 0xff
 80009de:	d021      	beq.n	8000a24 <__aeabi_fmul+0x8c>
 80009e0:	2280      	movs	r2, #128	@ 0x80
 80009e2:	00e4      	lsls	r4, r4, #3
 80009e4:	04d2      	lsls	r2, r2, #19
 80009e6:	4314      	orrs	r4, r2
 80009e8:	4642      	mov	r2, r8
 80009ea:	3b7f      	subs	r3, #127	@ 0x7f
 80009ec:	195b      	adds	r3, r3, r5
 80009ee:	2100      	movs	r1, #0
 80009f0:	1c5d      	adds	r5, r3, #1
 80009f2:	2a0a      	cmp	r2, #10
 80009f4:	dc2e      	bgt.n	8000a54 <__aeabi_fmul+0xbc>
 80009f6:	407e      	eors	r6, r7
 80009f8:	4642      	mov	r2, r8
 80009fa:	2a02      	cmp	r2, #2
 80009fc:	dc23      	bgt.n	8000a46 <__aeabi_fmul+0xae>
 80009fe:	3a01      	subs	r2, #1
 8000a00:	2a01      	cmp	r2, #1
 8000a02:	d900      	bls.n	8000a06 <__aeabi_fmul+0x6e>
 8000a04:	e0bd      	b.n	8000b82 <__aeabi_fmul+0x1ea>
 8000a06:	2902      	cmp	r1, #2
 8000a08:	d06e      	beq.n	8000ae8 <__aeabi_fmul+0x150>
 8000a0a:	2901      	cmp	r1, #1
 8000a0c:	d12c      	bne.n	8000a68 <__aeabi_fmul+0xd0>
 8000a0e:	2000      	movs	r0, #0
 8000a10:	2200      	movs	r2, #0
 8000a12:	05c0      	lsls	r0, r0, #23
 8000a14:	07f6      	lsls	r6, r6, #31
 8000a16:	4310      	orrs	r0, r2
 8000a18:	4330      	orrs	r0, r6
 8000a1a:	bce0      	pop	{r5, r6, r7}
 8000a1c:	46ba      	mov	sl, r7
 8000a1e:	46b1      	mov	r9, r6
 8000a20:	46a8      	mov	r8, r5
 8000a22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a24:	002b      	movs	r3, r5
 8000a26:	33ff      	adds	r3, #255	@ 0xff
 8000a28:	2c00      	cmp	r4, #0
 8000a2a:	d065      	beq.n	8000af8 <__aeabi_fmul+0x160>
 8000a2c:	2203      	movs	r2, #3
 8000a2e:	4641      	mov	r1, r8
 8000a30:	4311      	orrs	r1, r2
 8000a32:	0032      	movs	r2, r6
 8000a34:	3501      	adds	r5, #1
 8000a36:	4688      	mov	r8, r1
 8000a38:	407a      	eors	r2, r7
 8000a3a:	35ff      	adds	r5, #255	@ 0xff
 8000a3c:	290a      	cmp	r1, #10
 8000a3e:	dd00      	ble.n	8000a42 <__aeabi_fmul+0xaa>
 8000a40:	e0d8      	b.n	8000bf4 <__aeabi_fmul+0x25c>
 8000a42:	0016      	movs	r6, r2
 8000a44:	2103      	movs	r1, #3
 8000a46:	4640      	mov	r0, r8
 8000a48:	2201      	movs	r2, #1
 8000a4a:	4082      	lsls	r2, r0
 8000a4c:	20a6      	movs	r0, #166	@ 0xa6
 8000a4e:	00c0      	lsls	r0, r0, #3
 8000a50:	4202      	tst	r2, r0
 8000a52:	d020      	beq.n	8000a96 <__aeabi_fmul+0xfe>
 8000a54:	4653      	mov	r3, sl
 8000a56:	2b02      	cmp	r3, #2
 8000a58:	d046      	beq.n	8000ae8 <__aeabi_fmul+0x150>
 8000a5a:	2b03      	cmp	r3, #3
 8000a5c:	d100      	bne.n	8000a60 <__aeabi_fmul+0xc8>
 8000a5e:	e0bb      	b.n	8000bd8 <__aeabi_fmul+0x240>
 8000a60:	4651      	mov	r1, sl
 8000a62:	464c      	mov	r4, r9
 8000a64:	2901      	cmp	r1, #1
 8000a66:	d0d2      	beq.n	8000a0e <__aeabi_fmul+0x76>
 8000a68:	002b      	movs	r3, r5
 8000a6a:	337f      	adds	r3, #127	@ 0x7f
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	dd70      	ble.n	8000b52 <__aeabi_fmul+0x1ba>
 8000a70:	0762      	lsls	r2, r4, #29
 8000a72:	d004      	beq.n	8000a7e <__aeabi_fmul+0xe6>
 8000a74:	220f      	movs	r2, #15
 8000a76:	4022      	ands	r2, r4
 8000a78:	2a04      	cmp	r2, #4
 8000a7a:	d000      	beq.n	8000a7e <__aeabi_fmul+0xe6>
 8000a7c:	3404      	adds	r4, #4
 8000a7e:	0122      	lsls	r2, r4, #4
 8000a80:	d503      	bpl.n	8000a8a <__aeabi_fmul+0xf2>
 8000a82:	4b63      	ldr	r3, [pc, #396]	@ (8000c10 <__aeabi_fmul+0x278>)
 8000a84:	401c      	ands	r4, r3
 8000a86:	002b      	movs	r3, r5
 8000a88:	3380      	adds	r3, #128	@ 0x80
 8000a8a:	2bfe      	cmp	r3, #254	@ 0xfe
 8000a8c:	dc2c      	bgt.n	8000ae8 <__aeabi_fmul+0x150>
 8000a8e:	01a2      	lsls	r2, r4, #6
 8000a90:	0a52      	lsrs	r2, r2, #9
 8000a92:	b2d8      	uxtb	r0, r3
 8000a94:	e7bd      	b.n	8000a12 <__aeabi_fmul+0x7a>
 8000a96:	2090      	movs	r0, #144	@ 0x90
 8000a98:	0080      	lsls	r0, r0, #2
 8000a9a:	4202      	tst	r2, r0
 8000a9c:	d127      	bne.n	8000aee <__aeabi_fmul+0x156>
 8000a9e:	38b9      	subs	r0, #185	@ 0xb9
 8000aa0:	38ff      	subs	r0, #255	@ 0xff
 8000aa2:	4210      	tst	r0, r2
 8000aa4:	d06d      	beq.n	8000b82 <__aeabi_fmul+0x1ea>
 8000aa6:	003e      	movs	r6, r7
 8000aa8:	46a1      	mov	r9, r4
 8000aaa:	468a      	mov	sl, r1
 8000aac:	e7d2      	b.n	8000a54 <__aeabi_fmul+0xbc>
 8000aae:	2c00      	cmp	r4, #0
 8000ab0:	d141      	bne.n	8000b36 <__aeabi_fmul+0x19e>
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	4642      	mov	r2, r8
 8000ab6:	431a      	orrs	r2, r3
 8000ab8:	4690      	mov	r8, r2
 8000aba:	002b      	movs	r3, r5
 8000abc:	4642      	mov	r2, r8
 8000abe:	2101      	movs	r1, #1
 8000ac0:	1c5d      	adds	r5, r3, #1
 8000ac2:	2a0a      	cmp	r2, #10
 8000ac4:	dd97      	ble.n	80009f6 <__aeabi_fmul+0x5e>
 8000ac6:	e7c5      	b.n	8000a54 <__aeabi_fmul+0xbc>
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d126      	bne.n	8000b1a <__aeabi_fmul+0x182>
 8000acc:	2304      	movs	r3, #4
 8000ace:	4698      	mov	r8, r3
 8000ad0:	3b03      	subs	r3, #3
 8000ad2:	2500      	movs	r5, #0
 8000ad4:	469a      	mov	sl, r3
 8000ad6:	e77a      	b.n	80009ce <__aeabi_fmul+0x36>
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d118      	bne.n	8000b0e <__aeabi_fmul+0x176>
 8000adc:	2308      	movs	r3, #8
 8000ade:	4698      	mov	r8, r3
 8000ae0:	3b06      	subs	r3, #6
 8000ae2:	25ff      	movs	r5, #255	@ 0xff
 8000ae4:	469a      	mov	sl, r3
 8000ae6:	e772      	b.n	80009ce <__aeabi_fmul+0x36>
 8000ae8:	20ff      	movs	r0, #255	@ 0xff
 8000aea:	2200      	movs	r2, #0
 8000aec:	e791      	b.n	8000a12 <__aeabi_fmul+0x7a>
 8000aee:	2280      	movs	r2, #128	@ 0x80
 8000af0:	2600      	movs	r6, #0
 8000af2:	20ff      	movs	r0, #255	@ 0xff
 8000af4:	03d2      	lsls	r2, r2, #15
 8000af6:	e78c      	b.n	8000a12 <__aeabi_fmul+0x7a>
 8000af8:	4641      	mov	r1, r8
 8000afa:	2202      	movs	r2, #2
 8000afc:	3501      	adds	r5, #1
 8000afe:	4311      	orrs	r1, r2
 8000b00:	4688      	mov	r8, r1
 8000b02:	35ff      	adds	r5, #255	@ 0xff
 8000b04:	290a      	cmp	r1, #10
 8000b06:	dca5      	bgt.n	8000a54 <__aeabi_fmul+0xbc>
 8000b08:	2102      	movs	r1, #2
 8000b0a:	407e      	eors	r6, r7
 8000b0c:	e774      	b.n	80009f8 <__aeabi_fmul+0x60>
 8000b0e:	230c      	movs	r3, #12
 8000b10:	4698      	mov	r8, r3
 8000b12:	3b09      	subs	r3, #9
 8000b14:	25ff      	movs	r5, #255	@ 0xff
 8000b16:	469a      	mov	sl, r3
 8000b18:	e759      	b.n	80009ce <__aeabi_fmul+0x36>
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f000 fb06 	bl	800112c <__clzsi2>
 8000b20:	464a      	mov	r2, r9
 8000b22:	1f43      	subs	r3, r0, #5
 8000b24:	2576      	movs	r5, #118	@ 0x76
 8000b26:	409a      	lsls	r2, r3
 8000b28:	2300      	movs	r3, #0
 8000b2a:	426d      	negs	r5, r5
 8000b2c:	4691      	mov	r9, r2
 8000b2e:	4698      	mov	r8, r3
 8000b30:	469a      	mov	sl, r3
 8000b32:	1a2d      	subs	r5, r5, r0
 8000b34:	e74b      	b.n	80009ce <__aeabi_fmul+0x36>
 8000b36:	0020      	movs	r0, r4
 8000b38:	f000 faf8 	bl	800112c <__clzsi2>
 8000b3c:	4642      	mov	r2, r8
 8000b3e:	1f43      	subs	r3, r0, #5
 8000b40:	409c      	lsls	r4, r3
 8000b42:	1a2b      	subs	r3, r5, r0
 8000b44:	3b76      	subs	r3, #118	@ 0x76
 8000b46:	2100      	movs	r1, #0
 8000b48:	1c5d      	adds	r5, r3, #1
 8000b4a:	2a0a      	cmp	r2, #10
 8000b4c:	dc00      	bgt.n	8000b50 <__aeabi_fmul+0x1b8>
 8000b4e:	e752      	b.n	80009f6 <__aeabi_fmul+0x5e>
 8000b50:	e780      	b.n	8000a54 <__aeabi_fmul+0xbc>
 8000b52:	2201      	movs	r2, #1
 8000b54:	1ad3      	subs	r3, r2, r3
 8000b56:	2b1b      	cmp	r3, #27
 8000b58:	dd00      	ble.n	8000b5c <__aeabi_fmul+0x1c4>
 8000b5a:	e758      	b.n	8000a0e <__aeabi_fmul+0x76>
 8000b5c:	359e      	adds	r5, #158	@ 0x9e
 8000b5e:	0022      	movs	r2, r4
 8000b60:	40ac      	lsls	r4, r5
 8000b62:	40da      	lsrs	r2, r3
 8000b64:	1e63      	subs	r3, r4, #1
 8000b66:	419c      	sbcs	r4, r3
 8000b68:	4322      	orrs	r2, r4
 8000b6a:	0753      	lsls	r3, r2, #29
 8000b6c:	d004      	beq.n	8000b78 <__aeabi_fmul+0x1e0>
 8000b6e:	230f      	movs	r3, #15
 8000b70:	4013      	ands	r3, r2
 8000b72:	2b04      	cmp	r3, #4
 8000b74:	d000      	beq.n	8000b78 <__aeabi_fmul+0x1e0>
 8000b76:	3204      	adds	r2, #4
 8000b78:	0153      	lsls	r3, r2, #5
 8000b7a:	d537      	bpl.n	8000bec <__aeabi_fmul+0x254>
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	2200      	movs	r2, #0
 8000b80:	e747      	b.n	8000a12 <__aeabi_fmul+0x7a>
 8000b82:	0c21      	lsrs	r1, r4, #16
 8000b84:	464a      	mov	r2, r9
 8000b86:	0424      	lsls	r4, r4, #16
 8000b88:	0c24      	lsrs	r4, r4, #16
 8000b8a:	0027      	movs	r7, r4
 8000b8c:	0c10      	lsrs	r0, r2, #16
 8000b8e:	0412      	lsls	r2, r2, #16
 8000b90:	0c12      	lsrs	r2, r2, #16
 8000b92:	4344      	muls	r4, r0
 8000b94:	4357      	muls	r7, r2
 8000b96:	4348      	muls	r0, r1
 8000b98:	4351      	muls	r1, r2
 8000b9a:	0c3a      	lsrs	r2, r7, #16
 8000b9c:	1909      	adds	r1, r1, r4
 8000b9e:	1852      	adds	r2, r2, r1
 8000ba0:	4294      	cmp	r4, r2
 8000ba2:	d903      	bls.n	8000bac <__aeabi_fmul+0x214>
 8000ba4:	2180      	movs	r1, #128	@ 0x80
 8000ba6:	0249      	lsls	r1, r1, #9
 8000ba8:	468c      	mov	ip, r1
 8000baa:	4460      	add	r0, ip
 8000bac:	043f      	lsls	r7, r7, #16
 8000bae:	0411      	lsls	r1, r2, #16
 8000bb0:	0c3f      	lsrs	r7, r7, #16
 8000bb2:	19c9      	adds	r1, r1, r7
 8000bb4:	018c      	lsls	r4, r1, #6
 8000bb6:	1e67      	subs	r7, r4, #1
 8000bb8:	41bc      	sbcs	r4, r7
 8000bba:	0c12      	lsrs	r2, r2, #16
 8000bbc:	0e89      	lsrs	r1, r1, #26
 8000bbe:	1812      	adds	r2, r2, r0
 8000bc0:	430c      	orrs	r4, r1
 8000bc2:	0192      	lsls	r2, r2, #6
 8000bc4:	4314      	orrs	r4, r2
 8000bc6:	0112      	lsls	r2, r2, #4
 8000bc8:	d50e      	bpl.n	8000be8 <__aeabi_fmul+0x250>
 8000bca:	2301      	movs	r3, #1
 8000bcc:	0862      	lsrs	r2, r4, #1
 8000bce:	401c      	ands	r4, r3
 8000bd0:	4314      	orrs	r4, r2
 8000bd2:	e749      	b.n	8000a68 <__aeabi_fmul+0xd0>
 8000bd4:	003e      	movs	r6, r7
 8000bd6:	46a1      	mov	r9, r4
 8000bd8:	2280      	movs	r2, #128	@ 0x80
 8000bda:	464b      	mov	r3, r9
 8000bdc:	03d2      	lsls	r2, r2, #15
 8000bde:	431a      	orrs	r2, r3
 8000be0:	0252      	lsls	r2, r2, #9
 8000be2:	20ff      	movs	r0, #255	@ 0xff
 8000be4:	0a52      	lsrs	r2, r2, #9
 8000be6:	e714      	b.n	8000a12 <__aeabi_fmul+0x7a>
 8000be8:	001d      	movs	r5, r3
 8000bea:	e73d      	b.n	8000a68 <__aeabi_fmul+0xd0>
 8000bec:	0192      	lsls	r2, r2, #6
 8000bee:	2000      	movs	r0, #0
 8000bf0:	0a52      	lsrs	r2, r2, #9
 8000bf2:	e70e      	b.n	8000a12 <__aeabi_fmul+0x7a>
 8000bf4:	290f      	cmp	r1, #15
 8000bf6:	d1ed      	bne.n	8000bd4 <__aeabi_fmul+0x23c>
 8000bf8:	2280      	movs	r2, #128	@ 0x80
 8000bfa:	464b      	mov	r3, r9
 8000bfc:	03d2      	lsls	r2, r2, #15
 8000bfe:	4213      	tst	r3, r2
 8000c00:	d0ea      	beq.n	8000bd8 <__aeabi_fmul+0x240>
 8000c02:	4214      	tst	r4, r2
 8000c04:	d1e8      	bne.n	8000bd8 <__aeabi_fmul+0x240>
 8000c06:	003e      	movs	r6, r7
 8000c08:	20ff      	movs	r0, #255	@ 0xff
 8000c0a:	4322      	orrs	r2, r4
 8000c0c:	e701      	b.n	8000a12 <__aeabi_fmul+0x7a>
 8000c0e:	46c0      	nop			@ (mov r8, r8)
 8000c10:	f7ffffff 	.word	0xf7ffffff

08000c14 <__aeabi_fsub>:
 8000c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c16:	4647      	mov	r7, r8
 8000c18:	46ce      	mov	lr, r9
 8000c1a:	024e      	lsls	r6, r1, #9
 8000c1c:	0243      	lsls	r3, r0, #9
 8000c1e:	0045      	lsls	r5, r0, #1
 8000c20:	0a72      	lsrs	r2, r6, #9
 8000c22:	0fc4      	lsrs	r4, r0, #31
 8000c24:	0048      	lsls	r0, r1, #1
 8000c26:	b580      	push	{r7, lr}
 8000c28:	4694      	mov	ip, r2
 8000c2a:	0a5f      	lsrs	r7, r3, #9
 8000c2c:	0e2d      	lsrs	r5, r5, #24
 8000c2e:	099b      	lsrs	r3, r3, #6
 8000c30:	0e00      	lsrs	r0, r0, #24
 8000c32:	0fc9      	lsrs	r1, r1, #31
 8000c34:	09b6      	lsrs	r6, r6, #6
 8000c36:	28ff      	cmp	r0, #255	@ 0xff
 8000c38:	d024      	beq.n	8000c84 <__aeabi_fsub+0x70>
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	4051      	eors	r1, r2
 8000c3e:	1a2a      	subs	r2, r5, r0
 8000c40:	428c      	cmp	r4, r1
 8000c42:	d00f      	beq.n	8000c64 <__aeabi_fsub+0x50>
 8000c44:	2a00      	cmp	r2, #0
 8000c46:	dc00      	bgt.n	8000c4a <__aeabi_fsub+0x36>
 8000c48:	e16a      	b.n	8000f20 <__aeabi_fsub+0x30c>
 8000c4a:	2800      	cmp	r0, #0
 8000c4c:	d135      	bne.n	8000cba <__aeabi_fsub+0xa6>
 8000c4e:	2e00      	cmp	r6, #0
 8000c50:	d100      	bne.n	8000c54 <__aeabi_fsub+0x40>
 8000c52:	e0a2      	b.n	8000d9a <__aeabi_fsub+0x186>
 8000c54:	1e51      	subs	r1, r2, #1
 8000c56:	2a01      	cmp	r2, #1
 8000c58:	d100      	bne.n	8000c5c <__aeabi_fsub+0x48>
 8000c5a:	e124      	b.n	8000ea6 <__aeabi_fsub+0x292>
 8000c5c:	2aff      	cmp	r2, #255	@ 0xff
 8000c5e:	d021      	beq.n	8000ca4 <__aeabi_fsub+0x90>
 8000c60:	000a      	movs	r2, r1
 8000c62:	e02f      	b.n	8000cc4 <__aeabi_fsub+0xb0>
 8000c64:	2a00      	cmp	r2, #0
 8000c66:	dc00      	bgt.n	8000c6a <__aeabi_fsub+0x56>
 8000c68:	e167      	b.n	8000f3a <__aeabi_fsub+0x326>
 8000c6a:	2800      	cmp	r0, #0
 8000c6c:	d05e      	beq.n	8000d2c <__aeabi_fsub+0x118>
 8000c6e:	2dff      	cmp	r5, #255	@ 0xff
 8000c70:	d018      	beq.n	8000ca4 <__aeabi_fsub+0x90>
 8000c72:	2180      	movs	r1, #128	@ 0x80
 8000c74:	04c9      	lsls	r1, r1, #19
 8000c76:	430e      	orrs	r6, r1
 8000c78:	2a1b      	cmp	r2, #27
 8000c7a:	dc00      	bgt.n	8000c7e <__aeabi_fsub+0x6a>
 8000c7c:	e076      	b.n	8000d6c <__aeabi_fsub+0x158>
 8000c7e:	002a      	movs	r2, r5
 8000c80:	3301      	adds	r3, #1
 8000c82:	e032      	b.n	8000cea <__aeabi_fsub+0xd6>
 8000c84:	002a      	movs	r2, r5
 8000c86:	3aff      	subs	r2, #255	@ 0xff
 8000c88:	4691      	mov	r9, r2
 8000c8a:	2e00      	cmp	r6, #0
 8000c8c:	d042      	beq.n	8000d14 <__aeabi_fsub+0x100>
 8000c8e:	428c      	cmp	r4, r1
 8000c90:	d055      	beq.n	8000d3e <__aeabi_fsub+0x12a>
 8000c92:	464a      	mov	r2, r9
 8000c94:	2a00      	cmp	r2, #0
 8000c96:	d100      	bne.n	8000c9a <__aeabi_fsub+0x86>
 8000c98:	e09c      	b.n	8000dd4 <__aeabi_fsub+0x1c0>
 8000c9a:	2d00      	cmp	r5, #0
 8000c9c:	d100      	bne.n	8000ca0 <__aeabi_fsub+0x8c>
 8000c9e:	e077      	b.n	8000d90 <__aeabi_fsub+0x17c>
 8000ca0:	000c      	movs	r4, r1
 8000ca2:	0033      	movs	r3, r6
 8000ca4:	08db      	lsrs	r3, r3, #3
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d100      	bne.n	8000cac <__aeabi_fsub+0x98>
 8000caa:	e06e      	b.n	8000d8a <__aeabi_fsub+0x176>
 8000cac:	2280      	movs	r2, #128	@ 0x80
 8000cae:	03d2      	lsls	r2, r2, #15
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	025b      	lsls	r3, r3, #9
 8000cb4:	20ff      	movs	r0, #255	@ 0xff
 8000cb6:	0a5b      	lsrs	r3, r3, #9
 8000cb8:	e024      	b.n	8000d04 <__aeabi_fsub+0xf0>
 8000cba:	2dff      	cmp	r5, #255	@ 0xff
 8000cbc:	d0f2      	beq.n	8000ca4 <__aeabi_fsub+0x90>
 8000cbe:	2180      	movs	r1, #128	@ 0x80
 8000cc0:	04c9      	lsls	r1, r1, #19
 8000cc2:	430e      	orrs	r6, r1
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	2a1b      	cmp	r2, #27
 8000cc8:	dc08      	bgt.n	8000cdc <__aeabi_fsub+0xc8>
 8000cca:	0031      	movs	r1, r6
 8000ccc:	2020      	movs	r0, #32
 8000cce:	40d1      	lsrs	r1, r2
 8000cd0:	1a82      	subs	r2, r0, r2
 8000cd2:	4096      	lsls	r6, r2
 8000cd4:	0032      	movs	r2, r6
 8000cd6:	1e50      	subs	r0, r2, #1
 8000cd8:	4182      	sbcs	r2, r0
 8000cda:	4311      	orrs	r1, r2
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	015a      	lsls	r2, r3, #5
 8000ce0:	d460      	bmi.n	8000da4 <__aeabi_fsub+0x190>
 8000ce2:	2107      	movs	r1, #7
 8000ce4:	002a      	movs	r2, r5
 8000ce6:	4019      	ands	r1, r3
 8000ce8:	d057      	beq.n	8000d9a <__aeabi_fsub+0x186>
 8000cea:	210f      	movs	r1, #15
 8000cec:	4019      	ands	r1, r3
 8000cee:	2904      	cmp	r1, #4
 8000cf0:	d000      	beq.n	8000cf4 <__aeabi_fsub+0xe0>
 8000cf2:	3304      	adds	r3, #4
 8000cf4:	0159      	lsls	r1, r3, #5
 8000cf6:	d550      	bpl.n	8000d9a <__aeabi_fsub+0x186>
 8000cf8:	1c50      	adds	r0, r2, #1
 8000cfa:	2afe      	cmp	r2, #254	@ 0xfe
 8000cfc:	d045      	beq.n	8000d8a <__aeabi_fsub+0x176>
 8000cfe:	019b      	lsls	r3, r3, #6
 8000d00:	b2c0      	uxtb	r0, r0
 8000d02:	0a5b      	lsrs	r3, r3, #9
 8000d04:	05c0      	lsls	r0, r0, #23
 8000d06:	4318      	orrs	r0, r3
 8000d08:	07e4      	lsls	r4, r4, #31
 8000d0a:	4320      	orrs	r0, r4
 8000d0c:	bcc0      	pop	{r6, r7}
 8000d0e:	46b9      	mov	r9, r7
 8000d10:	46b0      	mov	r8, r6
 8000d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d14:	2201      	movs	r2, #1
 8000d16:	4051      	eors	r1, r2
 8000d18:	428c      	cmp	r4, r1
 8000d1a:	d1ba      	bne.n	8000c92 <__aeabi_fsub+0x7e>
 8000d1c:	464a      	mov	r2, r9
 8000d1e:	2a00      	cmp	r2, #0
 8000d20:	d010      	beq.n	8000d44 <__aeabi_fsub+0x130>
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d100      	bne.n	8000d28 <__aeabi_fsub+0x114>
 8000d26:	e098      	b.n	8000e5a <__aeabi_fsub+0x246>
 8000d28:	2300      	movs	r3, #0
 8000d2a:	e7bb      	b.n	8000ca4 <__aeabi_fsub+0x90>
 8000d2c:	2e00      	cmp	r6, #0
 8000d2e:	d034      	beq.n	8000d9a <__aeabi_fsub+0x186>
 8000d30:	1e51      	subs	r1, r2, #1
 8000d32:	2a01      	cmp	r2, #1
 8000d34:	d06e      	beq.n	8000e14 <__aeabi_fsub+0x200>
 8000d36:	2aff      	cmp	r2, #255	@ 0xff
 8000d38:	d0b4      	beq.n	8000ca4 <__aeabi_fsub+0x90>
 8000d3a:	000a      	movs	r2, r1
 8000d3c:	e79c      	b.n	8000c78 <__aeabi_fsub+0x64>
 8000d3e:	2a00      	cmp	r2, #0
 8000d40:	d000      	beq.n	8000d44 <__aeabi_fsub+0x130>
 8000d42:	e088      	b.n	8000e56 <__aeabi_fsub+0x242>
 8000d44:	20fe      	movs	r0, #254	@ 0xfe
 8000d46:	1c6a      	adds	r2, r5, #1
 8000d48:	4210      	tst	r0, r2
 8000d4a:	d000      	beq.n	8000d4e <__aeabi_fsub+0x13a>
 8000d4c:	e092      	b.n	8000e74 <__aeabi_fsub+0x260>
 8000d4e:	2d00      	cmp	r5, #0
 8000d50:	d000      	beq.n	8000d54 <__aeabi_fsub+0x140>
 8000d52:	e0a4      	b.n	8000e9e <__aeabi_fsub+0x28a>
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d100      	bne.n	8000d5a <__aeabi_fsub+0x146>
 8000d58:	e0cb      	b.n	8000ef2 <__aeabi_fsub+0x2de>
 8000d5a:	2e00      	cmp	r6, #0
 8000d5c:	d000      	beq.n	8000d60 <__aeabi_fsub+0x14c>
 8000d5e:	e0ca      	b.n	8000ef6 <__aeabi_fsub+0x2e2>
 8000d60:	2200      	movs	r2, #0
 8000d62:	08db      	lsrs	r3, r3, #3
 8000d64:	025b      	lsls	r3, r3, #9
 8000d66:	0a5b      	lsrs	r3, r3, #9
 8000d68:	b2d0      	uxtb	r0, r2
 8000d6a:	e7cb      	b.n	8000d04 <__aeabi_fsub+0xf0>
 8000d6c:	0031      	movs	r1, r6
 8000d6e:	2020      	movs	r0, #32
 8000d70:	40d1      	lsrs	r1, r2
 8000d72:	1a82      	subs	r2, r0, r2
 8000d74:	4096      	lsls	r6, r2
 8000d76:	0032      	movs	r2, r6
 8000d78:	1e50      	subs	r0, r2, #1
 8000d7a:	4182      	sbcs	r2, r0
 8000d7c:	430a      	orrs	r2, r1
 8000d7e:	189b      	adds	r3, r3, r2
 8000d80:	015a      	lsls	r2, r3, #5
 8000d82:	d5ae      	bpl.n	8000ce2 <__aeabi_fsub+0xce>
 8000d84:	1c6a      	adds	r2, r5, #1
 8000d86:	2dfe      	cmp	r5, #254	@ 0xfe
 8000d88:	d14a      	bne.n	8000e20 <__aeabi_fsub+0x20c>
 8000d8a:	20ff      	movs	r0, #255	@ 0xff
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	e7b9      	b.n	8000d04 <__aeabi_fsub+0xf0>
 8000d90:	22ff      	movs	r2, #255	@ 0xff
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d14b      	bne.n	8000e2e <__aeabi_fsub+0x21a>
 8000d96:	000c      	movs	r4, r1
 8000d98:	0033      	movs	r3, r6
 8000d9a:	08db      	lsrs	r3, r3, #3
 8000d9c:	2aff      	cmp	r2, #255	@ 0xff
 8000d9e:	d100      	bne.n	8000da2 <__aeabi_fsub+0x18e>
 8000da0:	e781      	b.n	8000ca6 <__aeabi_fsub+0x92>
 8000da2:	e7df      	b.n	8000d64 <__aeabi_fsub+0x150>
 8000da4:	019f      	lsls	r7, r3, #6
 8000da6:	09bf      	lsrs	r7, r7, #6
 8000da8:	0038      	movs	r0, r7
 8000daa:	f000 f9bf 	bl	800112c <__clzsi2>
 8000dae:	3805      	subs	r0, #5
 8000db0:	4087      	lsls	r7, r0
 8000db2:	4285      	cmp	r5, r0
 8000db4:	dc21      	bgt.n	8000dfa <__aeabi_fsub+0x1e6>
 8000db6:	003b      	movs	r3, r7
 8000db8:	2120      	movs	r1, #32
 8000dba:	1b42      	subs	r2, r0, r5
 8000dbc:	3201      	adds	r2, #1
 8000dbe:	40d3      	lsrs	r3, r2
 8000dc0:	1a8a      	subs	r2, r1, r2
 8000dc2:	4097      	lsls	r7, r2
 8000dc4:	1e7a      	subs	r2, r7, #1
 8000dc6:	4197      	sbcs	r7, r2
 8000dc8:	2200      	movs	r2, #0
 8000dca:	433b      	orrs	r3, r7
 8000dcc:	0759      	lsls	r1, r3, #29
 8000dce:	d000      	beq.n	8000dd2 <__aeabi_fsub+0x1be>
 8000dd0:	e78b      	b.n	8000cea <__aeabi_fsub+0xd6>
 8000dd2:	e78f      	b.n	8000cf4 <__aeabi_fsub+0xe0>
 8000dd4:	20fe      	movs	r0, #254	@ 0xfe
 8000dd6:	1c6a      	adds	r2, r5, #1
 8000dd8:	4210      	tst	r0, r2
 8000dda:	d112      	bne.n	8000e02 <__aeabi_fsub+0x1ee>
 8000ddc:	2d00      	cmp	r5, #0
 8000dde:	d152      	bne.n	8000e86 <__aeabi_fsub+0x272>
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d07c      	beq.n	8000ede <__aeabi_fsub+0x2ca>
 8000de4:	2e00      	cmp	r6, #0
 8000de6:	d0bb      	beq.n	8000d60 <__aeabi_fsub+0x14c>
 8000de8:	1b9a      	subs	r2, r3, r6
 8000dea:	0150      	lsls	r0, r2, #5
 8000dec:	d400      	bmi.n	8000df0 <__aeabi_fsub+0x1dc>
 8000dee:	e08b      	b.n	8000f08 <__aeabi_fsub+0x2f4>
 8000df0:	2401      	movs	r4, #1
 8000df2:	2200      	movs	r2, #0
 8000df4:	1af3      	subs	r3, r6, r3
 8000df6:	400c      	ands	r4, r1
 8000df8:	e7e8      	b.n	8000dcc <__aeabi_fsub+0x1b8>
 8000dfa:	4b56      	ldr	r3, [pc, #344]	@ (8000f54 <__aeabi_fsub+0x340>)
 8000dfc:	1a2a      	subs	r2, r5, r0
 8000dfe:	403b      	ands	r3, r7
 8000e00:	e7e4      	b.n	8000dcc <__aeabi_fsub+0x1b8>
 8000e02:	1b9f      	subs	r7, r3, r6
 8000e04:	017a      	lsls	r2, r7, #5
 8000e06:	d446      	bmi.n	8000e96 <__aeabi_fsub+0x282>
 8000e08:	2f00      	cmp	r7, #0
 8000e0a:	d1cd      	bne.n	8000da8 <__aeabi_fsub+0x194>
 8000e0c:	2400      	movs	r4, #0
 8000e0e:	2000      	movs	r0, #0
 8000e10:	2300      	movs	r3, #0
 8000e12:	e777      	b.n	8000d04 <__aeabi_fsub+0xf0>
 8000e14:	199b      	adds	r3, r3, r6
 8000e16:	2501      	movs	r5, #1
 8000e18:	3201      	adds	r2, #1
 8000e1a:	0159      	lsls	r1, r3, #5
 8000e1c:	d400      	bmi.n	8000e20 <__aeabi_fsub+0x20c>
 8000e1e:	e760      	b.n	8000ce2 <__aeabi_fsub+0xce>
 8000e20:	2101      	movs	r1, #1
 8000e22:	484d      	ldr	r0, [pc, #308]	@ (8000f58 <__aeabi_fsub+0x344>)
 8000e24:	4019      	ands	r1, r3
 8000e26:	085b      	lsrs	r3, r3, #1
 8000e28:	4003      	ands	r3, r0
 8000e2a:	430b      	orrs	r3, r1
 8000e2c:	e7ce      	b.n	8000dcc <__aeabi_fsub+0x1b8>
 8000e2e:	1e57      	subs	r7, r2, #1
 8000e30:	2a01      	cmp	r2, #1
 8000e32:	d05a      	beq.n	8000eea <__aeabi_fsub+0x2d6>
 8000e34:	000c      	movs	r4, r1
 8000e36:	2aff      	cmp	r2, #255	@ 0xff
 8000e38:	d033      	beq.n	8000ea2 <__aeabi_fsub+0x28e>
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	2f1b      	cmp	r7, #27
 8000e3e:	dc07      	bgt.n	8000e50 <__aeabi_fsub+0x23c>
 8000e40:	2120      	movs	r1, #32
 8000e42:	1bc9      	subs	r1, r1, r7
 8000e44:	001a      	movs	r2, r3
 8000e46:	408b      	lsls	r3, r1
 8000e48:	40fa      	lsrs	r2, r7
 8000e4a:	1e59      	subs	r1, r3, #1
 8000e4c:	418b      	sbcs	r3, r1
 8000e4e:	431a      	orrs	r2, r3
 8000e50:	0005      	movs	r5, r0
 8000e52:	1ab3      	subs	r3, r6, r2
 8000e54:	e743      	b.n	8000cde <__aeabi_fsub+0xca>
 8000e56:	2d00      	cmp	r5, #0
 8000e58:	d123      	bne.n	8000ea2 <__aeabi_fsub+0x28e>
 8000e5a:	22ff      	movs	r2, #255	@ 0xff
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d09b      	beq.n	8000d98 <__aeabi_fsub+0x184>
 8000e60:	1e51      	subs	r1, r2, #1
 8000e62:	2a01      	cmp	r2, #1
 8000e64:	d0d6      	beq.n	8000e14 <__aeabi_fsub+0x200>
 8000e66:	2aff      	cmp	r2, #255	@ 0xff
 8000e68:	d01b      	beq.n	8000ea2 <__aeabi_fsub+0x28e>
 8000e6a:	291b      	cmp	r1, #27
 8000e6c:	dd2c      	ble.n	8000ec8 <__aeabi_fsub+0x2b4>
 8000e6e:	0002      	movs	r2, r0
 8000e70:	1c73      	adds	r3, r6, #1
 8000e72:	e73a      	b.n	8000cea <__aeabi_fsub+0xd6>
 8000e74:	2aff      	cmp	r2, #255	@ 0xff
 8000e76:	d088      	beq.n	8000d8a <__aeabi_fsub+0x176>
 8000e78:	199b      	adds	r3, r3, r6
 8000e7a:	085b      	lsrs	r3, r3, #1
 8000e7c:	0759      	lsls	r1, r3, #29
 8000e7e:	d000      	beq.n	8000e82 <__aeabi_fsub+0x26e>
 8000e80:	e733      	b.n	8000cea <__aeabi_fsub+0xd6>
 8000e82:	08db      	lsrs	r3, r3, #3
 8000e84:	e76e      	b.n	8000d64 <__aeabi_fsub+0x150>
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d110      	bne.n	8000eac <__aeabi_fsub+0x298>
 8000e8a:	2e00      	cmp	r6, #0
 8000e8c:	d043      	beq.n	8000f16 <__aeabi_fsub+0x302>
 8000e8e:	2401      	movs	r4, #1
 8000e90:	0033      	movs	r3, r6
 8000e92:	400c      	ands	r4, r1
 8000e94:	e706      	b.n	8000ca4 <__aeabi_fsub+0x90>
 8000e96:	2401      	movs	r4, #1
 8000e98:	1af7      	subs	r7, r6, r3
 8000e9a:	400c      	ands	r4, r1
 8000e9c:	e784      	b.n	8000da8 <__aeabi_fsub+0x194>
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d104      	bne.n	8000eac <__aeabi_fsub+0x298>
 8000ea2:	0033      	movs	r3, r6
 8000ea4:	e6fe      	b.n	8000ca4 <__aeabi_fsub+0x90>
 8000ea6:	2501      	movs	r5, #1
 8000ea8:	1b9b      	subs	r3, r3, r6
 8000eaa:	e718      	b.n	8000cde <__aeabi_fsub+0xca>
 8000eac:	2e00      	cmp	r6, #0
 8000eae:	d100      	bne.n	8000eb2 <__aeabi_fsub+0x29e>
 8000eb0:	e6f8      	b.n	8000ca4 <__aeabi_fsub+0x90>
 8000eb2:	2280      	movs	r2, #128	@ 0x80
 8000eb4:	03d2      	lsls	r2, r2, #15
 8000eb6:	4297      	cmp	r7, r2
 8000eb8:	d304      	bcc.n	8000ec4 <__aeabi_fsub+0x2b0>
 8000eba:	4594      	cmp	ip, r2
 8000ebc:	d202      	bcs.n	8000ec4 <__aeabi_fsub+0x2b0>
 8000ebe:	2401      	movs	r4, #1
 8000ec0:	0033      	movs	r3, r6
 8000ec2:	400c      	ands	r4, r1
 8000ec4:	08db      	lsrs	r3, r3, #3
 8000ec6:	e6f1      	b.n	8000cac <__aeabi_fsub+0x98>
 8000ec8:	001a      	movs	r2, r3
 8000eca:	2520      	movs	r5, #32
 8000ecc:	40ca      	lsrs	r2, r1
 8000ece:	1a69      	subs	r1, r5, r1
 8000ed0:	408b      	lsls	r3, r1
 8000ed2:	1e59      	subs	r1, r3, #1
 8000ed4:	418b      	sbcs	r3, r1
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	0005      	movs	r5, r0
 8000eda:	199b      	adds	r3, r3, r6
 8000edc:	e750      	b.n	8000d80 <__aeabi_fsub+0x16c>
 8000ede:	2e00      	cmp	r6, #0
 8000ee0:	d094      	beq.n	8000e0c <__aeabi_fsub+0x1f8>
 8000ee2:	2401      	movs	r4, #1
 8000ee4:	0033      	movs	r3, r6
 8000ee6:	400c      	ands	r4, r1
 8000ee8:	e73a      	b.n	8000d60 <__aeabi_fsub+0x14c>
 8000eea:	000c      	movs	r4, r1
 8000eec:	2501      	movs	r5, #1
 8000eee:	1af3      	subs	r3, r6, r3
 8000ef0:	e6f5      	b.n	8000cde <__aeabi_fsub+0xca>
 8000ef2:	0033      	movs	r3, r6
 8000ef4:	e734      	b.n	8000d60 <__aeabi_fsub+0x14c>
 8000ef6:	199b      	adds	r3, r3, r6
 8000ef8:	2200      	movs	r2, #0
 8000efa:	0159      	lsls	r1, r3, #5
 8000efc:	d5c1      	bpl.n	8000e82 <__aeabi_fsub+0x26e>
 8000efe:	4a15      	ldr	r2, [pc, #84]	@ (8000f54 <__aeabi_fsub+0x340>)
 8000f00:	4013      	ands	r3, r2
 8000f02:	08db      	lsrs	r3, r3, #3
 8000f04:	2201      	movs	r2, #1
 8000f06:	e72d      	b.n	8000d64 <__aeabi_fsub+0x150>
 8000f08:	2a00      	cmp	r2, #0
 8000f0a:	d100      	bne.n	8000f0e <__aeabi_fsub+0x2fa>
 8000f0c:	e77e      	b.n	8000e0c <__aeabi_fsub+0x1f8>
 8000f0e:	0013      	movs	r3, r2
 8000f10:	2200      	movs	r2, #0
 8000f12:	08db      	lsrs	r3, r3, #3
 8000f14:	e726      	b.n	8000d64 <__aeabi_fsub+0x150>
 8000f16:	2380      	movs	r3, #128	@ 0x80
 8000f18:	2400      	movs	r4, #0
 8000f1a:	20ff      	movs	r0, #255	@ 0xff
 8000f1c:	03db      	lsls	r3, r3, #15
 8000f1e:	e6f1      	b.n	8000d04 <__aeabi_fsub+0xf0>
 8000f20:	2a00      	cmp	r2, #0
 8000f22:	d100      	bne.n	8000f26 <__aeabi_fsub+0x312>
 8000f24:	e756      	b.n	8000dd4 <__aeabi_fsub+0x1c0>
 8000f26:	1b47      	subs	r7, r0, r5
 8000f28:	003a      	movs	r2, r7
 8000f2a:	2d00      	cmp	r5, #0
 8000f2c:	d100      	bne.n	8000f30 <__aeabi_fsub+0x31c>
 8000f2e:	e730      	b.n	8000d92 <__aeabi_fsub+0x17e>
 8000f30:	2280      	movs	r2, #128	@ 0x80
 8000f32:	04d2      	lsls	r2, r2, #19
 8000f34:	000c      	movs	r4, r1
 8000f36:	4313      	orrs	r3, r2
 8000f38:	e77f      	b.n	8000e3a <__aeabi_fsub+0x226>
 8000f3a:	2a00      	cmp	r2, #0
 8000f3c:	d100      	bne.n	8000f40 <__aeabi_fsub+0x32c>
 8000f3e:	e701      	b.n	8000d44 <__aeabi_fsub+0x130>
 8000f40:	1b41      	subs	r1, r0, r5
 8000f42:	2d00      	cmp	r5, #0
 8000f44:	d101      	bne.n	8000f4a <__aeabi_fsub+0x336>
 8000f46:	000a      	movs	r2, r1
 8000f48:	e788      	b.n	8000e5c <__aeabi_fsub+0x248>
 8000f4a:	2280      	movs	r2, #128	@ 0x80
 8000f4c:	04d2      	lsls	r2, r2, #19
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	e78b      	b.n	8000e6a <__aeabi_fsub+0x256>
 8000f52:	46c0      	nop			@ (mov r8, r8)
 8000f54:	fbffffff 	.word	0xfbffffff
 8000f58:	7dffffff 	.word	0x7dffffff

08000f5c <__aeabi_f2iz>:
 8000f5c:	0241      	lsls	r1, r0, #9
 8000f5e:	0042      	lsls	r2, r0, #1
 8000f60:	0fc3      	lsrs	r3, r0, #31
 8000f62:	0a49      	lsrs	r1, r1, #9
 8000f64:	2000      	movs	r0, #0
 8000f66:	0e12      	lsrs	r2, r2, #24
 8000f68:	2a7e      	cmp	r2, #126	@ 0x7e
 8000f6a:	dd03      	ble.n	8000f74 <__aeabi_f2iz+0x18>
 8000f6c:	2a9d      	cmp	r2, #157	@ 0x9d
 8000f6e:	dd02      	ble.n	8000f76 <__aeabi_f2iz+0x1a>
 8000f70:	4a09      	ldr	r2, [pc, #36]	@ (8000f98 <__aeabi_f2iz+0x3c>)
 8000f72:	1898      	adds	r0, r3, r2
 8000f74:	4770      	bx	lr
 8000f76:	2080      	movs	r0, #128	@ 0x80
 8000f78:	0400      	lsls	r0, r0, #16
 8000f7a:	4301      	orrs	r1, r0
 8000f7c:	2a95      	cmp	r2, #149	@ 0x95
 8000f7e:	dc07      	bgt.n	8000f90 <__aeabi_f2iz+0x34>
 8000f80:	2096      	movs	r0, #150	@ 0x96
 8000f82:	1a82      	subs	r2, r0, r2
 8000f84:	40d1      	lsrs	r1, r2
 8000f86:	4248      	negs	r0, r1
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d1f3      	bne.n	8000f74 <__aeabi_f2iz+0x18>
 8000f8c:	0008      	movs	r0, r1
 8000f8e:	e7f1      	b.n	8000f74 <__aeabi_f2iz+0x18>
 8000f90:	3a96      	subs	r2, #150	@ 0x96
 8000f92:	4091      	lsls	r1, r2
 8000f94:	e7f7      	b.n	8000f86 <__aeabi_f2iz+0x2a>
 8000f96:	46c0      	nop			@ (mov r8, r8)
 8000f98:	7fffffff 	.word	0x7fffffff

08000f9c <__aeabi_i2f>:
 8000f9c:	b570      	push	{r4, r5, r6, lr}
 8000f9e:	2800      	cmp	r0, #0
 8000fa0:	d013      	beq.n	8000fca <__aeabi_i2f+0x2e>
 8000fa2:	17c3      	asrs	r3, r0, #31
 8000fa4:	18c5      	adds	r5, r0, r3
 8000fa6:	405d      	eors	r5, r3
 8000fa8:	0fc4      	lsrs	r4, r0, #31
 8000faa:	0028      	movs	r0, r5
 8000fac:	f000 f8be 	bl	800112c <__clzsi2>
 8000fb0:	239e      	movs	r3, #158	@ 0x9e
 8000fb2:	0001      	movs	r1, r0
 8000fb4:	1a1b      	subs	r3, r3, r0
 8000fb6:	2b96      	cmp	r3, #150	@ 0x96
 8000fb8:	dc0f      	bgt.n	8000fda <__aeabi_i2f+0x3e>
 8000fba:	2808      	cmp	r0, #8
 8000fbc:	d034      	beq.n	8001028 <__aeabi_i2f+0x8c>
 8000fbe:	3908      	subs	r1, #8
 8000fc0:	408d      	lsls	r5, r1
 8000fc2:	026d      	lsls	r5, r5, #9
 8000fc4:	0a6d      	lsrs	r5, r5, #9
 8000fc6:	b2d8      	uxtb	r0, r3
 8000fc8:	e002      	b.n	8000fd0 <__aeabi_i2f+0x34>
 8000fca:	2400      	movs	r4, #0
 8000fcc:	2000      	movs	r0, #0
 8000fce:	2500      	movs	r5, #0
 8000fd0:	05c0      	lsls	r0, r0, #23
 8000fd2:	4328      	orrs	r0, r5
 8000fd4:	07e4      	lsls	r4, r4, #31
 8000fd6:	4320      	orrs	r0, r4
 8000fd8:	bd70      	pop	{r4, r5, r6, pc}
 8000fda:	2b99      	cmp	r3, #153	@ 0x99
 8000fdc:	dc16      	bgt.n	800100c <__aeabi_i2f+0x70>
 8000fde:	1f42      	subs	r2, r0, #5
 8000fe0:	2805      	cmp	r0, #5
 8000fe2:	d000      	beq.n	8000fe6 <__aeabi_i2f+0x4a>
 8000fe4:	4095      	lsls	r5, r2
 8000fe6:	002a      	movs	r2, r5
 8000fe8:	4811      	ldr	r0, [pc, #68]	@ (8001030 <__aeabi_i2f+0x94>)
 8000fea:	4002      	ands	r2, r0
 8000fec:	076e      	lsls	r6, r5, #29
 8000fee:	d009      	beq.n	8001004 <__aeabi_i2f+0x68>
 8000ff0:	260f      	movs	r6, #15
 8000ff2:	4035      	ands	r5, r6
 8000ff4:	2d04      	cmp	r5, #4
 8000ff6:	d005      	beq.n	8001004 <__aeabi_i2f+0x68>
 8000ff8:	3204      	adds	r2, #4
 8000ffa:	0155      	lsls	r5, r2, #5
 8000ffc:	d502      	bpl.n	8001004 <__aeabi_i2f+0x68>
 8000ffe:	239f      	movs	r3, #159	@ 0x9f
 8001000:	4002      	ands	r2, r0
 8001002:	1a5b      	subs	r3, r3, r1
 8001004:	0192      	lsls	r2, r2, #6
 8001006:	0a55      	lsrs	r5, r2, #9
 8001008:	b2d8      	uxtb	r0, r3
 800100a:	e7e1      	b.n	8000fd0 <__aeabi_i2f+0x34>
 800100c:	2205      	movs	r2, #5
 800100e:	1a12      	subs	r2, r2, r0
 8001010:	0028      	movs	r0, r5
 8001012:	40d0      	lsrs	r0, r2
 8001014:	0002      	movs	r2, r0
 8001016:	0008      	movs	r0, r1
 8001018:	301b      	adds	r0, #27
 800101a:	4085      	lsls	r5, r0
 800101c:	0028      	movs	r0, r5
 800101e:	1e45      	subs	r5, r0, #1
 8001020:	41a8      	sbcs	r0, r5
 8001022:	4302      	orrs	r2, r0
 8001024:	0015      	movs	r5, r2
 8001026:	e7de      	b.n	8000fe6 <__aeabi_i2f+0x4a>
 8001028:	026d      	lsls	r5, r5, #9
 800102a:	2096      	movs	r0, #150	@ 0x96
 800102c:	0a6d      	lsrs	r5, r5, #9
 800102e:	e7cf      	b.n	8000fd0 <__aeabi_i2f+0x34>
 8001030:	fbffffff 	.word	0xfbffffff

08001034 <__aeabi_ui2f>:
 8001034:	b570      	push	{r4, r5, r6, lr}
 8001036:	1e04      	subs	r4, r0, #0
 8001038:	d00e      	beq.n	8001058 <__aeabi_ui2f+0x24>
 800103a:	f000 f877 	bl	800112c <__clzsi2>
 800103e:	239e      	movs	r3, #158	@ 0x9e
 8001040:	0001      	movs	r1, r0
 8001042:	1a1b      	subs	r3, r3, r0
 8001044:	2b96      	cmp	r3, #150	@ 0x96
 8001046:	dc0c      	bgt.n	8001062 <__aeabi_ui2f+0x2e>
 8001048:	2808      	cmp	r0, #8
 800104a:	d02f      	beq.n	80010ac <__aeabi_ui2f+0x78>
 800104c:	3908      	subs	r1, #8
 800104e:	408c      	lsls	r4, r1
 8001050:	0264      	lsls	r4, r4, #9
 8001052:	0a64      	lsrs	r4, r4, #9
 8001054:	b2d8      	uxtb	r0, r3
 8001056:	e001      	b.n	800105c <__aeabi_ui2f+0x28>
 8001058:	2000      	movs	r0, #0
 800105a:	2400      	movs	r4, #0
 800105c:	05c0      	lsls	r0, r0, #23
 800105e:	4320      	orrs	r0, r4
 8001060:	bd70      	pop	{r4, r5, r6, pc}
 8001062:	2b99      	cmp	r3, #153	@ 0x99
 8001064:	dc16      	bgt.n	8001094 <__aeabi_ui2f+0x60>
 8001066:	1f42      	subs	r2, r0, #5
 8001068:	2805      	cmp	r0, #5
 800106a:	d000      	beq.n	800106e <__aeabi_ui2f+0x3a>
 800106c:	4094      	lsls	r4, r2
 800106e:	0022      	movs	r2, r4
 8001070:	4810      	ldr	r0, [pc, #64]	@ (80010b4 <__aeabi_ui2f+0x80>)
 8001072:	4002      	ands	r2, r0
 8001074:	0765      	lsls	r5, r4, #29
 8001076:	d009      	beq.n	800108c <__aeabi_ui2f+0x58>
 8001078:	250f      	movs	r5, #15
 800107a:	402c      	ands	r4, r5
 800107c:	2c04      	cmp	r4, #4
 800107e:	d005      	beq.n	800108c <__aeabi_ui2f+0x58>
 8001080:	3204      	adds	r2, #4
 8001082:	0154      	lsls	r4, r2, #5
 8001084:	d502      	bpl.n	800108c <__aeabi_ui2f+0x58>
 8001086:	239f      	movs	r3, #159	@ 0x9f
 8001088:	4002      	ands	r2, r0
 800108a:	1a5b      	subs	r3, r3, r1
 800108c:	0192      	lsls	r2, r2, #6
 800108e:	0a54      	lsrs	r4, r2, #9
 8001090:	b2d8      	uxtb	r0, r3
 8001092:	e7e3      	b.n	800105c <__aeabi_ui2f+0x28>
 8001094:	0002      	movs	r2, r0
 8001096:	0020      	movs	r0, r4
 8001098:	321b      	adds	r2, #27
 800109a:	4090      	lsls	r0, r2
 800109c:	0002      	movs	r2, r0
 800109e:	1e50      	subs	r0, r2, #1
 80010a0:	4182      	sbcs	r2, r0
 80010a2:	2005      	movs	r0, #5
 80010a4:	1a40      	subs	r0, r0, r1
 80010a6:	40c4      	lsrs	r4, r0
 80010a8:	4314      	orrs	r4, r2
 80010aa:	e7e0      	b.n	800106e <__aeabi_ui2f+0x3a>
 80010ac:	0264      	lsls	r4, r4, #9
 80010ae:	2096      	movs	r0, #150	@ 0x96
 80010b0:	0a64      	lsrs	r4, r4, #9
 80010b2:	e7d3      	b.n	800105c <__aeabi_ui2f+0x28>
 80010b4:	fbffffff 	.word	0xfbffffff

080010b8 <__aeabi_cfrcmple>:
 80010b8:	4684      	mov	ip, r0
 80010ba:	0008      	movs	r0, r1
 80010bc:	4661      	mov	r1, ip
 80010be:	e7ff      	b.n	80010c0 <__aeabi_cfcmpeq>

080010c0 <__aeabi_cfcmpeq>:
 80010c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80010c2:	f000 f8c9 	bl	8001258 <__lesf2>
 80010c6:	2800      	cmp	r0, #0
 80010c8:	d401      	bmi.n	80010ce <__aeabi_cfcmpeq+0xe>
 80010ca:	2100      	movs	r1, #0
 80010cc:	42c8      	cmn	r0, r1
 80010ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080010d0 <__aeabi_fcmpeq>:
 80010d0:	b510      	push	{r4, lr}
 80010d2:	f000 f849 	bl	8001168 <__eqsf2>
 80010d6:	4240      	negs	r0, r0
 80010d8:	3001      	adds	r0, #1
 80010da:	bd10      	pop	{r4, pc}

080010dc <__aeabi_fcmplt>:
 80010dc:	b510      	push	{r4, lr}
 80010de:	f000 f8bb 	bl	8001258 <__lesf2>
 80010e2:	2800      	cmp	r0, #0
 80010e4:	db01      	blt.n	80010ea <__aeabi_fcmplt+0xe>
 80010e6:	2000      	movs	r0, #0
 80010e8:	bd10      	pop	{r4, pc}
 80010ea:	2001      	movs	r0, #1
 80010ec:	bd10      	pop	{r4, pc}
 80010ee:	46c0      	nop			@ (mov r8, r8)

080010f0 <__aeabi_fcmple>:
 80010f0:	b510      	push	{r4, lr}
 80010f2:	f000 f8b1 	bl	8001258 <__lesf2>
 80010f6:	2800      	cmp	r0, #0
 80010f8:	dd01      	ble.n	80010fe <__aeabi_fcmple+0xe>
 80010fa:	2000      	movs	r0, #0
 80010fc:	bd10      	pop	{r4, pc}
 80010fe:	2001      	movs	r0, #1
 8001100:	bd10      	pop	{r4, pc}
 8001102:	46c0      	nop			@ (mov r8, r8)

08001104 <__aeabi_fcmpgt>:
 8001104:	b510      	push	{r4, lr}
 8001106:	f000 f857 	bl	80011b8 <__gesf2>
 800110a:	2800      	cmp	r0, #0
 800110c:	dc01      	bgt.n	8001112 <__aeabi_fcmpgt+0xe>
 800110e:	2000      	movs	r0, #0
 8001110:	bd10      	pop	{r4, pc}
 8001112:	2001      	movs	r0, #1
 8001114:	bd10      	pop	{r4, pc}
 8001116:	46c0      	nop			@ (mov r8, r8)

08001118 <__aeabi_fcmpge>:
 8001118:	b510      	push	{r4, lr}
 800111a:	f000 f84d 	bl	80011b8 <__gesf2>
 800111e:	2800      	cmp	r0, #0
 8001120:	da01      	bge.n	8001126 <__aeabi_fcmpge+0xe>
 8001122:	2000      	movs	r0, #0
 8001124:	bd10      	pop	{r4, pc}
 8001126:	2001      	movs	r0, #1
 8001128:	bd10      	pop	{r4, pc}
 800112a:	46c0      	nop			@ (mov r8, r8)

0800112c <__clzsi2>:
 800112c:	211c      	movs	r1, #28
 800112e:	2301      	movs	r3, #1
 8001130:	041b      	lsls	r3, r3, #16
 8001132:	4298      	cmp	r0, r3
 8001134:	d301      	bcc.n	800113a <__clzsi2+0xe>
 8001136:	0c00      	lsrs	r0, r0, #16
 8001138:	3910      	subs	r1, #16
 800113a:	0a1b      	lsrs	r3, r3, #8
 800113c:	4298      	cmp	r0, r3
 800113e:	d301      	bcc.n	8001144 <__clzsi2+0x18>
 8001140:	0a00      	lsrs	r0, r0, #8
 8001142:	3908      	subs	r1, #8
 8001144:	091b      	lsrs	r3, r3, #4
 8001146:	4298      	cmp	r0, r3
 8001148:	d301      	bcc.n	800114e <__clzsi2+0x22>
 800114a:	0900      	lsrs	r0, r0, #4
 800114c:	3904      	subs	r1, #4
 800114e:	a202      	add	r2, pc, #8	@ (adr r2, 8001158 <__clzsi2+0x2c>)
 8001150:	5c10      	ldrb	r0, [r2, r0]
 8001152:	1840      	adds	r0, r0, r1
 8001154:	4770      	bx	lr
 8001156:	46c0      	nop			@ (mov r8, r8)
 8001158:	02020304 	.word	0x02020304
 800115c:	01010101 	.word	0x01010101
	...

08001168 <__eqsf2>:
 8001168:	b570      	push	{r4, r5, r6, lr}
 800116a:	0042      	lsls	r2, r0, #1
 800116c:	024e      	lsls	r6, r1, #9
 800116e:	004c      	lsls	r4, r1, #1
 8001170:	0245      	lsls	r5, r0, #9
 8001172:	0a6d      	lsrs	r5, r5, #9
 8001174:	0e12      	lsrs	r2, r2, #24
 8001176:	0fc3      	lsrs	r3, r0, #31
 8001178:	0a76      	lsrs	r6, r6, #9
 800117a:	0e24      	lsrs	r4, r4, #24
 800117c:	0fc9      	lsrs	r1, r1, #31
 800117e:	2aff      	cmp	r2, #255	@ 0xff
 8001180:	d010      	beq.n	80011a4 <__eqsf2+0x3c>
 8001182:	2cff      	cmp	r4, #255	@ 0xff
 8001184:	d00c      	beq.n	80011a0 <__eqsf2+0x38>
 8001186:	2001      	movs	r0, #1
 8001188:	42a2      	cmp	r2, r4
 800118a:	d10a      	bne.n	80011a2 <__eqsf2+0x3a>
 800118c:	42b5      	cmp	r5, r6
 800118e:	d108      	bne.n	80011a2 <__eqsf2+0x3a>
 8001190:	428b      	cmp	r3, r1
 8001192:	d00f      	beq.n	80011b4 <__eqsf2+0x4c>
 8001194:	2a00      	cmp	r2, #0
 8001196:	d104      	bne.n	80011a2 <__eqsf2+0x3a>
 8001198:	0028      	movs	r0, r5
 800119a:	1e43      	subs	r3, r0, #1
 800119c:	4198      	sbcs	r0, r3
 800119e:	e000      	b.n	80011a2 <__eqsf2+0x3a>
 80011a0:	2001      	movs	r0, #1
 80011a2:	bd70      	pop	{r4, r5, r6, pc}
 80011a4:	2001      	movs	r0, #1
 80011a6:	2cff      	cmp	r4, #255	@ 0xff
 80011a8:	d1fb      	bne.n	80011a2 <__eqsf2+0x3a>
 80011aa:	4335      	orrs	r5, r6
 80011ac:	d1f9      	bne.n	80011a2 <__eqsf2+0x3a>
 80011ae:	404b      	eors	r3, r1
 80011b0:	0018      	movs	r0, r3
 80011b2:	e7f6      	b.n	80011a2 <__eqsf2+0x3a>
 80011b4:	2000      	movs	r0, #0
 80011b6:	e7f4      	b.n	80011a2 <__eqsf2+0x3a>

080011b8 <__gesf2>:
 80011b8:	b530      	push	{r4, r5, lr}
 80011ba:	0042      	lsls	r2, r0, #1
 80011bc:	0244      	lsls	r4, r0, #9
 80011be:	024d      	lsls	r5, r1, #9
 80011c0:	0fc3      	lsrs	r3, r0, #31
 80011c2:	0048      	lsls	r0, r1, #1
 80011c4:	0a64      	lsrs	r4, r4, #9
 80011c6:	0e12      	lsrs	r2, r2, #24
 80011c8:	0a6d      	lsrs	r5, r5, #9
 80011ca:	0e00      	lsrs	r0, r0, #24
 80011cc:	0fc9      	lsrs	r1, r1, #31
 80011ce:	2aff      	cmp	r2, #255	@ 0xff
 80011d0:	d019      	beq.n	8001206 <__gesf2+0x4e>
 80011d2:	28ff      	cmp	r0, #255	@ 0xff
 80011d4:	d00b      	beq.n	80011ee <__gesf2+0x36>
 80011d6:	2a00      	cmp	r2, #0
 80011d8:	d11e      	bne.n	8001218 <__gesf2+0x60>
 80011da:	2800      	cmp	r0, #0
 80011dc:	d10b      	bne.n	80011f6 <__gesf2+0x3e>
 80011de:	2d00      	cmp	r5, #0
 80011e0:	d027      	beq.n	8001232 <__gesf2+0x7a>
 80011e2:	2c00      	cmp	r4, #0
 80011e4:	d134      	bne.n	8001250 <__gesf2+0x98>
 80011e6:	2900      	cmp	r1, #0
 80011e8:	d02f      	beq.n	800124a <__gesf2+0x92>
 80011ea:	0008      	movs	r0, r1
 80011ec:	bd30      	pop	{r4, r5, pc}
 80011ee:	2d00      	cmp	r5, #0
 80011f0:	d128      	bne.n	8001244 <__gesf2+0x8c>
 80011f2:	2a00      	cmp	r2, #0
 80011f4:	d101      	bne.n	80011fa <__gesf2+0x42>
 80011f6:	2c00      	cmp	r4, #0
 80011f8:	d0f5      	beq.n	80011e6 <__gesf2+0x2e>
 80011fa:	428b      	cmp	r3, r1
 80011fc:	d107      	bne.n	800120e <__gesf2+0x56>
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d023      	beq.n	800124a <__gesf2+0x92>
 8001202:	0018      	movs	r0, r3
 8001204:	e7f2      	b.n	80011ec <__gesf2+0x34>
 8001206:	2c00      	cmp	r4, #0
 8001208:	d11c      	bne.n	8001244 <__gesf2+0x8c>
 800120a:	28ff      	cmp	r0, #255	@ 0xff
 800120c:	d014      	beq.n	8001238 <__gesf2+0x80>
 800120e:	1e58      	subs	r0, r3, #1
 8001210:	2302      	movs	r3, #2
 8001212:	4018      	ands	r0, r3
 8001214:	3801      	subs	r0, #1
 8001216:	e7e9      	b.n	80011ec <__gesf2+0x34>
 8001218:	2800      	cmp	r0, #0
 800121a:	d0f8      	beq.n	800120e <__gesf2+0x56>
 800121c:	428b      	cmp	r3, r1
 800121e:	d1f6      	bne.n	800120e <__gesf2+0x56>
 8001220:	4282      	cmp	r2, r0
 8001222:	dcf4      	bgt.n	800120e <__gesf2+0x56>
 8001224:	dbeb      	blt.n	80011fe <__gesf2+0x46>
 8001226:	42ac      	cmp	r4, r5
 8001228:	d8f1      	bhi.n	800120e <__gesf2+0x56>
 800122a:	2000      	movs	r0, #0
 800122c:	42ac      	cmp	r4, r5
 800122e:	d2dd      	bcs.n	80011ec <__gesf2+0x34>
 8001230:	e7e5      	b.n	80011fe <__gesf2+0x46>
 8001232:	2c00      	cmp	r4, #0
 8001234:	d0da      	beq.n	80011ec <__gesf2+0x34>
 8001236:	e7ea      	b.n	800120e <__gesf2+0x56>
 8001238:	2d00      	cmp	r5, #0
 800123a:	d103      	bne.n	8001244 <__gesf2+0x8c>
 800123c:	428b      	cmp	r3, r1
 800123e:	d1e6      	bne.n	800120e <__gesf2+0x56>
 8001240:	2000      	movs	r0, #0
 8001242:	e7d3      	b.n	80011ec <__gesf2+0x34>
 8001244:	2002      	movs	r0, #2
 8001246:	4240      	negs	r0, r0
 8001248:	e7d0      	b.n	80011ec <__gesf2+0x34>
 800124a:	2001      	movs	r0, #1
 800124c:	4240      	negs	r0, r0
 800124e:	e7cd      	b.n	80011ec <__gesf2+0x34>
 8001250:	428b      	cmp	r3, r1
 8001252:	d0e8      	beq.n	8001226 <__gesf2+0x6e>
 8001254:	e7db      	b.n	800120e <__gesf2+0x56>
 8001256:	46c0      	nop			@ (mov r8, r8)

08001258 <__lesf2>:
 8001258:	b530      	push	{r4, r5, lr}
 800125a:	0042      	lsls	r2, r0, #1
 800125c:	0244      	lsls	r4, r0, #9
 800125e:	024d      	lsls	r5, r1, #9
 8001260:	0fc3      	lsrs	r3, r0, #31
 8001262:	0048      	lsls	r0, r1, #1
 8001264:	0a64      	lsrs	r4, r4, #9
 8001266:	0e12      	lsrs	r2, r2, #24
 8001268:	0a6d      	lsrs	r5, r5, #9
 800126a:	0e00      	lsrs	r0, r0, #24
 800126c:	0fc9      	lsrs	r1, r1, #31
 800126e:	2aff      	cmp	r2, #255	@ 0xff
 8001270:	d01a      	beq.n	80012a8 <__lesf2+0x50>
 8001272:	28ff      	cmp	r0, #255	@ 0xff
 8001274:	d00e      	beq.n	8001294 <__lesf2+0x3c>
 8001276:	2a00      	cmp	r2, #0
 8001278:	d11e      	bne.n	80012b8 <__lesf2+0x60>
 800127a:	2800      	cmp	r0, #0
 800127c:	d10e      	bne.n	800129c <__lesf2+0x44>
 800127e:	2d00      	cmp	r5, #0
 8001280:	d02a      	beq.n	80012d8 <__lesf2+0x80>
 8001282:	2c00      	cmp	r4, #0
 8001284:	d00c      	beq.n	80012a0 <__lesf2+0x48>
 8001286:	428b      	cmp	r3, r1
 8001288:	d01d      	beq.n	80012c6 <__lesf2+0x6e>
 800128a:	1e58      	subs	r0, r3, #1
 800128c:	2302      	movs	r3, #2
 800128e:	4018      	ands	r0, r3
 8001290:	3801      	subs	r0, #1
 8001292:	e010      	b.n	80012b6 <__lesf2+0x5e>
 8001294:	2d00      	cmp	r5, #0
 8001296:	d10d      	bne.n	80012b4 <__lesf2+0x5c>
 8001298:	2a00      	cmp	r2, #0
 800129a:	d120      	bne.n	80012de <__lesf2+0x86>
 800129c:	2c00      	cmp	r4, #0
 800129e:	d11e      	bne.n	80012de <__lesf2+0x86>
 80012a0:	2900      	cmp	r1, #0
 80012a2:	d023      	beq.n	80012ec <__lesf2+0x94>
 80012a4:	0008      	movs	r0, r1
 80012a6:	e006      	b.n	80012b6 <__lesf2+0x5e>
 80012a8:	2c00      	cmp	r4, #0
 80012aa:	d103      	bne.n	80012b4 <__lesf2+0x5c>
 80012ac:	28ff      	cmp	r0, #255	@ 0xff
 80012ae:	d1ec      	bne.n	800128a <__lesf2+0x32>
 80012b0:	2d00      	cmp	r5, #0
 80012b2:	d017      	beq.n	80012e4 <__lesf2+0x8c>
 80012b4:	2002      	movs	r0, #2
 80012b6:	bd30      	pop	{r4, r5, pc}
 80012b8:	2800      	cmp	r0, #0
 80012ba:	d0e6      	beq.n	800128a <__lesf2+0x32>
 80012bc:	428b      	cmp	r3, r1
 80012be:	d1e4      	bne.n	800128a <__lesf2+0x32>
 80012c0:	4282      	cmp	r2, r0
 80012c2:	dce2      	bgt.n	800128a <__lesf2+0x32>
 80012c4:	db04      	blt.n	80012d0 <__lesf2+0x78>
 80012c6:	42ac      	cmp	r4, r5
 80012c8:	d8df      	bhi.n	800128a <__lesf2+0x32>
 80012ca:	2000      	movs	r0, #0
 80012cc:	42ac      	cmp	r4, r5
 80012ce:	d2f2      	bcs.n	80012b6 <__lesf2+0x5e>
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d00b      	beq.n	80012ec <__lesf2+0x94>
 80012d4:	0018      	movs	r0, r3
 80012d6:	e7ee      	b.n	80012b6 <__lesf2+0x5e>
 80012d8:	2c00      	cmp	r4, #0
 80012da:	d0ec      	beq.n	80012b6 <__lesf2+0x5e>
 80012dc:	e7d5      	b.n	800128a <__lesf2+0x32>
 80012de:	428b      	cmp	r3, r1
 80012e0:	d1d3      	bne.n	800128a <__lesf2+0x32>
 80012e2:	e7f5      	b.n	80012d0 <__lesf2+0x78>
 80012e4:	2000      	movs	r0, #0
 80012e6:	428b      	cmp	r3, r1
 80012e8:	d0e5      	beq.n	80012b6 <__lesf2+0x5e>
 80012ea:	e7ce      	b.n	800128a <__lesf2+0x32>
 80012ec:	2001      	movs	r0, #1
 80012ee:	4240      	negs	r0, r0
 80012f0:	e7e1      	b.n	80012b6 <__lesf2+0x5e>
 80012f2:	46c0      	nop			@ (mov r8, r8)

080012f4 <Read16>:
int16_t ina219_currentDivider_mA;
int16_t ina219_powerMultiplier_mW;


uint16_t Read16(INA219_t *ina219, uint8_t Register)
{
 80012f4:	b590      	push	{r4, r7, lr}
 80012f6:	b089      	sub	sp, #36	@ 0x24
 80012f8:	af04      	add	r7, sp, #16
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	000a      	movs	r2, r1
 80012fe:	1cfb      	adds	r3, r7, #3
 8001300:	701a      	strb	r2, [r3, #0]
	uint8_t Value[2];

	HAL_I2C_Mem_Read(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, Value, 2, 1000);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6818      	ldr	r0, [r3, #0]
 8001306:	1cfb      	adds	r3, r7, #3
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	b29a      	uxth	r2, r3
 800130c:	23fa      	movs	r3, #250	@ 0xfa
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	9302      	str	r3, [sp, #8]
 8001312:	2302      	movs	r3, #2
 8001314:	9301      	str	r3, [sp, #4]
 8001316:	240c      	movs	r4, #12
 8001318:	193b      	adds	r3, r7, r4
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	2301      	movs	r3, #1
 800131e:	2180      	movs	r1, #128	@ 0x80
 8001320:	f002 fd12 	bl	8003d48 <HAL_I2C_Mem_Read>

	return ((Value[0] << 8) | Value[1]);
 8001324:	0021      	movs	r1, r4
 8001326:	187b      	adds	r3, r7, r1
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	021b      	lsls	r3, r3, #8
 800132c:	b21a      	sxth	r2, r3
 800132e:	187b      	adds	r3, r7, r1
 8001330:	785b      	ldrb	r3, [r3, #1]
 8001332:	b21b      	sxth	r3, r3
 8001334:	4313      	orrs	r3, r2
 8001336:	b21b      	sxth	r3, r3
 8001338:	b29b      	uxth	r3, r3
}
 800133a:	0018      	movs	r0, r3
 800133c:	46bd      	mov	sp, r7
 800133e:	b005      	add	sp, #20
 8001340:	bd90      	pop	{r4, r7, pc}

08001342 <Write16>:


void Write16(INA219_t *ina219, uint8_t Register, uint16_t Value)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b088      	sub	sp, #32
 8001346:	af04      	add	r7, sp, #16
 8001348:	6078      	str	r0, [r7, #4]
 800134a:	0008      	movs	r0, r1
 800134c:	0011      	movs	r1, r2
 800134e:	1cfb      	adds	r3, r7, #3
 8001350:	1c02      	adds	r2, r0, #0
 8001352:	701a      	strb	r2, [r3, #0]
 8001354:	003b      	movs	r3, r7
 8001356:	1c0a      	adds	r2, r1, #0
 8001358:	801a      	strh	r2, [r3, #0]
	uint8_t addr[2];
	addr[0] = (Value >> 8) & 0xff;  // upper byte
 800135a:	003b      	movs	r3, r7
 800135c:	881b      	ldrh	r3, [r3, #0]
 800135e:	0a1b      	lsrs	r3, r3, #8
 8001360:	b29b      	uxth	r3, r3
 8001362:	b2da      	uxtb	r2, r3
 8001364:	210c      	movs	r1, #12
 8001366:	187b      	adds	r3, r7, r1
 8001368:	701a      	strb	r2, [r3, #0]
	addr[1] = (Value >> 0) & 0xff; // lower byte
 800136a:	003b      	movs	r3, r7
 800136c:	881b      	ldrh	r3, [r3, #0]
 800136e:	b2da      	uxtb	r2, r3
 8001370:	187b      	adds	r3, r7, r1
 8001372:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Mem_Write(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, (uint8_t*)addr, 2, 1000);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6818      	ldr	r0, [r3, #0]
 8001378:	1cfb      	adds	r3, r7, #3
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	b29a      	uxth	r2, r3
 800137e:	23fa      	movs	r3, #250	@ 0xfa
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	9302      	str	r3, [sp, #8]
 8001384:	2302      	movs	r3, #2
 8001386:	9301      	str	r3, [sp, #4]
 8001388:	187b      	adds	r3, r7, r1
 800138a:	9300      	str	r3, [sp, #0]
 800138c:	2301      	movs	r3, #1
 800138e:	2180      	movs	r1, #128	@ 0x80
 8001390:	f002 fbac 	bl	8003aec <HAL_I2C_Mem_Write>
}
 8001394:	46c0      	nop			@ (mov r8, r8)
 8001396:	46bd      	mov	sp, r7
 8001398:	b004      	add	sp, #16
 800139a:	bd80      	pop	{r7, pc}

0800139c <INA219_ReadBusVoltage>:

uint16_t INA219_ReadBusVoltage(INA219_t *ina219)
{
 800139c:	b5b0      	push	{r4, r5, r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_BUSVOLTAGE);
 80013a4:	250e      	movs	r5, #14
 80013a6:	197c      	adds	r4, r7, r5
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2102      	movs	r1, #2
 80013ac:	0018      	movs	r0, r3
 80013ae:	f7ff ffa1 	bl	80012f4 <Read16>
 80013b2:	0003      	movs	r3, r0
 80013b4:	8023      	strh	r3, [r4, #0]

	return ((result >> 3  ) * 4);
 80013b6:	197b      	adds	r3, r7, r5
 80013b8:	881b      	ldrh	r3, [r3, #0]
 80013ba:	08db      	lsrs	r3, r3, #3
 80013bc:	b29b      	uxth	r3, r3
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	b29b      	uxth	r3, r3

}
 80013c2:	0018      	movs	r0, r3
 80013c4:	46bd      	mov	sp, r7
 80013c6:	b004      	add	sp, #16
 80013c8:	bdb0      	pop	{r4, r5, r7, pc}

080013ca <INA219_ReadCurrent_raw>:

int16_t INA219_ReadCurrent_raw(INA219_t *ina219)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b084      	sub	sp, #16
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
	int16_t result = Read16(ina219, INA219_REG_CURRENT);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2104      	movs	r1, #4
 80013d6:	0018      	movs	r0, r3
 80013d8:	f7ff ff8c 	bl	80012f4 <Read16>
 80013dc:	0003      	movs	r3, r0
 80013de:	001a      	movs	r2, r3
 80013e0:	210e      	movs	r1, #14
 80013e2:	187b      	adds	r3, r7, r1
 80013e4:	801a      	strh	r2, [r3, #0]

	return (result );
 80013e6:	187b      	adds	r3, r7, r1
 80013e8:	2200      	movs	r2, #0
 80013ea:	5e9b      	ldrsh	r3, [r3, r2]
}
 80013ec:	0018      	movs	r0, r3
 80013ee:	46bd      	mov	sp, r7
 80013f0:	b004      	add	sp, #16
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <INA219_ReadCurrent>:

int16_t INA219_ReadCurrent(INA219_t *ina219)
{
 80013f4:	b5b0      	push	{r4, r5, r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
	int16_t result = INA219_ReadCurrent_raw(ina219);
 80013fc:	250e      	movs	r5, #14
 80013fe:	197c      	adds	r4, r7, r5
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	0018      	movs	r0, r3
 8001404:	f7ff ffe1 	bl	80013ca <INA219_ReadCurrent_raw>
 8001408:	0003      	movs	r3, r0
 800140a:	8023      	strh	r3, [r4, #0]

	return (result / ina219_currentDivider_mA );
 800140c:	197b      	adds	r3, r7, r5
 800140e:	2200      	movs	r2, #0
 8001410:	5e9a      	ldrsh	r2, [r3, r2]
 8001412:	4b06      	ldr	r3, [pc, #24]	@ (800142c <INA219_ReadCurrent+0x38>)
 8001414:	2100      	movs	r1, #0
 8001416:	5e5b      	ldrsh	r3, [r3, r1]
 8001418:	0019      	movs	r1, r3
 800141a:	0010      	movs	r0, r2
 800141c:	f7fe ff0e 	bl	800023c <__divsi3>
 8001420:	0003      	movs	r3, r0
 8001422:	b21b      	sxth	r3, r3
}
 8001424:	0018      	movs	r0, r3
 8001426:	46bd      	mov	sp, r7
 8001428:	b004      	add	sp, #16
 800142a:	bdb0      	pop	{r4, r5, r7, pc}
 800142c:	200000ba 	.word	0x200000ba

08001430 <INA219_Reset>:

	return (result * 0.01 );
}

void INA219_Reset(INA219_t *ina219)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	Write16(ina219, INA219_REG_CONFIG, INA219_CONFIG_RESET);
 8001438:	2380      	movs	r3, #128	@ 0x80
 800143a:	021a      	lsls	r2, r3, #8
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2100      	movs	r1, #0
 8001440:	0018      	movs	r0, r3
 8001442:	f7ff ff7e 	bl	8001342 <Write16>
	HAL_Delay(1);
 8001446:	2001      	movs	r0, #1
 8001448:	f002 f836 	bl	80034b8 <HAL_Delay>
}
 800144c:	46c0      	nop			@ (mov r8, r8)
 800144e:	46bd      	mov	sp, r7
 8001450:	b002      	add	sp, #8
 8001452:	bd80      	pop	{r7, pc}

08001454 <INA219_setCalibration>:

void INA219_setCalibration(INA219_t *ina219, uint16_t CalibrationData)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	000a      	movs	r2, r1
 800145e:	1cbb      	adds	r3, r7, #2
 8001460:	801a      	strh	r2, [r3, #0]
	Write16(ina219, INA219_REG_CALIBRATION, CalibrationData);
 8001462:	1cbb      	adds	r3, r7, #2
 8001464:	881a      	ldrh	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2105      	movs	r1, #5
 800146a:	0018      	movs	r0, r3
 800146c:	f7ff ff69 	bl	8001342 <Write16>
}
 8001470:	46c0      	nop			@ (mov r8, r8)
 8001472:	46bd      	mov	sp, r7
 8001474:	b002      	add	sp, #8
 8001476:	bd80      	pop	{r7, pc}

08001478 <INA219_setConfig>:
	uint16_t result = Read16(ina219, INA219_REG_CONFIG);
	return result;
}

void INA219_setConfig(INA219_t *ina219, uint16_t Config)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	000a      	movs	r2, r1
 8001482:	1cbb      	adds	r3, r7, #2
 8001484:	801a      	strh	r2, [r3, #0]
	Write16(ina219, INA219_REG_CONFIG, Config);
 8001486:	1cbb      	adds	r3, r7, #2
 8001488:	881a      	ldrh	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2100      	movs	r1, #0
 800148e:	0018      	movs	r0, r3
 8001490:	f7ff ff57 	bl	8001342 <Write16>
}
 8001494:	46c0      	nop			@ (mov r8, r8)
 8001496:	46bd      	mov	sp, r7
 8001498:	b002      	add	sp, #8
 800149a:	bd80      	pop	{r7, pc}

0800149c <INA219_setCalibration_32V_2A>:

void INA219_setCalibration_32V_2A(INA219_t *ina219)
{
 800149c:	b590      	push	{r4, r7, lr}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
	uint16_t config = INA219_CONFIG_BVOLTAGERANGE_32V |
 80014a4:	240e      	movs	r4, #14
 80014a6:	193b      	adds	r3, r7, r4
 80014a8:	4a0e      	ldr	r2, [pc, #56]	@ (80014e4 <INA219_setCalibration_32V_2A+0x48>)
 80014aa:	801a      	strh	r2, [r3, #0]
	             INA219_CONFIG_GAIN_8_320MV | INA219_CONFIG_BADCRES_12BIT |
	             INA219_CONFIG_SADCRES_12BIT_1S_532US |
	             INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;

	ina219_calibrationValue = 4096;
 80014ac:	4b0e      	ldr	r3, [pc, #56]	@ (80014e8 <INA219_setCalibration_32V_2A+0x4c>)
 80014ae:	2280      	movs	r2, #128	@ 0x80
 80014b0:	0152      	lsls	r2, r2, #5
 80014b2:	801a      	strh	r2, [r3, #0]
	ina219_currentDivider_mA = 10; // Current LSB = 100uA per bit (1000/100 = 10)
 80014b4:	4b0d      	ldr	r3, [pc, #52]	@ (80014ec <INA219_setCalibration_32V_2A+0x50>)
 80014b6:	220a      	movs	r2, #10
 80014b8:	801a      	strh	r2, [r3, #0]
	ina219_powerMultiplier_mW = 2; // Power LSB = 1mW per bit (2/1)
 80014ba:	4b0d      	ldr	r3, [pc, #52]	@ (80014f0 <INA219_setCalibration_32V_2A+0x54>)
 80014bc:	2202      	movs	r2, #2
 80014be:	801a      	strh	r2, [r3, #0]

	INA219_setCalibration(ina219, ina219_calibrationValue);
 80014c0:	4b09      	ldr	r3, [pc, #36]	@ (80014e8 <INA219_setCalibration_32V_2A+0x4c>)
 80014c2:	881a      	ldrh	r2, [r3, #0]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	0011      	movs	r1, r2
 80014c8:	0018      	movs	r0, r3
 80014ca:	f7ff ffc3 	bl	8001454 <INA219_setCalibration>
	INA219_setConfig(ina219, config);
 80014ce:	193b      	adds	r3, r7, r4
 80014d0:	881a      	ldrh	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	0011      	movs	r1, r2
 80014d6:	0018      	movs	r0, r3
 80014d8:	f7ff ffce 	bl	8001478 <INA219_setConfig>
}
 80014dc:	46c0      	nop			@ (mov r8, r8)
 80014de:	46bd      	mov	sp, r7
 80014e0:	b005      	add	sp, #20
 80014e2:	bd90      	pop	{r4, r7, pc}
 80014e4:	0000399f 	.word	0x0000399f
 80014e8:	200000b8 	.word	0x200000b8
 80014ec:	200000ba 	.word	0x200000ba
 80014f0:	200000bc 	.word	0x200000bc

080014f4 <INA219_Init>:
			break;
	}
}

uint8_t INA219_Init(INA219_t *ina219, I2C_HandleTypeDef *i2c, uint8_t Address)
{
 80014f4:	b5b0      	push	{r4, r5, r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	1dfb      	adds	r3, r7, #7
 8001500:	701a      	strb	r2, [r3, #0]
	ina219->ina219_i2c = i2c;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	68ba      	ldr	r2, [r7, #8]
 8001506:	601a      	str	r2, [r3, #0]
	ina219->Address = Address;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	1dfa      	adds	r2, r7, #7
 800150c:	7812      	ldrb	r2, [r2, #0]
 800150e:	711a      	strb	r2, [r3, #4]

	ina219_currentDivider_mA = 0;
 8001510:	4b13      	ldr	r3, [pc, #76]	@ (8001560 <INA219_Init+0x6c>)
 8001512:	2200      	movs	r2, #0
 8001514:	801a      	strh	r2, [r3, #0]
	ina219_powerMultiplier_mW = 0;
 8001516:	4b13      	ldr	r3, [pc, #76]	@ (8001564 <INA219_Init+0x70>)
 8001518:	2200      	movs	r2, #0
 800151a:	801a      	strh	r2, [r3, #0]

	uint8_t ina219_isReady = HAL_I2C_IsDeviceReady(i2c, (Address << 1), 3, 2);
 800151c:	1dfb      	adds	r3, r7, #7
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	b29b      	uxth	r3, r3
 8001522:	18db      	adds	r3, r3, r3
 8001524:	b299      	uxth	r1, r3
 8001526:	2517      	movs	r5, #23
 8001528:	197c      	adds	r4, r7, r5
 800152a:	68b8      	ldr	r0, [r7, #8]
 800152c:	2302      	movs	r3, #2
 800152e:	2203      	movs	r2, #3
 8001530:	f002 fd3e 	bl	8003fb0 <HAL_I2C_IsDeviceReady>
 8001534:	0003      	movs	r3, r0
 8001536:	7023      	strb	r3, [r4, #0]

	if(ina219_isReady == HAL_OK)
 8001538:	197b      	adds	r3, r7, r5
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d109      	bne.n	8001554 <INA219_Init+0x60>
	{

		INA219_Reset(ina219);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	0018      	movs	r0, r3
 8001544:	f7ff ff74 	bl	8001430 <INA219_Reset>
		INA219_setCalibration_32V_2A(ina219);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	0018      	movs	r0, r3
 800154c:	f7ff ffa6 	bl	800149c <INA219_setCalibration_32V_2A>

		return 1;
 8001550:	2301      	movs	r3, #1
 8001552:	e000      	b.n	8001556 <INA219_Init+0x62>
	}

	else
	{
		return 0;
 8001554:	2300      	movs	r3, #0
	}
}
 8001556:	0018      	movs	r0, r3
 8001558:	46bd      	mov	sp, r7
 800155a:	b006      	add	sp, #24
 800155c:	bdb0      	pop	{r4, r5, r7, pc}
 800155e:	46c0      	nop			@ (mov r8, r8)
 8001560:	200000ba 	.word	0x200000ba
 8001564:	200000bc 	.word	0x200000bc

08001568 <cs_sel>:

TIM_HandleTypeDef htim2;

/* USER CODE BEGIN PV */
INA219_t ina219;
void cs_sel() {
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  	HAL_GPIO_WritePin(CS_GPIO_Port,CS_Pin, GPIO_PIN_RESET); //CS LOW
 800156c:	23a0      	movs	r3, #160	@ 0xa0
 800156e:	05db      	lsls	r3, r3, #23
 8001570:	2200      	movs	r2, #0
 8001572:	2101      	movs	r1, #1
 8001574:	0018      	movs	r0, r3
 8001576:	f002 f9db 	bl	8003930 <HAL_GPIO_WritePin>
  }
 800157a:	46c0      	nop			@ (mov r8, r8)
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <cs_desel>:

  void cs_desel() {
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  	HAL_GPIO_WritePin(CS_GPIO_Port,CS_Pin, GPIO_PIN_SET); //CS HIGH
 8001584:	23a0      	movs	r3, #160	@ 0xa0
 8001586:	05db      	lsls	r3, r3, #23
 8001588:	2201      	movs	r2, #1
 800158a:	2101      	movs	r1, #1
 800158c:	0018      	movs	r0, r3
 800158e:	f002 f9cf 	bl	8003930 <HAL_GPIO_WritePin>
  }
 8001592:	46c0      	nop			@ (mov r8, r8)
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <spi_rb>:

  uint8_t spi_rb(void) {
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
  	uint8_t rbuf;
  	HAL_SPI_Receive(&hspi1, &rbuf, 1, 0xFFFFFFFF);
 800159e:	2301      	movs	r3, #1
 80015a0:	425b      	negs	r3, r3
 80015a2:	1df9      	adds	r1, r7, #7
 80015a4:	4804      	ldr	r0, [pc, #16]	@ (80015b8 <spi_rb+0x20>)
 80015a6:	2201      	movs	r2, #1
 80015a8:	f004 fa08 	bl	80059bc <HAL_SPI_Receive>
  	return rbuf;
 80015ac:	1dfb      	adds	r3, r7, #7
 80015ae:	781b      	ldrb	r3, [r3, #0]
  }
 80015b0:	0018      	movs	r0, r3
 80015b2:	46bd      	mov	sp, r7
 80015b4:	b002      	add	sp, #8
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	2000013c 	.word	0x2000013c

080015bc <spi_wb>:

  void spi_wb(uint8_t b) {
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	0002      	movs	r2, r0
 80015c4:	1dfb      	adds	r3, r7, #7
 80015c6:	701a      	strb	r2, [r3, #0]
  	HAL_SPI_Transmit(&hspi1, &b, 1, 0xFFFFFFFF);
 80015c8:	2301      	movs	r3, #1
 80015ca:	425b      	negs	r3, r3
 80015cc:	1df9      	adds	r1, r7, #7
 80015ce:	4804      	ldr	r0, [pc, #16]	@ (80015e0 <spi_wb+0x24>)
 80015d0:	2201      	movs	r2, #1
 80015d2:	f004 f893 	bl	80056fc <HAL_SPI_Transmit>
  }
 80015d6:	46c0      	nop			@ (mov r8, r8)
 80015d8:	46bd      	mov	sp, r7
 80015da:	b002      	add	sp, #8
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	46c0      	nop			@ (mov r8, r8)
 80015e0:	2000013c 	.word	0x2000013c

080015e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015e4:	b5b0      	push	{r4, r5, r7, lr}
 80015e6:	b088      	sub	sp, #32
 80015e8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015ea:	f001 fedf 	bl	80033ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015ee:	f000 f981 	bl	80018f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015f2:	f000 fab1 	bl	8001b58 <MX_GPIO_Init>
  MX_SPI1_Init();
 80015f6:	f000 fa1b 	bl	8001a30 <MX_SPI1_Init>
  MX_I2C1_Init();
 80015fa:	f000 f9d9 	bl	80019b0 <MX_I2C1_Init>
  MX_TIM2_Init();
 80015fe:	f000 fa55 	bl	8001aac <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim2);
 8001602:	4b9f      	ldr	r3, [pc, #636]	@ (8001880 <main+0x29c>)
 8001604:	0018      	movs	r0, r3
 8001606:	f004 ff39 	bl	800647c <HAL_TIM_Base_Start>
  reg_wizchip_cs_cbfunc(cs_sel,cs_desel);
 800160a:	4a9e      	ldr	r2, [pc, #632]	@ (8001884 <main+0x2a0>)
 800160c:	4b9e      	ldr	r3, [pc, #632]	@ (8001888 <main+0x2a4>)
 800160e:	0011      	movs	r1, r2
 8001610:	0018      	movs	r0, r3
 8001612:	f001 fc8d 	bl	8002f30 <reg_wizchip_cs_cbfunc>
  reg_wizchip_spi_cbfunc(spi_rb,spi_wb);
 8001616:	4a9d      	ldr	r2, [pc, #628]	@ (800188c <main+0x2a8>)
 8001618:	4b9d      	ldr	r3, [pc, #628]	@ (8001890 <main+0x2ac>)
 800161a:	0011      	movs	r1, r2
 800161c:	0018      	movs	r0, r3
 800161e:	f001 fcab 	bl	8002f78 <reg_wizchip_spi_cbfunc>
   wizchip_init(bufSize, bufSize);
 8001622:	4a9c      	ldr	r2, [pc, #624]	@ (8001894 <main+0x2b0>)
 8001624:	4b9b      	ldr	r3, [pc, #620]	@ (8001894 <main+0x2b0>)
 8001626:	0011      	movs	r1, r2
 8001628:	0018      	movs	r0, r3
 800162a:	f001 fd1a 	bl	8003062 <wizchip_init>
   wizphy_reset();
 800162e:	f001 fddb 	bl	80031e8 <wizphy_reset>
   wiz_NetInfo netInfo = { .mac 	= {0x00, 0x08, 0xdc, 0xab, 0xcd, 0xef},	// Mac address
 8001632:	003b      	movs	r3, r7
 8001634:	0018      	movs	r0, r3
 8001636:	2317      	movs	r3, #23
 8001638:	001a      	movs	r2, r3
 800163a:	2100      	movs	r1, #0
 800163c:	f005 f9e8 	bl	8006a10 <memset>
 8001640:	003b      	movs	r3, r7
 8001642:	4a95      	ldr	r2, [pc, #596]	@ (8001898 <main+0x2b4>)
 8001644:	6811      	ldr	r1, [r2, #0]
 8001646:	6019      	str	r1, [r3, #0]
 8001648:	8892      	ldrh	r2, [r2, #4]
 800164a:	809a      	strh	r2, [r3, #4]
 800164c:	003b      	movs	r3, r7
 800164e:	2206      	movs	r2, #6
 8001650:	4992      	ldr	r1, [pc, #584]	@ (800189c <main+0x2b8>)
 8001652:	189b      	adds	r3, r3, r2
 8001654:	2204      	movs	r2, #4
 8001656:	0018      	movs	r0, r3
 8001658:	f005 fa0e 	bl	8006a78 <memcpy>
 800165c:	003b      	movs	r3, r7
 800165e:	220a      	movs	r2, #10
 8001660:	498f      	ldr	r1, [pc, #572]	@ (80018a0 <main+0x2bc>)
 8001662:	189b      	adds	r3, r3, r2
 8001664:	2204      	movs	r2, #4
 8001666:	0018      	movs	r0, r3
 8001668:	f005 fa06 	bl	8006a78 <memcpy>
	                            .ip 	= {169,254,102,1},					// IP address
	                            .sn 	= {255, 255, 0, 0},					// Subnet mask
	                            .gw 	= {0, 0, 0, 0}};					// Gateway address
	  wizchip_setnetinfo(&netInfo);
 800166c:	003b      	movs	r3, r7
 800166e:	0018      	movs	r0, r3
 8001670:	f001 fdee 	bl	8003250 <wizchip_setnetinfo>
	  wizchip_getnetinfo(&netInfo);
 8001674:	003b      	movs	r3, r7
 8001676:	0018      	movs	r0, r3
 8001678:	f001 fe2c 	bl	80032d4 <wizchip_getnetinfo>


   while(!INA219_Init(&ina219, &hi2c1, INA219_ADDRESS))
 800167c:	e008      	b.n	8001690 <main+0xac>
     {
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800167e:	23a0      	movs	r3, #160	@ 0xa0
 8001680:	05db      	lsls	r3, r3, #23
 8001682:	2110      	movs	r1, #16
 8001684:	0018      	movs	r0, r3
 8001686:	f002 f970 	bl	800396a <HAL_GPIO_TogglePin>
		  HAL_Delay(100);
 800168a:	2064      	movs	r0, #100	@ 0x64
 800168c:	f001 ff14 	bl	80034b8 <HAL_Delay>
   while(!INA219_Init(&ina219, &hi2c1, INA219_ADDRESS))
 8001690:	4984      	ldr	r1, [pc, #528]	@ (80018a4 <main+0x2c0>)
 8001692:	4b85      	ldr	r3, [pc, #532]	@ (80018a8 <main+0x2c4>)
 8001694:	2240      	movs	r2, #64	@ 0x40
 8001696:	0018      	movs	r0, r3
 8001698:	f7ff ff2c 	bl	80014f4 <INA219_Init>
 800169c:	1e03      	subs	r3, r0, #0
 800169e:	d0ee      	beq.n	800167e <main+0x9a>
     }
   HAL_Delay(1000);
 80016a0:	23fa      	movs	r3, #250	@ 0xfa
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	0018      	movs	r0, r3
 80016a6:	f001 ff07 	bl	80034b8 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while(Connect != SOCK_OK){
 80016aa:	e01f      	b.n	80016ec <main+0x108>
	     	    Connect = 0;
 80016ac:	4b7f      	ldr	r3, [pc, #508]	@ (80018ac <main+0x2c8>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	701a      	strb	r2, [r3, #0]
	     	      socket(SOCK_TCPC,Sn_MR_TCP, socket_id,SF_TCP_NODELAY);
 80016b2:	4b7f      	ldr	r3, [pc, #508]	@ (80018b0 <main+0x2cc>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	001a      	movs	r2, r3
 80016b8:	2320      	movs	r3, #32
 80016ba:	2101      	movs	r1, #1
 80016bc:	2000      	movs	r0, #0
 80016be:	f000 faa1 	bl	8001c04 <socket>
	     	   	  Connect = connect(SOCK_TCPC,server_ip, socket_id);
 80016c2:	4b7b      	ldr	r3, [pc, #492]	@ (80018b0 <main+0x2cc>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	001a      	movs	r2, r3
 80016c8:	4b7a      	ldr	r3, [pc, #488]	@ (80018b4 <main+0x2d0>)
 80016ca:	0019      	movs	r1, r3
 80016cc:	2000      	movs	r0, #0
 80016ce:	f000 fc4b 	bl	8001f68 <connect>
 80016d2:	0003      	movs	r3, r0
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	4b75      	ldr	r3, [pc, #468]	@ (80018ac <main+0x2c8>)
 80016d8:	701a      	strb	r2, [r3, #0]
	    	      HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80016da:	23a0      	movs	r3, #160	@ 0xa0
 80016dc:	05db      	lsls	r3, r3, #23
 80016de:	2110      	movs	r1, #16
 80016e0:	0018      	movs	r0, r3
 80016e2:	f002 f942 	bl	800396a <HAL_GPIO_TogglePin>
	     	      HAL_Delay(100);
 80016e6:	2064      	movs	r0, #100	@ 0x64
 80016e8:	f001 fee6 	bl	80034b8 <HAL_Delay>
	  while(Connect != SOCK_OK){
 80016ec:	4b6f      	ldr	r3, [pc, #444]	@ (80018ac <main+0x2c8>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d1db      	bne.n	80016ac <main+0xc8>
	     	  }
	  vbus = INA219_ReadBusVoltage(&ina219);
 80016f4:	4b6c      	ldr	r3, [pc, #432]	@ (80018a8 <main+0x2c4>)
 80016f6:	0018      	movs	r0, r3
 80016f8:	f7ff fe50 	bl	800139c <INA219_ReadBusVoltage>
 80016fc:	0003      	movs	r3, r0
 80016fe:	001a      	movs	r2, r3
 8001700:	4b6d      	ldr	r3, [pc, #436]	@ (80018b8 <main+0x2d4>)
 8001702:	801a      	strh	r2, [r3, #0]
	  current = INA219_ReadCurrent(&ina219);
 8001704:	4b68      	ldr	r3, [pc, #416]	@ (80018a8 <main+0x2c4>)
 8001706:	0018      	movs	r0, r3
 8001708:	f7ff fe74 	bl	80013f4 <INA219_ReadCurrent>
 800170c:	0003      	movs	r3, r0
 800170e:	b29a      	uxth	r2, r3
 8001710:	4b6a      	ldr	r3, [pc, #424]	@ (80018bc <main+0x2d8>)
 8001712:	801a      	strh	r2, [r3, #0]
	  __HAL_TIM_SET_COUNTER(&htim2,0);
 8001714:	4b5a      	ldr	r3, [pc, #360]	@ (8001880 <main+0x29c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2200      	movs	r2, #0
 800171a:	625a      	str	r2, [r3, #36]	@ 0x24
	  Power=(((float)(vbus)/1000*(float)(current)/1000))*10;//W*10
 800171c:	4b66      	ldr	r3, [pc, #408]	@ (80018b8 <main+0x2d4>)
 800171e:	881b      	ldrh	r3, [r3, #0]
 8001720:	0018      	movs	r0, r3
 8001722:	f7ff fc87 	bl	8001034 <__aeabi_ui2f>
 8001726:	1c03      	adds	r3, r0, #0
 8001728:	4965      	ldr	r1, [pc, #404]	@ (80018c0 <main+0x2dc>)
 800172a:	1c18      	adds	r0, r3, #0
 800172c:	f7ff f814 	bl	8000758 <__aeabi_fdiv>
 8001730:	1c03      	adds	r3, r0, #0
 8001732:	1c1c      	adds	r4, r3, #0
 8001734:	4b61      	ldr	r3, [pc, #388]	@ (80018bc <main+0x2d8>)
 8001736:	881b      	ldrh	r3, [r3, #0]
 8001738:	0018      	movs	r0, r3
 800173a:	f7ff fc7b 	bl	8001034 <__aeabi_ui2f>
 800173e:	1c03      	adds	r3, r0, #0
 8001740:	1c19      	adds	r1, r3, #0
 8001742:	1c20      	adds	r0, r4, #0
 8001744:	f7ff f928 	bl	8000998 <__aeabi_fmul>
 8001748:	1c03      	adds	r3, r0, #0
 800174a:	495d      	ldr	r1, [pc, #372]	@ (80018c0 <main+0x2dc>)
 800174c:	1c18      	adds	r0, r3, #0
 800174e:	f7ff f803 	bl	8000758 <__aeabi_fdiv>
 8001752:	1c03      	adds	r3, r0, #0
 8001754:	495b      	ldr	r1, [pc, #364]	@ (80018c4 <main+0x2e0>)
 8001756:	1c18      	adds	r0, r3, #0
 8001758:	f7ff f91e 	bl	8000998 <__aeabi_fmul>
 800175c:	1c03      	adds	r3, r0, #0
 800175e:	1c18      	adds	r0, r3, #0
 8001760:	f7fe fe58 	bl	8000414 <__aeabi_f2uiz>
 8001764:	0003      	movs	r3, r0
 8001766:	b29a      	uxth	r2, r3
 8001768:	4b57      	ldr	r3, [pc, #348]	@ (80018c8 <main+0x2e4>)
 800176a:	801a      	strh	r2, [r3, #0]
	  Total_power = Total_power + (((float)(Power)/10)*((float)(Second)/(3600*1000)))*100*10;//mW/h*10
 800176c:	4b57      	ldr	r3, [pc, #348]	@ (80018cc <main+0x2e8>)
 800176e:	881b      	ldrh	r3, [r3, #0]
 8001770:	0018      	movs	r0, r3
 8001772:	f7ff fc13 	bl	8000f9c <__aeabi_i2f>
 8001776:	1c04      	adds	r4, r0, #0
 8001778:	4b53      	ldr	r3, [pc, #332]	@ (80018c8 <main+0x2e4>)
 800177a:	881b      	ldrh	r3, [r3, #0]
 800177c:	0018      	movs	r0, r3
 800177e:	f7ff fc59 	bl	8001034 <__aeabi_ui2f>
 8001782:	1c03      	adds	r3, r0, #0
 8001784:	494f      	ldr	r1, [pc, #316]	@ (80018c4 <main+0x2e0>)
 8001786:	1c18      	adds	r0, r3, #0
 8001788:	f7fe ffe6 	bl	8000758 <__aeabi_fdiv>
 800178c:	1c03      	adds	r3, r0, #0
 800178e:	1c1d      	adds	r5, r3, #0
 8001790:	4b4f      	ldr	r3, [pc, #316]	@ (80018d0 <main+0x2ec>)
 8001792:	881b      	ldrh	r3, [r3, #0]
 8001794:	0018      	movs	r0, r3
 8001796:	f7ff fc4d 	bl	8001034 <__aeabi_ui2f>
 800179a:	1c03      	adds	r3, r0, #0
 800179c:	494d      	ldr	r1, [pc, #308]	@ (80018d4 <main+0x2f0>)
 800179e:	1c18      	adds	r0, r3, #0
 80017a0:	f7fe ffda 	bl	8000758 <__aeabi_fdiv>
 80017a4:	1c03      	adds	r3, r0, #0
 80017a6:	1c19      	adds	r1, r3, #0
 80017a8:	1c28      	adds	r0, r5, #0
 80017aa:	f7ff f8f5 	bl	8000998 <__aeabi_fmul>
 80017ae:	1c03      	adds	r3, r0, #0
 80017b0:	4949      	ldr	r1, [pc, #292]	@ (80018d8 <main+0x2f4>)
 80017b2:	1c18      	adds	r0, r3, #0
 80017b4:	f7ff f8f0 	bl	8000998 <__aeabi_fmul>
 80017b8:	1c03      	adds	r3, r0, #0
 80017ba:	4942      	ldr	r1, [pc, #264]	@ (80018c4 <main+0x2e0>)
 80017bc:	1c18      	adds	r0, r3, #0
 80017be:	f7ff f8eb 	bl	8000998 <__aeabi_fmul>
 80017c2:	1c03      	adds	r3, r0, #0
 80017c4:	1c19      	adds	r1, r3, #0
 80017c6:	1c20      	adds	r0, r4, #0
 80017c8:	f7fe fe3c 	bl	8000444 <__aeabi_fadd>
 80017cc:	1c03      	adds	r3, r0, #0
 80017ce:	1c18      	adds	r0, r3, #0
 80017d0:	f7fe fe20 	bl	8000414 <__aeabi_f2uiz>
 80017d4:	0003      	movs	r3, r0
 80017d6:	b29a      	uxth	r2, r3
 80017d8:	4b3c      	ldr	r3, [pc, #240]	@ (80018cc <main+0x2e8>)
 80017da:	801a      	strh	r2, [r3, #0]
	 	 vbus = 0;
	 	 current =0;
	 	 Power = 0;
	 	 Total_power =0;
	 	 }
	  if(Connect== SOCK_OK && State == 1){
 80017dc:	4b33      	ldr	r3, [pc, #204]	@ (80018ac <main+0x2c8>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d123      	bne.n	800182c <main+0x248>
 80017e4:	4b3d      	ldr	r3, [pc, #244]	@ (80018dc <main+0x2f8>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d11f      	bne.n	800182c <main+0x248>
		  sprintf(Send, "V=%d,A=%d,W=%d,mW/H=%d" ,vbus,current,Power,Total_power);
 80017ec:	4b32      	ldr	r3, [pc, #200]	@ (80018b8 <main+0x2d4>)
 80017ee:	881b      	ldrh	r3, [r3, #0]
 80017f0:	001c      	movs	r4, r3
 80017f2:	4b32      	ldr	r3, [pc, #200]	@ (80018bc <main+0x2d8>)
 80017f4:	881b      	ldrh	r3, [r3, #0]
 80017f6:	001d      	movs	r5, r3
 80017f8:	4b33      	ldr	r3, [pc, #204]	@ (80018c8 <main+0x2e4>)
 80017fa:	881b      	ldrh	r3, [r3, #0]
 80017fc:	001a      	movs	r2, r3
 80017fe:	4b33      	ldr	r3, [pc, #204]	@ (80018cc <main+0x2e8>)
 8001800:	881b      	ldrh	r3, [r3, #0]
 8001802:	4937      	ldr	r1, [pc, #220]	@ (80018e0 <main+0x2fc>)
 8001804:	4837      	ldr	r0, [pc, #220]	@ (80018e4 <main+0x300>)
 8001806:	9301      	str	r3, [sp, #4]
 8001808:	9200      	str	r2, [sp, #0]
 800180a:	002b      	movs	r3, r5
 800180c:	0022      	movs	r2, r4
 800180e:	f005 f8df 	bl	80069d0 <siprintf>
	      send(s,Send,strlen(Send));
 8001812:	4b35      	ldr	r3, [pc, #212]	@ (80018e8 <main+0x304>)
 8001814:	781c      	ldrb	r4, [r3, #0]
 8001816:	4b33      	ldr	r3, [pc, #204]	@ (80018e4 <main+0x300>)
 8001818:	0018      	movs	r0, r3
 800181a:	f7fe fc73 	bl	8000104 <strlen>
 800181e:	0003      	movs	r3, r0
 8001820:	b29a      	uxth	r2, r3
 8001822:	4b30      	ldr	r3, [pc, #192]	@ (80018e4 <main+0x300>)
 8001824:	0019      	movs	r1, r3
 8001826:	0020      	movs	r0, r4
 8001828:	f000 fc9a 	bl	8002160 <send>
	      	   }
	  recv_len = recv(SOCK_TCPC, data_buf, sizeof(data_buf));
 800182c:	4b2f      	ldr	r3, [pc, #188]	@ (80018ec <main+0x308>)
 800182e:	2206      	movs	r2, #6
 8001830:	0019      	movs	r1, r3
 8001832:	2000      	movs	r0, #0
 8001834:	f000 fdca 	bl	80023cc <recv>
 8001838:	0003      	movs	r3, r0
 800183a:	b29a      	uxth	r2, r3
 800183c:	4b2c      	ldr	r3, [pc, #176]	@ (80018f0 <main+0x30c>)
 800183e:	801a      	strh	r2, [r3, #0]
	  if (recv_len > 0) {
 8001840:	4b2b      	ldr	r3, [pc, #172]	@ (80018f0 <main+0x30c>)
 8001842:	881b      	ldrh	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d005      	beq.n	8001854 <main+0x270>
	  	  	          	  data_buf[recv_len] = '\0';
 8001848:	4b29      	ldr	r3, [pc, #164]	@ (80018f0 <main+0x30c>)
 800184a:	881b      	ldrh	r3, [r3, #0]
 800184c:	001a      	movs	r2, r3
 800184e:	4b27      	ldr	r3, [pc, #156]	@ (80018ec <main+0x308>)
 8001850:	2100      	movs	r1, #0
 8001852:	5499      	strb	r1, [r3, r2]
	  //Mode Selector

	   else if(data_buf=="Reset"){
		   		Total_power = 0;
	   	   	   }
	   if (recv_len > 0) {
 8001854:	4b26      	ldr	r3, [pc, #152]	@ (80018f0 <main+0x30c>)
 8001856:	881b      	ldrh	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d005      	beq.n	8001868 <main+0x284>
	  	          	  data_buf[recv_len] = '\0';
 800185c:	4b24      	ldr	r3, [pc, #144]	@ (80018f0 <main+0x30c>)
 800185e:	881b      	ldrh	r3, [r3, #0]
 8001860:	001a      	movs	r2, r3
 8001862:	4b22      	ldr	r3, [pc, #136]	@ (80018ec <main+0x308>)
 8001864:	2100      	movs	r1, #0
 8001866:	5499      	strb	r1, [r3, r2]
	  	            }
	  HAL_Delay(1000);
 8001868:	23fa      	movs	r3, #250	@ 0xfa
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	0018      	movs	r0, r3
 800186e:	f001 fe23 	bl	80034b8 <HAL_Delay>
	  Second =__HAL_TIM_GET_COUNTER(&htim2);
 8001872:	4b03      	ldr	r3, [pc, #12]	@ (8001880 <main+0x29c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001878:	b29a      	uxth	r2, r3
 800187a:	4b15      	ldr	r3, [pc, #84]	@ (80018d0 <main+0x2ec>)
 800187c:	801a      	strh	r2, [r3, #0]
	  while(Connect != SOCK_OK){
 800187e:	e735      	b.n	80016ec <main+0x108>
 8001880:	200001a0 	.word	0x200001a0
 8001884:	08001581 	.word	0x08001581
 8001888:	08001569 	.word	0x08001569
 800188c:	080015bd 	.word	0x080015bd
 8001890:	08001599 	.word	0x08001599
 8001894:	20000000 	.word	0x20000000
 8001898:	0800733c 	.word	0x0800733c
 800189c:	08007344 	.word	0x08007344
 80018a0:	08007348 	.word	0x08007348
 80018a4:	200000e8 	.word	0x200000e8
 80018a8:	200001ec 	.word	0x200001ec
 80018ac:	200000c9 	.word	0x200000c9
 80018b0:	2000000e 	.word	0x2000000e
 80018b4:	20000004 	.word	0x20000004
 80018b8:	200000be 	.word	0x200000be
 80018bc:	200000c0 	.word	0x200000c0
 80018c0:	447a0000 	.word	0x447a0000
 80018c4:	41200000 	.word	0x41200000
 80018c8:	200000c2 	.word	0x200000c2
 80018cc:	200000c4 	.word	0x200000c4
 80018d0:	200000c6 	.word	0x200000c6
 80018d4:	4a5bba00 	.word	0x4a5bba00
 80018d8:	42c80000 	.word	0x42c80000
 80018dc:	2000000f 	.word	0x2000000f
 80018e0:	08007324 	.word	0x08007324
 80018e4:	200000cc 	.word	0x200000cc
 80018e8:	200000c8 	.word	0x200000c8
 80018ec:	20000008 	.word	0x20000008
 80018f0:	200000e6 	.word	0x200000e6

080018f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018f4:	b590      	push	{r4, r7, lr}
 80018f6:	b093      	sub	sp, #76	@ 0x4c
 80018f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018fa:	2410      	movs	r4, #16
 80018fc:	193b      	adds	r3, r7, r4
 80018fe:	0018      	movs	r0, r3
 8001900:	2338      	movs	r3, #56	@ 0x38
 8001902:	001a      	movs	r2, r3
 8001904:	2100      	movs	r1, #0
 8001906:	f005 f883 	bl	8006a10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800190a:	003b      	movs	r3, r7
 800190c:	0018      	movs	r0, r3
 800190e:	2310      	movs	r3, #16
 8001910:	001a      	movs	r2, r3
 8001912:	2100      	movs	r1, #0
 8001914:	f005 f87c 	bl	8006a10 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001918:	2380      	movs	r3, #128	@ 0x80
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	0018      	movs	r0, r3
 800191e:	f002 ffd7 	bl	80048d0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001922:	193b      	adds	r3, r7, r4
 8001924:	2202      	movs	r2, #2
 8001926:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001928:	193b      	adds	r3, r7, r4
 800192a:	2280      	movs	r2, #128	@ 0x80
 800192c:	0052      	lsls	r2, r2, #1
 800192e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001930:	0021      	movs	r1, r4
 8001932:	187b      	adds	r3, r7, r1
 8001934:	2200      	movs	r2, #0
 8001936:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001938:	187b      	adds	r3, r7, r1
 800193a:	2240      	movs	r2, #64	@ 0x40
 800193c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800193e:	187b      	adds	r3, r7, r1
 8001940:	2202      	movs	r2, #2
 8001942:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001944:	187b      	adds	r3, r7, r1
 8001946:	2202      	movs	r2, #2
 8001948:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800194a:	187b      	adds	r3, r7, r1
 800194c:	2200      	movs	r2, #0
 800194e:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001950:	187b      	adds	r3, r7, r1
 8001952:	2208      	movs	r2, #8
 8001954:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001956:	187b      	adds	r3, r7, r1
 8001958:	2280      	movs	r2, #128	@ 0x80
 800195a:	0292      	lsls	r2, r2, #10
 800195c:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800195e:	187b      	adds	r3, r7, r1
 8001960:	2280      	movs	r2, #128	@ 0x80
 8001962:	0492      	lsls	r2, r2, #18
 8001964:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001966:	187b      	adds	r3, r7, r1
 8001968:	2280      	movs	r2, #128	@ 0x80
 800196a:	0592      	lsls	r2, r2, #22
 800196c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800196e:	187b      	adds	r3, r7, r1
 8001970:	0018      	movs	r0, r3
 8001972:	f002 ffed 	bl	8004950 <HAL_RCC_OscConfig>
 8001976:	1e03      	subs	r3, r0, #0
 8001978:	d001      	beq.n	800197e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800197a:	f000 f93d 	bl	8001bf8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800197e:	003b      	movs	r3, r7
 8001980:	2207      	movs	r2, #7
 8001982:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001984:	003b      	movs	r3, r7
 8001986:	2202      	movs	r2, #2
 8001988:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800198a:	003b      	movs	r3, r7
 800198c:	2200      	movs	r2, #0
 800198e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001990:	003b      	movs	r3, r7
 8001992:	2200      	movs	r2, #0
 8001994:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001996:	003b      	movs	r3, r7
 8001998:	2102      	movs	r1, #2
 800199a:	0018      	movs	r0, r3
 800199c:	f003 faf2 	bl	8004f84 <HAL_RCC_ClockConfig>
 80019a0:	1e03      	subs	r3, r0, #0
 80019a2:	d001      	beq.n	80019a8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80019a4:	f000 f928 	bl	8001bf8 <Error_Handler>
  }
}
 80019a8:	46c0      	nop			@ (mov r8, r8)
 80019aa:	46bd      	mov	sp, r7
 80019ac:	b013      	add	sp, #76	@ 0x4c
 80019ae:	bd90      	pop	{r4, r7, pc}

080019b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a24 <MX_I2C1_Init+0x74>)
 80019b6:	4a1c      	ldr	r2, [pc, #112]	@ (8001a28 <MX_I2C1_Init+0x78>)
 80019b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 80019ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001a24 <MX_I2C1_Init+0x74>)
 80019bc:	4a1b      	ldr	r2, [pc, #108]	@ (8001a2c <MX_I2C1_Init+0x7c>)
 80019be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80019c0:	4b18      	ldr	r3, [pc, #96]	@ (8001a24 <MX_I2C1_Init+0x74>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019c6:	4b17      	ldr	r3, [pc, #92]	@ (8001a24 <MX_I2C1_Init+0x74>)
 80019c8:	2201      	movs	r2, #1
 80019ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019cc:	4b15      	ldr	r3, [pc, #84]	@ (8001a24 <MX_I2C1_Init+0x74>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80019d2:	4b14      	ldr	r3, [pc, #80]	@ (8001a24 <MX_I2C1_Init+0x74>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80019d8:	4b12      	ldr	r3, [pc, #72]	@ (8001a24 <MX_I2C1_Init+0x74>)
 80019da:	2200      	movs	r2, #0
 80019dc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019de:	4b11      	ldr	r3, [pc, #68]	@ (8001a24 <MX_I2C1_Init+0x74>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001a24 <MX_I2C1_Init+0x74>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001a24 <MX_I2C1_Init+0x74>)
 80019ec:	0018      	movs	r0, r3
 80019ee:	f001 ffd7 	bl	80039a0 <HAL_I2C_Init>
 80019f2:	1e03      	subs	r3, r0, #0
 80019f4:	d001      	beq.n	80019fa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80019f6:	f000 f8ff 	bl	8001bf8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80019fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001a24 <MX_I2C1_Init+0x74>)
 80019fc:	2100      	movs	r1, #0
 80019fe:	0018      	movs	r0, r3
 8001a00:	f002 fece 	bl	80047a0 <HAL_I2CEx_ConfigAnalogFilter>
 8001a04:	1e03      	subs	r3, r0, #0
 8001a06:	d001      	beq.n	8001a0c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001a08:	f000 f8f6 	bl	8001bf8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001a0c:	4b05      	ldr	r3, [pc, #20]	@ (8001a24 <MX_I2C1_Init+0x74>)
 8001a0e:	2100      	movs	r1, #0
 8001a10:	0018      	movs	r0, r3
 8001a12:	f002 ff11 	bl	8004838 <HAL_I2CEx_ConfigDigitalFilter>
 8001a16:	1e03      	subs	r3, r0, #0
 8001a18:	d001      	beq.n	8001a1e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001a1a:	f000 f8ed 	bl	8001bf8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a1e:	46c0      	nop			@ (mov r8, r8)
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	200000e8 	.word	0x200000e8
 8001a28:	40005400 	.word	0x40005400
 8001a2c:	10707dbc 	.word	0x10707dbc

08001a30 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a34:	4b1b      	ldr	r3, [pc, #108]	@ (8001aa4 <MX_SPI1_Init+0x74>)
 8001a36:	4a1c      	ldr	r2, [pc, #112]	@ (8001aa8 <MX_SPI1_Init+0x78>)
 8001a38:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a3a:	4b1a      	ldr	r3, [pc, #104]	@ (8001aa4 <MX_SPI1_Init+0x74>)
 8001a3c:	2282      	movs	r2, #130	@ 0x82
 8001a3e:	0052      	lsls	r2, r2, #1
 8001a40:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a42:	4b18      	ldr	r3, [pc, #96]	@ (8001aa4 <MX_SPI1_Init+0x74>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a48:	4b16      	ldr	r3, [pc, #88]	@ (8001aa4 <MX_SPI1_Init+0x74>)
 8001a4a:	22e0      	movs	r2, #224	@ 0xe0
 8001a4c:	00d2      	lsls	r2, r2, #3
 8001a4e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a50:	4b14      	ldr	r3, [pc, #80]	@ (8001aa4 <MX_SPI1_Init+0x74>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a56:	4b13      	ldr	r3, [pc, #76]	@ (8001aa4 <MX_SPI1_Init+0x74>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a5c:	4b11      	ldr	r3, [pc, #68]	@ (8001aa4 <MX_SPI1_Init+0x74>)
 8001a5e:	2280      	movs	r2, #128	@ 0x80
 8001a60:	0092      	lsls	r2, r2, #2
 8001a62:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001a64:	4b0f      	ldr	r3, [pc, #60]	@ (8001aa4 <MX_SPI1_Init+0x74>)
 8001a66:	2220      	movs	r2, #32
 8001a68:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001aa4 <MX_SPI1_Init+0x74>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a70:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa4 <MX_SPI1_Init+0x74>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a76:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa4 <MX_SPI1_Init+0x74>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001a7c:	4b09      	ldr	r3, [pc, #36]	@ (8001aa4 <MX_SPI1_Init+0x74>)
 8001a7e:	2207      	movs	r2, #7
 8001a80:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a82:	4b08      	ldr	r3, [pc, #32]	@ (8001aa4 <MX_SPI1_Init+0x74>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a88:	4b06      	ldr	r3, [pc, #24]	@ (8001aa4 <MX_SPI1_Init+0x74>)
 8001a8a:	2208      	movs	r2, #8
 8001a8c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a8e:	4b05      	ldr	r3, [pc, #20]	@ (8001aa4 <MX_SPI1_Init+0x74>)
 8001a90:	0018      	movs	r0, r3
 8001a92:	f003 fd7b 	bl	800558c <HAL_SPI_Init>
 8001a96:	1e03      	subs	r3, r0, #0
 8001a98:	d001      	beq.n	8001a9e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001a9a:	f000 f8ad 	bl	8001bf8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a9e:	46c0      	nop			@ (mov r8, r8)
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	2000013c 	.word	0x2000013c
 8001aa8:	40013000 	.word	0x40013000

08001aac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b088      	sub	sp, #32
 8001ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ab2:	2310      	movs	r3, #16
 8001ab4:	18fb      	adds	r3, r7, r3
 8001ab6:	0018      	movs	r0, r3
 8001ab8:	2310      	movs	r3, #16
 8001aba:	001a      	movs	r2, r3
 8001abc:	2100      	movs	r1, #0
 8001abe:	f004 ffa7 	bl	8006a10 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ac2:	1d3b      	adds	r3, r7, #4
 8001ac4:	0018      	movs	r0, r3
 8001ac6:	230c      	movs	r3, #12
 8001ac8:	001a      	movs	r2, r3
 8001aca:	2100      	movs	r1, #0
 8001acc:	f004 ffa0 	bl	8006a10 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ad0:	4b1e      	ldr	r3, [pc, #120]	@ (8001b4c <MX_TIM2_Init+0xa0>)
 8001ad2:	2280      	movs	r2, #128	@ 0x80
 8001ad4:	05d2      	lsls	r2, r2, #23
 8001ad6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64000-1;
 8001ad8:	4b1c      	ldr	r3, [pc, #112]	@ (8001b4c <MX_TIM2_Init+0xa0>)
 8001ada:	4a1d      	ldr	r2, [pc, #116]	@ (8001b50 <MX_TIM2_Init+0xa4>)
 8001adc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ade:	4b1b      	ldr	r3, [pc, #108]	@ (8001b4c <MX_TIM2_Init+0xa0>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8001ae4:	4b19      	ldr	r3, [pc, #100]	@ (8001b4c <MX_TIM2_Init+0xa0>)
 8001ae6:	4a1b      	ldr	r2, [pc, #108]	@ (8001b54 <MX_TIM2_Init+0xa8>)
 8001ae8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aea:	4b18      	ldr	r3, [pc, #96]	@ (8001b4c <MX_TIM2_Init+0xa0>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af0:	4b16      	ldr	r3, [pc, #88]	@ (8001b4c <MX_TIM2_Init+0xa0>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001af6:	4b15      	ldr	r3, [pc, #84]	@ (8001b4c <MX_TIM2_Init+0xa0>)
 8001af8:	0018      	movs	r0, r3
 8001afa:	f004 fc67 	bl	80063cc <HAL_TIM_Base_Init>
 8001afe:	1e03      	subs	r3, r0, #0
 8001b00:	d001      	beq.n	8001b06 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001b02:	f000 f879 	bl	8001bf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b06:	2110      	movs	r1, #16
 8001b08:	187b      	adds	r3, r7, r1
 8001b0a:	2280      	movs	r2, #128	@ 0x80
 8001b0c:	0152      	lsls	r2, r2, #5
 8001b0e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b10:	187a      	adds	r2, r7, r1
 8001b12:	4b0e      	ldr	r3, [pc, #56]	@ (8001b4c <MX_TIM2_Init+0xa0>)
 8001b14:	0011      	movs	r1, r2
 8001b16:	0018      	movs	r0, r3
 8001b18:	f004 fcfc 	bl	8006514 <HAL_TIM_ConfigClockSource>
 8001b1c:	1e03      	subs	r3, r0, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001b20:	f000 f86a 	bl	8001bf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b24:	1d3b      	adds	r3, r7, #4
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b2a:	1d3b      	adds	r3, r7, #4
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b30:	1d3a      	adds	r2, r7, #4
 8001b32:	4b06      	ldr	r3, [pc, #24]	@ (8001b4c <MX_TIM2_Init+0xa0>)
 8001b34:	0011      	movs	r1, r2
 8001b36:	0018      	movs	r0, r3
 8001b38:	f004 fee2 	bl	8006900 <HAL_TIMEx_MasterConfigSynchronization>
 8001b3c:	1e03      	subs	r3, r0, #0
 8001b3e:	d001      	beq.n	8001b44 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001b40:	f000 f85a 	bl	8001bf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b44:	46c0      	nop			@ (mov r8, r8)
 8001b46:	46bd      	mov	sp, r7
 8001b48:	b008      	add	sp, #32
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	200001a0 	.word	0x200001a0
 8001b50:	0000f9ff 	.word	0x0000f9ff
 8001b54:	00002710 	.word	0x00002710

08001b58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b58:	b590      	push	{r4, r7, lr}
 8001b5a:	b089      	sub	sp, #36	@ 0x24
 8001b5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5e:	240c      	movs	r4, #12
 8001b60:	193b      	adds	r3, r7, r4
 8001b62:	0018      	movs	r0, r3
 8001b64:	2314      	movs	r3, #20
 8001b66:	001a      	movs	r2, r3
 8001b68:	2100      	movs	r1, #0
 8001b6a:	f004 ff51 	bl	8006a10 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b6e:	4b21      	ldr	r3, [pc, #132]	@ (8001bf4 <MX_GPIO_Init+0x9c>)
 8001b70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b72:	4b20      	ldr	r3, [pc, #128]	@ (8001bf4 <MX_GPIO_Init+0x9c>)
 8001b74:	2102      	movs	r1, #2
 8001b76:	430a      	orrs	r2, r1
 8001b78:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b7a:	4b1e      	ldr	r3, [pc, #120]	@ (8001bf4 <MX_GPIO_Init+0x9c>)
 8001b7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b7e:	2202      	movs	r2, #2
 8001b80:	4013      	ands	r3, r2
 8001b82:	60bb      	str	r3, [r7, #8]
 8001b84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b86:	4b1b      	ldr	r3, [pc, #108]	@ (8001bf4 <MX_GPIO_Init+0x9c>)
 8001b88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b8a:	4b1a      	ldr	r3, [pc, #104]	@ (8001bf4 <MX_GPIO_Init+0x9c>)
 8001b8c:	2104      	movs	r1, #4
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b92:	4b18      	ldr	r3, [pc, #96]	@ (8001bf4 <MX_GPIO_Init+0x9c>)
 8001b94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b96:	2204      	movs	r2, #4
 8001b98:	4013      	ands	r3, r2
 8001b9a:	607b      	str	r3, [r7, #4]
 8001b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9e:	4b15      	ldr	r3, [pc, #84]	@ (8001bf4 <MX_GPIO_Init+0x9c>)
 8001ba0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ba2:	4b14      	ldr	r3, [pc, #80]	@ (8001bf4 <MX_GPIO_Init+0x9c>)
 8001ba4:	2101      	movs	r1, #1
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	635a      	str	r2, [r3, #52]	@ 0x34
 8001baa:	4b12      	ldr	r3, [pc, #72]	@ (8001bf4 <MX_GPIO_Init+0x9c>)
 8001bac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bae:	2201      	movs	r2, #1
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	603b      	str	r3, [r7, #0]
 8001bb4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|LED_Pin, GPIO_PIN_RESET);
 8001bb6:	23a0      	movs	r3, #160	@ 0xa0
 8001bb8:	05db      	lsls	r3, r3, #23
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2111      	movs	r1, #17
 8001bbe:	0018      	movs	r0, r3
 8001bc0:	f001 feb6 	bl	8003930 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_Pin LED_Pin */
  GPIO_InitStruct.Pin = CS_Pin|LED_Pin;
 8001bc4:	0021      	movs	r1, r4
 8001bc6:	187b      	adds	r3, r7, r1
 8001bc8:	2211      	movs	r2, #17
 8001bca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bcc:	187b      	adds	r3, r7, r1
 8001bce:	2201      	movs	r2, #1
 8001bd0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd2:	187b      	adds	r3, r7, r1
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd8:	187b      	adds	r3, r7, r1
 8001bda:	2200      	movs	r2, #0
 8001bdc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bde:	187a      	adds	r2, r7, r1
 8001be0:	23a0      	movs	r3, #160	@ 0xa0
 8001be2:	05db      	lsls	r3, r3, #23
 8001be4:	0011      	movs	r1, r2
 8001be6:	0018      	movs	r0, r3
 8001be8:	f001 fd3e 	bl	8003668 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001bec:	46c0      	nop			@ (mov r8, r8)
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	b009      	add	sp, #36	@ 0x24
 8001bf2:	bd90      	pop	{r4, r7, pc}
 8001bf4:	40021000 	.word	0x40021000

08001bf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bfc:	b672      	cpsid	i
}
 8001bfe:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c00:	46c0      	nop			@ (mov r8, r8)
 8001c02:	e7fd      	b.n	8001c00 <Error_Handler+0x8>

08001c04 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8001c04:	b5b0      	push	{r4, r5, r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	0005      	movs	r5, r0
 8001c0c:	000c      	movs	r4, r1
 8001c0e:	0010      	movs	r0, r2
 8001c10:	0019      	movs	r1, r3
 8001c12:	1dfb      	adds	r3, r7, #7
 8001c14:	1c2a      	adds	r2, r5, #0
 8001c16:	701a      	strb	r2, [r3, #0]
 8001c18:	1dbb      	adds	r3, r7, #6
 8001c1a:	1c22      	adds	r2, r4, #0
 8001c1c:	701a      	strb	r2, [r3, #0]
 8001c1e:	1d3b      	adds	r3, r7, #4
 8001c20:	1c02      	adds	r2, r0, #0
 8001c22:	801a      	strh	r2, [r3, #0]
 8001c24:	1cfb      	adds	r3, r7, #3
 8001c26:	1c0a      	adds	r2, r1, #0
 8001c28:	701a      	strb	r2, [r3, #0]
	CHECK_SOCKNUM();
 8001c2a:	1dfb      	adds	r3, r7, #7
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	2b08      	cmp	r3, #8
 8001c30:	d902      	bls.n	8001c38 <socket+0x34>
 8001c32:	2301      	movs	r3, #1
 8001c34:	425b      	negs	r3, r3
 8001c36:	e10b      	b.n	8001e50 <socket+0x24c>
	switch(protocol)
 8001c38:	1dbb      	adds	r3, r7, #6
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d005      	beq.n	8001c4c <socket+0x48>
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	dd11      	ble.n	8001c68 <socket+0x64>
 8001c44:	3b02      	subs	r3, #2
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d80e      	bhi.n	8001c68 <socket+0x64>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8001c4a:	e011      	b.n	8001c70 <socket+0x6c>
            getSIPR((uint8_t*)&taddr);
 8001c4c:	230c      	movs	r3, #12
 8001c4e:	18f9      	adds	r1, r7, r3
 8001c50:	23f0      	movs	r3, #240	@ 0xf0
 8001c52:	011b      	lsls	r3, r3, #4
 8001c54:	2204      	movs	r2, #4
 8001c56:	0018      	movs	r0, r3
 8001c58:	f000 fe8a 	bl	8002970 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d105      	bne.n	8001c6e <socket+0x6a>
 8001c62:	2303      	movs	r3, #3
 8001c64:	425b      	negs	r3, r3
 8001c66:	e0f3      	b.n	8001e50 <socket+0x24c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8001c68:	2305      	movs	r3, #5
 8001c6a:	425b      	negs	r3, r3
 8001c6c:	e0f0      	b.n	8001e50 <socket+0x24c>
	    break;
 8001c6e:	46c0      	nop			@ (mov r8, r8)
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8001c70:	1cfb      	adds	r3, r7, #3
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	2204      	movs	r2, #4
 8001c76:	4013      	ands	r3, r2
 8001c78:	d002      	beq.n	8001c80 <socket+0x7c>
 8001c7a:	2306      	movs	r3, #6
 8001c7c:	425b      	negs	r3, r3
 8001c7e:	e0e7      	b.n	8001e50 <socket+0x24c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8001c80:	1cfb      	adds	r3, r7, #3
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d02b      	beq.n	8001ce0 <socket+0xdc>
	{
   	switch(protocol)
 8001c88:	1dbb      	adds	r3, r7, #6
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d002      	beq.n	8001c96 <socket+0x92>
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d008      	beq.n	8001ca6 <socket+0xa2>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8001c94:	e024      	b.n	8001ce0 <socket+0xdc>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8001c96:	1cfb      	adds	r3, r7, #3
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	2221      	movs	r2, #33	@ 0x21
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	d11c      	bne.n	8001cda <socket+0xd6>
 8001ca0:	2306      	movs	r3, #6
 8001ca2:	425b      	negs	r3, r3
 8001ca4:	e0d4      	b.n	8001e50 <socket+0x24c>
   	      if(flag & SF_IGMP_VER2)
 8001ca6:	1cfb      	adds	r3, r7, #3
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	2220      	movs	r2, #32
 8001cac:	4013      	ands	r3, r2
 8001cae:	d007      	beq.n	8001cc0 <socket+0xbc>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8001cb0:	1cfb      	adds	r3, r7, #3
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	b25b      	sxtb	r3, r3
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	db02      	blt.n	8001cc0 <socket+0xbc>
 8001cba:	2306      	movs	r3, #6
 8001cbc:	425b      	negs	r3, r3
 8001cbe:	e0c7      	b.n	8001e50 <socket+0x24c>
      	      if(flag & SF_UNI_BLOCK)
 8001cc0:	1cfb      	adds	r3, r7, #3
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	2210      	movs	r2, #16
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	d009      	beq.n	8001cde <socket+0xda>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8001cca:	1cfb      	adds	r3, r7, #3
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	b25b      	sxtb	r3, r3
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	db04      	blt.n	8001cde <socket+0xda>
 8001cd4:	2306      	movs	r3, #6
 8001cd6:	425b      	negs	r3, r3
 8001cd8:	e0ba      	b.n	8001e50 <socket+0x24c>
   	      break;
 8001cda:	46c0      	nop			@ (mov r8, r8)
 8001cdc:	e000      	b.n	8001ce0 <socket+0xdc>
   	      break;
 8001cde:	46c0      	nop			@ (mov r8, r8)
   	}
   }
	close(sn);
 8001ce0:	1dfb      	adds	r3, r7, #7
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	0018      	movs	r0, r3
 8001ce6:	f000 f8c5 	bl	8001e74 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8001cea:	1dfb      	adds	r3, r7, #7
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	00db      	lsls	r3, r3, #3
 8001cf4:	0018      	movs	r0, r3
 8001cf6:	1cfb      	adds	r3, r7, #3
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	b25b      	sxtb	r3, r3
 8001cfc:	220f      	movs	r2, #15
 8001cfe:	4393      	bics	r3, r2
 8001d00:	b25a      	sxtb	r2, r3
 8001d02:	1dbb      	adds	r3, r7, #6
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	b25b      	sxtb	r3, r3
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	b25b      	sxtb	r3, r3
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	0019      	movs	r1, r3
 8001d10:	f000 fdd8 	bl	80028c4 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8001d14:	1d3b      	adds	r3, r7, #4
 8001d16:	881b      	ldrh	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d10f      	bne.n	8001d3c <socket+0x138>
	{
	   port = sock_any_port++;
 8001d1c:	4b4e      	ldr	r3, [pc, #312]	@ (8001e58 <socket+0x254>)
 8001d1e:	881b      	ldrh	r3, [r3, #0]
 8001d20:	1c5a      	adds	r2, r3, #1
 8001d22:	b291      	uxth	r1, r2
 8001d24:	4a4c      	ldr	r2, [pc, #304]	@ (8001e58 <socket+0x254>)
 8001d26:	8011      	strh	r1, [r2, #0]
 8001d28:	1d3a      	adds	r2, r7, #4
 8001d2a:	8013      	strh	r3, [r2, #0]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8001d2c:	4b4a      	ldr	r3, [pc, #296]	@ (8001e58 <socket+0x254>)
 8001d2e:	881b      	ldrh	r3, [r3, #0]
 8001d30:	4a4a      	ldr	r2, [pc, #296]	@ (8001e5c <socket+0x258>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d102      	bne.n	8001d3c <socket+0x138>
 8001d36:	4b48      	ldr	r3, [pc, #288]	@ (8001e58 <socket+0x254>)
 8001d38:	4a49      	ldr	r2, [pc, #292]	@ (8001e60 <socket+0x25c>)
 8001d3a:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8001d3c:	1dfb      	adds	r3, r7, #7
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	3301      	adds	r3, #1
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	2280      	movs	r2, #128	@ 0x80
 8001d48:	00d2      	lsls	r2, r2, #3
 8001d4a:	4694      	mov	ip, r2
 8001d4c:	4463      	add	r3, ip
 8001d4e:	001a      	movs	r2, r3
 8001d50:	1d3b      	adds	r3, r7, #4
 8001d52:	881b      	ldrh	r3, [r3, #0]
 8001d54:	0a1b      	lsrs	r3, r3, #8
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	0019      	movs	r1, r3
 8001d5c:	0010      	movs	r0, r2
 8001d5e:	f000 fdb1 	bl	80028c4 <WIZCHIP_WRITE>
 8001d62:	1dfb      	adds	r3, r7, #7
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	3301      	adds	r3, #1
 8001d6a:	00db      	lsls	r3, r3, #3
 8001d6c:	22a0      	movs	r2, #160	@ 0xa0
 8001d6e:	00d2      	lsls	r2, r2, #3
 8001d70:	4694      	mov	ip, r2
 8001d72:	4463      	add	r3, ip
 8001d74:	001a      	movs	r2, r3
 8001d76:	1d3b      	adds	r3, r7, #4
 8001d78:	881b      	ldrh	r3, [r3, #0]
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	0019      	movs	r1, r3
 8001d7e:	0010      	movs	r0, r2
 8001d80:	f000 fda0 	bl	80028c4 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8001d84:	1dfb      	adds	r3, r7, #7
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	00db      	lsls	r3, r3, #3
 8001d8e:	3301      	adds	r3, #1
 8001d90:	33ff      	adds	r3, #255	@ 0xff
 8001d92:	2101      	movs	r1, #1
 8001d94:	0018      	movs	r0, r3
 8001d96:	f000 fd95 	bl	80028c4 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8001d9a:	46c0      	nop			@ (mov r8, r8)
 8001d9c:	1dfb      	adds	r3, r7, #7
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	3301      	adds	r3, #1
 8001da4:	00db      	lsls	r3, r3, #3
 8001da6:	3301      	adds	r3, #1
 8001da8:	33ff      	adds	r3, #255	@ 0xff
 8001daa:	0018      	movs	r0, r3
 8001dac:	f000 fd38 	bl	8002820 <WIZCHIP_READ>
 8001db0:	1e03      	subs	r3, r0, #0
 8001db2:	d1f3      	bne.n	8001d9c <socket+0x198>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8001db4:	1dfb      	adds	r3, r7, #7
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	2201      	movs	r2, #1
 8001dba:	409a      	lsls	r2, r3
 8001dbc:	0013      	movs	r3, r2
 8001dbe:	b21b      	sxth	r3, r3
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	b21b      	sxth	r3, r3
 8001dc4:	4a27      	ldr	r2, [pc, #156]	@ (8001e64 <socket+0x260>)
 8001dc6:	8812      	ldrh	r2, [r2, #0]
 8001dc8:	b212      	sxth	r2, r2
 8001dca:	4013      	ands	r3, r2
 8001dcc:	b21b      	sxth	r3, r3
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	4b24      	ldr	r3, [pc, #144]	@ (8001e64 <socket+0x260>)
 8001dd2:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8001dd4:	1cfb      	adds	r3, r7, #3
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	401a      	ands	r2, r3
 8001ddc:	1dfb      	adds	r3, r7, #7
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	409a      	lsls	r2, r3
 8001de2:	0013      	movs	r3, r2
 8001de4:	b21a      	sxth	r2, r3
 8001de6:	4b1f      	ldr	r3, [pc, #124]	@ (8001e64 <socket+0x260>)
 8001de8:	881b      	ldrh	r3, [r3, #0]
 8001dea:	b21b      	sxth	r3, r3
 8001dec:	4313      	orrs	r3, r2
 8001dee:	b21b      	sxth	r3, r3
 8001df0:	b29a      	uxth	r2, r3
 8001df2:	4b1c      	ldr	r3, [pc, #112]	@ (8001e64 <socket+0x260>)
 8001df4:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8001df6:	1dfb      	adds	r3, r7, #7
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	409a      	lsls	r2, r3
 8001dfe:	0013      	movs	r3, r2
 8001e00:	b21b      	sxth	r3, r3
 8001e02:	43db      	mvns	r3, r3
 8001e04:	b21b      	sxth	r3, r3
 8001e06:	4a18      	ldr	r2, [pc, #96]	@ (8001e68 <socket+0x264>)
 8001e08:	8812      	ldrh	r2, [r2, #0]
 8001e0a:	b212      	sxth	r2, r2
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	b21b      	sxth	r3, r3
 8001e10:	b29a      	uxth	r2, r3
 8001e12:	4b15      	ldr	r3, [pc, #84]	@ (8001e68 <socket+0x264>)
 8001e14:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8001e16:	1dfb      	adds	r3, r7, #7
 8001e18:	781a      	ldrb	r2, [r3, #0]
 8001e1a:	4b14      	ldr	r3, [pc, #80]	@ (8001e6c <socket+0x268>)
 8001e1c:	0052      	lsls	r2, r2, #1
 8001e1e:	2100      	movs	r1, #0
 8001e20:	52d1      	strh	r1, [r2, r3]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8001e22:	1dfb      	adds	r3, r7, #7
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	4a12      	ldr	r2, [pc, #72]	@ (8001e70 <socket+0x26c>)
 8001e28:	2100      	movs	r1, #0
 8001e2a:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8001e2c:	46c0      	nop			@ (mov r8, r8)
 8001e2e:	1dfb      	adds	r3, r7, #7
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	3301      	adds	r3, #1
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	22c0      	movs	r2, #192	@ 0xc0
 8001e3a:	0092      	lsls	r2, r2, #2
 8001e3c:	4694      	mov	ip, r2
 8001e3e:	4463      	add	r3, ip
 8001e40:	0018      	movs	r0, r3
 8001e42:	f000 fced 	bl	8002820 <WIZCHIP_READ>
 8001e46:	1e03      	subs	r3, r0, #0
 8001e48:	d0f1      	beq.n	8001e2e <socket+0x22a>
   return (int8_t)sn;
 8001e4a:	1dfb      	adds	r3, r7, #7
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	b25b      	sxtb	r3, r3
}	   
 8001e50:	0018      	movs	r0, r3
 8001e52:	46bd      	mov	sp, r7
 8001e54:	b004      	add	sp, #16
 8001e56:	bdb0      	pop	{r4, r5, r7, pc}
 8001e58:	20000010 	.word	0x20000010
 8001e5c:	0000fff0 	.word	0x0000fff0
 8001e60:	ffffc000 	.word	0xffffc000
 8001e64:	200001f4 	.word	0x200001f4
 8001e68:	200001f6 	.word	0x200001f6
 8001e6c:	200001f8 	.word	0x200001f8
 8001e70:	20000208 	.word	0x20000208

08001e74 <close>:

int8_t close(uint8_t sn)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	0002      	movs	r2, r0
 8001e7c:	1dfb      	adds	r3, r7, #7
 8001e7e:	701a      	strb	r2, [r3, #0]
	CHECK_SOCKNUM();
 8001e80:	1dfb      	adds	r3, r7, #7
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	2b08      	cmp	r3, #8
 8001e86:	d902      	bls.n	8001e8e <close+0x1a>
 8001e88:	2301      	movs	r3, #1
 8001e8a:	425b      	negs	r3, r3
 8001e8c:	e05f      	b.n	8001f4e <close+0xda>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8001e8e:	1dfb      	adds	r3, r7, #7
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	3301      	adds	r3, #1
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	3301      	adds	r3, #1
 8001e9a:	33ff      	adds	r3, #255	@ 0xff
 8001e9c:	2110      	movs	r1, #16
 8001e9e:	0018      	movs	r0, r3
 8001ea0:	f000 fd10 	bl	80028c4 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8001ea4:	46c0      	nop			@ (mov r8, r8)
 8001ea6:	1dfb      	adds	r3, r7, #7
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	3301      	adds	r3, #1
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	33ff      	adds	r3, #255	@ 0xff
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	f000 fcb3 	bl	8002820 <WIZCHIP_READ>
 8001eba:	1e03      	subs	r3, r0, #0
 8001ebc:	d1f3      	bne.n	8001ea6 <close+0x32>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8001ebe:	1dfb      	adds	r3, r7, #7
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	2280      	movs	r2, #128	@ 0x80
 8001eca:	0092      	lsls	r2, r2, #2
 8001ecc:	4694      	mov	ip, r2
 8001ece:	4463      	add	r3, ip
 8001ed0:	211f      	movs	r1, #31
 8001ed2:	0018      	movs	r0, r3
 8001ed4:	f000 fcf6 	bl	80028c4 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8001ed8:	1dfb      	adds	r3, r7, #7
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	2201      	movs	r2, #1
 8001ede:	409a      	lsls	r2, r3
 8001ee0:	0013      	movs	r3, r2
 8001ee2:	b21b      	sxth	r3, r3
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	b21b      	sxth	r3, r3
 8001ee8:	4a1b      	ldr	r2, [pc, #108]	@ (8001f58 <close+0xe4>)
 8001eea:	8812      	ldrh	r2, [r2, #0]
 8001eec:	b212      	sxth	r2, r2
 8001eee:	4013      	ands	r3, r2
 8001ef0:	b21b      	sxth	r3, r3
 8001ef2:	b29a      	uxth	r2, r3
 8001ef4:	4b18      	ldr	r3, [pc, #96]	@ (8001f58 <close+0xe4>)
 8001ef6:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8001ef8:	1dfb      	adds	r3, r7, #7
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	2201      	movs	r2, #1
 8001efe:	409a      	lsls	r2, r3
 8001f00:	0013      	movs	r3, r2
 8001f02:	b21b      	sxth	r3, r3
 8001f04:	43db      	mvns	r3, r3
 8001f06:	b21b      	sxth	r3, r3
 8001f08:	4a14      	ldr	r2, [pc, #80]	@ (8001f5c <close+0xe8>)
 8001f0a:	8812      	ldrh	r2, [r2, #0]
 8001f0c:	b212      	sxth	r2, r2
 8001f0e:	4013      	ands	r3, r2
 8001f10:	b21b      	sxth	r3, r3
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	4b11      	ldr	r3, [pc, #68]	@ (8001f5c <close+0xe8>)
 8001f16:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8001f18:	1dfb      	adds	r3, r7, #7
 8001f1a:	781a      	ldrb	r2, [r3, #0]
 8001f1c:	4b10      	ldr	r3, [pc, #64]	@ (8001f60 <close+0xec>)
 8001f1e:	0052      	lsls	r2, r2, #1
 8001f20:	2100      	movs	r1, #0
 8001f22:	52d1      	strh	r1, [r2, r3]
	sock_pack_info[sn] = 0;
 8001f24:	1dfb      	adds	r3, r7, #7
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	4a0e      	ldr	r2, [pc, #56]	@ (8001f64 <close+0xf0>)
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8001f2e:	46c0      	nop			@ (mov r8, r8)
 8001f30:	1dfb      	adds	r3, r7, #7
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	3301      	adds	r3, #1
 8001f38:	00db      	lsls	r3, r3, #3
 8001f3a:	22c0      	movs	r2, #192	@ 0xc0
 8001f3c:	0092      	lsls	r2, r2, #2
 8001f3e:	4694      	mov	ip, r2
 8001f40:	4463      	add	r3, ip
 8001f42:	0018      	movs	r0, r3
 8001f44:	f000 fc6c 	bl	8002820 <WIZCHIP_READ>
 8001f48:	1e03      	subs	r3, r0, #0
 8001f4a:	d1f1      	bne.n	8001f30 <close+0xbc>
	return SOCK_OK;
 8001f4c:	2301      	movs	r3, #1
}
 8001f4e:	0018      	movs	r0, r3
 8001f50:	46bd      	mov	sp, r7
 8001f52:	b002      	add	sp, #8
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	46c0      	nop			@ (mov r8, r8)
 8001f58:	200001f4 	.word	0x200001f4
 8001f5c:	200001f6 	.word	0x200001f6
 8001f60:	200001f8 	.word	0x200001f8
 8001f64:	20000208 	.word	0x20000208

08001f68 <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6039      	str	r1, [r7, #0]
 8001f70:	0011      	movs	r1, r2
 8001f72:	1dfb      	adds	r3, r7, #7
 8001f74:	1c02      	adds	r2, r0, #0
 8001f76:	701a      	strb	r2, [r3, #0]
 8001f78:	1d3b      	adds	r3, r7, #4
 8001f7a:	1c0a      	adds	r2, r1, #0
 8001f7c:	801a      	strh	r2, [r3, #0]
   CHECK_SOCKNUM();
 8001f7e:	1dfb      	adds	r3, r7, #7
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	2b08      	cmp	r3, #8
 8001f84:	d902      	bls.n	8001f8c <connect+0x24>
 8001f86:	2301      	movs	r3, #1
 8001f88:	425b      	negs	r3, r3
 8001f8a:	e0e3      	b.n	8002154 <connect+0x1ec>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001f8c:	1dfb      	adds	r3, r7, #7
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	3301      	adds	r3, #1
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	0018      	movs	r0, r3
 8001f98:	f000 fc42 	bl	8002820 <WIZCHIP_READ>
 8001f9c:	0003      	movs	r3, r0
 8001f9e:	001a      	movs	r2, r3
 8001fa0:	230f      	movs	r3, #15
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d002      	beq.n	8001fae <connect+0x46>
 8001fa8:	2305      	movs	r3, #5
 8001faa:	425b      	negs	r3, r3
 8001fac:	e0d2      	b.n	8002154 <connect+0x1ec>
   CHECK_SOCKINIT();
 8001fae:	1dfb      	adds	r3, r7, #7
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	22c0      	movs	r2, #192	@ 0xc0
 8001fba:	0092      	lsls	r2, r2, #2
 8001fbc:	4694      	mov	ip, r2
 8001fbe:	4463      	add	r3, ip
 8001fc0:	0018      	movs	r0, r3
 8001fc2:	f000 fc2d 	bl	8002820 <WIZCHIP_READ>
 8001fc6:	0003      	movs	r3, r0
 8001fc8:	2b13      	cmp	r3, #19
 8001fca:	d002      	beq.n	8001fd2 <connect+0x6a>
 8001fcc:	2303      	movs	r3, #3
 8001fce:	425b      	negs	r3, r3
 8001fd0:	e0c0      	b.n	8002154 <connect+0x1ec>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	021b      	lsls	r3, r3, #8
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	3201      	adds	r2, #1
 8001fe0:	7812      	ldrb	r2, [r2, #0]
 8001fe2:	189b      	adds	r3, r3, r2
 8001fe4:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	021b      	lsls	r3, r3, #8
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	3202      	adds	r2, #2
 8001fee:	7812      	ldrb	r2, [r2, #0]
 8001ff0:	189b      	adds	r3, r3, r2
 8001ff2:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	021b      	lsls	r3, r3, #8
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	3203      	adds	r2, #3
 8001ffc:	7812      	ldrb	r2, [r2, #0]
 8001ffe:	189b      	adds	r3, r3, r2
 8002000:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	3301      	adds	r3, #1
 8002006:	d002      	beq.n	800200e <connect+0xa6>
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d102      	bne.n	8002014 <connect+0xac>
 800200e:	230c      	movs	r3, #12
 8002010:	425b      	negs	r3, r3
 8002012:	e09f      	b.n	8002154 <connect+0x1ec>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 8002014:	1d3b      	adds	r3, r7, #4
 8002016:	881b      	ldrh	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d102      	bne.n	8002022 <connect+0xba>
 800201c:	230b      	movs	r3, #11
 800201e:	425b      	negs	r3, r3
 8002020:	e098      	b.n	8002154 <connect+0x1ec>
	setSn_DIPR(sn,addr);
 8002022:	1dfb      	adds	r3, r7, #7
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	3301      	adds	r3, #1
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	22c0      	movs	r2, #192	@ 0xc0
 800202e:	0112      	lsls	r2, r2, #4
 8002030:	4694      	mov	ip, r2
 8002032:	4463      	add	r3, ip
 8002034:	0018      	movs	r0, r3
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	2204      	movs	r2, #4
 800203a:	0019      	movs	r1, r3
 800203c:	f000 fd06 	bl	8002a4c <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 8002040:	1dfb      	adds	r3, r7, #7
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	3301      	adds	r3, #1
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	2280      	movs	r2, #128	@ 0x80
 800204c:	0152      	lsls	r2, r2, #5
 800204e:	4694      	mov	ip, r2
 8002050:	4463      	add	r3, ip
 8002052:	001a      	movs	r2, r3
 8002054:	1d3b      	adds	r3, r7, #4
 8002056:	881b      	ldrh	r3, [r3, #0]
 8002058:	0a1b      	lsrs	r3, r3, #8
 800205a:	b29b      	uxth	r3, r3
 800205c:	b2db      	uxtb	r3, r3
 800205e:	0019      	movs	r1, r3
 8002060:	0010      	movs	r0, r2
 8002062:	f000 fc2f 	bl	80028c4 <WIZCHIP_WRITE>
 8002066:	1dfb      	adds	r3, r7, #7
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	3301      	adds	r3, #1
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	2288      	movs	r2, #136	@ 0x88
 8002072:	0152      	lsls	r2, r2, #5
 8002074:	4694      	mov	ip, r2
 8002076:	4463      	add	r3, ip
 8002078:	001a      	movs	r2, r3
 800207a:	1d3b      	adds	r3, r7, #4
 800207c:	881b      	ldrh	r3, [r3, #0]
 800207e:	b2db      	uxtb	r3, r3
 8002080:	0019      	movs	r1, r3
 8002082:	0010      	movs	r0, r2
 8002084:	f000 fc1e 	bl	80028c4 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 8002088:	1dfb      	adds	r3, r7, #7
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	3301      	adds	r3, #1
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	3301      	adds	r3, #1
 8002094:	33ff      	adds	r3, #255	@ 0xff
 8002096:	2104      	movs	r1, #4
 8002098:	0018      	movs	r0, r3
 800209a:	f000 fc13 	bl	80028c4 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800209e:	46c0      	nop			@ (mov r8, r8)
 80020a0:	1dfb      	adds	r3, r7, #7
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	3301      	adds	r3, #1
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	3301      	adds	r3, #1
 80020ac:	33ff      	adds	r3, #255	@ 0xff
 80020ae:	0018      	movs	r0, r3
 80020b0:	f000 fbb6 	bl	8002820 <WIZCHIP_READ>
 80020b4:	1e03      	subs	r3, r0, #0
 80020b6:	d1f3      	bne.n	80020a0 <connect+0x138>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80020b8:	4b28      	ldr	r3, [pc, #160]	@ (800215c <connect+0x1f4>)
 80020ba:	881b      	ldrh	r3, [r3, #0]
 80020bc:	001a      	movs	r2, r3
 80020be:	1dfb      	adds	r3, r7, #7
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	411a      	asrs	r2, r3
 80020c4:	0013      	movs	r3, r2
 80020c6:	2201      	movs	r2, #1
 80020c8:	4013      	ands	r3, r2
 80020ca:	d033      	beq.n	8002134 <connect+0x1cc>
 80020cc:	2300      	movs	r3, #0
 80020ce:	e041      	b.n	8002154 <connect+0x1ec>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 80020d0:	1dfb      	adds	r3, r7, #7
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	3301      	adds	r3, #1
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	2280      	movs	r2, #128	@ 0x80
 80020dc:	0092      	lsls	r2, r2, #2
 80020de:	4694      	mov	ip, r2
 80020e0:	4463      	add	r3, ip
 80020e2:	0018      	movs	r0, r3
 80020e4:	f000 fb9c 	bl	8002820 <WIZCHIP_READ>
 80020e8:	0003      	movs	r3, r0
 80020ea:	001a      	movs	r2, r3
 80020ec:	2308      	movs	r3, #8
 80020ee:	4013      	ands	r3, r2
 80020f0:	d00f      	beq.n	8002112 <connect+0x1aa>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 80020f2:	1dfb      	adds	r3, r7, #7
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	3301      	adds	r3, #1
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	2280      	movs	r2, #128	@ 0x80
 80020fe:	0092      	lsls	r2, r2, #2
 8002100:	4694      	mov	ip, r2
 8002102:	4463      	add	r3, ip
 8002104:	2108      	movs	r1, #8
 8002106:	0018      	movs	r0, r3
 8002108:	f000 fbdc 	bl	80028c4 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 800210c:	230d      	movs	r3, #13
 800210e:	425b      	negs	r3, r3
 8002110:	e020      	b.n	8002154 <connect+0x1ec>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 8002112:	1dfb      	adds	r3, r7, #7
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	3301      	adds	r3, #1
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	22c0      	movs	r2, #192	@ 0xc0
 800211e:	0092      	lsls	r2, r2, #2
 8002120:	4694      	mov	ip, r2
 8002122:	4463      	add	r3, ip
 8002124:	0018      	movs	r0, r3
 8002126:	f000 fb7b 	bl	8002820 <WIZCHIP_READ>
 800212a:	1e03      	subs	r3, r0, #0
 800212c:	d102      	bne.n	8002134 <connect+0x1cc>
		{
			return SOCKERR_SOCKCLOSED;
 800212e:	2304      	movs	r3, #4
 8002130:	425b      	negs	r3, r3
 8002132:	e00f      	b.n	8002154 <connect+0x1ec>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 8002134:	1dfb      	adds	r3, r7, #7
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	3301      	adds	r3, #1
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	22c0      	movs	r2, #192	@ 0xc0
 8002140:	0092      	lsls	r2, r2, #2
 8002142:	4694      	mov	ip, r2
 8002144:	4463      	add	r3, ip
 8002146:	0018      	movs	r0, r3
 8002148:	f000 fb6a 	bl	8002820 <WIZCHIP_READ>
 800214c:	0003      	movs	r3, r0
 800214e:	2b17      	cmp	r3, #23
 8002150:	d1be      	bne.n	80020d0 <connect+0x168>
		}
	}
   
   return SOCK_OK;
 8002152:	2301      	movs	r3, #1
}
 8002154:	0018      	movs	r0, r3
 8002156:	46bd      	mov	sp, r7
 8002158:	b004      	add	sp, #16
 800215a:	bd80      	pop	{r7, pc}
 800215c:	200001f4 	.word	0x200001f4

08002160 <send>:
	}
	return SOCK_OK;
}

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8002160:	b5b0      	push	{r4, r5, r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6039      	str	r1, [r7, #0]
 8002168:	0011      	movs	r1, r2
 800216a:	1dfb      	adds	r3, r7, #7
 800216c:	1c02      	adds	r2, r0, #0
 800216e:	701a      	strb	r2, [r3, #0]
 8002170:	1d3b      	adds	r3, r7, #4
 8002172:	1c0a      	adds	r2, r1, #0
 8002174:	801a      	strh	r2, [r3, #0]
   uint8_t tmp=0;
 8002176:	230f      	movs	r3, #15
 8002178:	18fb      	adds	r3, r7, r3
 800217a:	2200      	movs	r2, #0
 800217c:	701a      	strb	r2, [r3, #0]
   uint16_t freesize=0;
 800217e:	230c      	movs	r3, #12
 8002180:	18fb      	adds	r3, r7, r3
 8002182:	2200      	movs	r2, #0
 8002184:	801a      	strh	r2, [r3, #0]
   
   CHECK_SOCKNUM();
 8002186:	1dfb      	adds	r3, r7, #7
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	2b08      	cmp	r3, #8
 800218c:	d902      	bls.n	8002194 <send+0x34>
 800218e:	2301      	movs	r3, #1
 8002190:	425b      	negs	r3, r3
 8002192:	e113      	b.n	80023bc <send+0x25c>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002194:	1dfb      	adds	r3, r7, #7
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	3301      	adds	r3, #1
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	0018      	movs	r0, r3
 80021a0:	f000 fb3e 	bl	8002820 <WIZCHIP_READ>
 80021a4:	0003      	movs	r3, r0
 80021a6:	001a      	movs	r2, r3
 80021a8:	230f      	movs	r3, #15
 80021aa:	4013      	ands	r3, r2
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d002      	beq.n	80021b6 <send+0x56>
 80021b0:	2305      	movs	r3, #5
 80021b2:	425b      	negs	r3, r3
 80021b4:	e102      	b.n	80023bc <send+0x25c>
   CHECK_SOCKDATA();
 80021b6:	1d3b      	adds	r3, r7, #4
 80021b8:	881b      	ldrh	r3, [r3, #0]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d102      	bne.n	80021c4 <send+0x64>
 80021be:	230e      	movs	r3, #14
 80021c0:	425b      	negs	r3, r3
 80021c2:	e0fb      	b.n	80023bc <send+0x25c>
   tmp = getSn_SR(sn);
 80021c4:	1dfb      	adds	r3, r7, #7
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	3301      	adds	r3, #1
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	22c0      	movs	r2, #192	@ 0xc0
 80021d0:	0092      	lsls	r2, r2, #2
 80021d2:	4694      	mov	ip, r2
 80021d4:	4463      	add	r3, ip
 80021d6:	250f      	movs	r5, #15
 80021d8:	197c      	adds	r4, r7, r5
 80021da:	0018      	movs	r0, r3
 80021dc:	f000 fb20 	bl	8002820 <WIZCHIP_READ>
 80021e0:	0003      	movs	r3, r0
 80021e2:	7023      	strb	r3, [r4, #0]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 80021e4:	197b      	adds	r3, r7, r5
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	2b17      	cmp	r3, #23
 80021ea:	d006      	beq.n	80021fa <send+0x9a>
 80021ec:	197b      	adds	r3, r7, r5
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	2b1c      	cmp	r3, #28
 80021f2:	d002      	beq.n	80021fa <send+0x9a>
 80021f4:	2307      	movs	r3, #7
 80021f6:	425b      	negs	r3, r3
 80021f8:	e0e0      	b.n	80023bc <send+0x25c>
   if( sock_is_sending & (1<<sn) )
 80021fa:	4b72      	ldr	r3, [pc, #456]	@ (80023c4 <send+0x264>)
 80021fc:	881b      	ldrh	r3, [r3, #0]
 80021fe:	001a      	movs	r2, r3
 8002200:	1dfb      	adds	r3, r7, #7
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	411a      	asrs	r2, r3
 8002206:	0013      	movs	r3, r2
 8002208:	2201      	movs	r2, #1
 800220a:	4013      	ands	r3, r2
 800220c:	d045      	beq.n	800229a <send+0x13a>
   {
      tmp = getSn_IR(sn);
 800220e:	1dfb      	adds	r3, r7, #7
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	3301      	adds	r3, #1
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	2280      	movs	r2, #128	@ 0x80
 800221a:	0092      	lsls	r2, r2, #2
 800221c:	4694      	mov	ip, r2
 800221e:	4463      	add	r3, ip
 8002220:	0018      	movs	r0, r3
 8002222:	f000 fafd 	bl	8002820 <WIZCHIP_READ>
 8002226:	0003      	movs	r3, r0
 8002228:	0019      	movs	r1, r3
 800222a:	200f      	movs	r0, #15
 800222c:	183b      	adds	r3, r7, r0
 800222e:	221f      	movs	r2, #31
 8002230:	400a      	ands	r2, r1
 8002232:	701a      	strb	r2, [r3, #0]
      if(tmp & Sn_IR_SENDOK)
 8002234:	183b      	adds	r3, r7, r0
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	2210      	movs	r2, #16
 800223a:	4013      	ands	r3, r2
 800223c:	d01d      	beq.n	800227a <send+0x11a>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 800223e:	1dfb      	adds	r3, r7, #7
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	3301      	adds	r3, #1
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	2280      	movs	r2, #128	@ 0x80
 800224a:	0092      	lsls	r2, r2, #2
 800224c:	4694      	mov	ip, r2
 800224e:	4463      	add	r3, ip
 8002250:	2110      	movs	r1, #16
 8002252:	0018      	movs	r0, r3
 8002254:	f000 fb36 	bl	80028c4 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8002258:	1dfb      	adds	r3, r7, #7
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	2201      	movs	r2, #1
 800225e:	409a      	lsls	r2, r3
 8002260:	0013      	movs	r3, r2
 8002262:	b21b      	sxth	r3, r3
 8002264:	43db      	mvns	r3, r3
 8002266:	b21b      	sxth	r3, r3
 8002268:	4a56      	ldr	r2, [pc, #344]	@ (80023c4 <send+0x264>)
 800226a:	8812      	ldrh	r2, [r2, #0]
 800226c:	b212      	sxth	r2, r2
 800226e:	4013      	ands	r3, r2
 8002270:	b21b      	sxth	r3, r3
 8002272:	b29a      	uxth	r2, r3
 8002274:	4b53      	ldr	r3, [pc, #332]	@ (80023c4 <send+0x264>)
 8002276:	801a      	strh	r2, [r3, #0]
 8002278:	e00f      	b.n	800229a <send+0x13a>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 800227a:	230f      	movs	r3, #15
 800227c:	18fb      	adds	r3, r7, r3
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	2208      	movs	r2, #8
 8002282:	4013      	ands	r3, r2
 8002284:	d007      	beq.n	8002296 <send+0x136>
      {
         close(sn);
 8002286:	1dfb      	adds	r3, r7, #7
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	0018      	movs	r0, r3
 800228c:	f7ff fdf2 	bl	8001e74 <close>
         return SOCKERR_TIMEOUT;
 8002290:	230d      	movs	r3, #13
 8002292:	425b      	negs	r3, r3
 8002294:	e092      	b.n	80023bc <send+0x25c>
      }
      else return SOCK_BUSY;
 8002296:	2300      	movs	r3, #0
 8002298:	e090      	b.n	80023bc <send+0x25c>
   }
   freesize = getSn_TxMAX(sn);
 800229a:	1dfb      	adds	r3, r7, #7
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	3301      	adds	r3, #1
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	22f8      	movs	r2, #248	@ 0xf8
 80022a6:	0152      	lsls	r2, r2, #5
 80022a8:	4694      	mov	ip, r2
 80022aa:	4463      	add	r3, ip
 80022ac:	0018      	movs	r0, r3
 80022ae:	f000 fab7 	bl	8002820 <WIZCHIP_READ>
 80022b2:	0003      	movs	r3, r0
 80022b4:	001a      	movs	r2, r3
 80022b6:	210c      	movs	r1, #12
 80022b8:	187b      	adds	r3, r7, r1
 80022ba:	0292      	lsls	r2, r2, #10
 80022bc:	801a      	strh	r2, [r3, #0]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 80022be:	1d3a      	adds	r2, r7, #4
 80022c0:	187b      	adds	r3, r7, r1
 80022c2:	8812      	ldrh	r2, [r2, #0]
 80022c4:	881b      	ldrh	r3, [r3, #0]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d903      	bls.n	80022d2 <send+0x172>
 80022ca:	1d3b      	adds	r3, r7, #4
 80022cc:	187a      	adds	r2, r7, r1
 80022ce:	8812      	ldrh	r2, [r2, #0]
 80022d0:	801a      	strh	r2, [r3, #0]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 80022d2:	230c      	movs	r3, #12
 80022d4:	18fc      	adds	r4, r7, r3
 80022d6:	1dfb      	adds	r3, r7, #7
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	0018      	movs	r0, r3
 80022dc:	f000 fc24 	bl	8002b28 <getSn_TX_FSR>
 80022e0:	0003      	movs	r3, r0
 80022e2:	8023      	strh	r3, [r4, #0]
      tmp = getSn_SR(sn);
 80022e4:	1dfb      	adds	r3, r7, #7
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	3301      	adds	r3, #1
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	22c0      	movs	r2, #192	@ 0xc0
 80022f0:	0092      	lsls	r2, r2, #2
 80022f2:	4694      	mov	ip, r2
 80022f4:	4463      	add	r3, ip
 80022f6:	250f      	movs	r5, #15
 80022f8:	197c      	adds	r4, r7, r5
 80022fa:	0018      	movs	r0, r3
 80022fc:	f000 fa90 	bl	8002820 <WIZCHIP_READ>
 8002300:	0003      	movs	r3, r0
 8002302:	7023      	strb	r3, [r4, #0]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8002304:	197b      	adds	r3, r7, r5
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	2b17      	cmp	r3, #23
 800230a:	d00b      	beq.n	8002324 <send+0x1c4>
 800230c:	197b      	adds	r3, r7, r5
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	2b1c      	cmp	r3, #28
 8002312:	d007      	beq.n	8002324 <send+0x1c4>
      {
         close(sn);
 8002314:	1dfb      	adds	r3, r7, #7
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	0018      	movs	r0, r3
 800231a:	f7ff fdab 	bl	8001e74 <close>
         return SOCKERR_SOCKSTATUS;
 800231e:	2307      	movs	r3, #7
 8002320:	425b      	negs	r3, r3
 8002322:	e04b      	b.n	80023bc <send+0x25c>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8002324:	4b28      	ldr	r3, [pc, #160]	@ (80023c8 <send+0x268>)
 8002326:	881b      	ldrh	r3, [r3, #0]
 8002328:	001a      	movs	r2, r3
 800232a:	1dfb      	adds	r3, r7, #7
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	411a      	asrs	r2, r3
 8002330:	0013      	movs	r3, r2
 8002332:	2201      	movs	r2, #1
 8002334:	4013      	ands	r3, r2
 8002336:	d008      	beq.n	800234a <send+0x1ea>
 8002338:	1d3a      	adds	r2, r7, #4
 800233a:	230c      	movs	r3, #12
 800233c:	18fb      	adds	r3, r7, r3
 800233e:	8812      	ldrh	r2, [r2, #0]
 8002340:	881b      	ldrh	r3, [r3, #0]
 8002342:	429a      	cmp	r2, r3
 8002344:	d901      	bls.n	800234a <send+0x1ea>
 8002346:	2300      	movs	r3, #0
 8002348:	e038      	b.n	80023bc <send+0x25c>
      if(len <= freesize) break;
 800234a:	1d3a      	adds	r2, r7, #4
 800234c:	230c      	movs	r3, #12
 800234e:	18fb      	adds	r3, r7, r3
 8002350:	8812      	ldrh	r2, [r2, #0]
 8002352:	881b      	ldrh	r3, [r3, #0]
 8002354:	429a      	cmp	r2, r3
 8002356:	d900      	bls.n	800235a <send+0x1fa>
      freesize = getSn_TX_FSR(sn);
 8002358:	e7bb      	b.n	80022d2 <send+0x172>
      if(len <= freesize) break;
 800235a:	46c0      	nop			@ (mov r8, r8)
   }
   wiz_send_data(sn, buf, len);
 800235c:	1d3b      	adds	r3, r7, #4
 800235e:	881a      	ldrh	r2, [r3, #0]
 8002360:	6839      	ldr	r1, [r7, #0]
 8002362:	1dfb      	adds	r3, r7, #7
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	0018      	movs	r0, r3
 8002368:	f000 fcb6 	bl	8002cd8 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 800236c:	1dfb      	adds	r3, r7, #7
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	3301      	adds	r3, #1
 8002374:	00db      	lsls	r3, r3, #3
 8002376:	3301      	adds	r3, #1
 8002378:	33ff      	adds	r3, #255	@ 0xff
 800237a:	2120      	movs	r1, #32
 800237c:	0018      	movs	r0, r3
 800237e:	f000 faa1 	bl	80028c4 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8002382:	46c0      	nop			@ (mov r8, r8)
 8002384:	1dfb      	adds	r3, r7, #7
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	3301      	adds	r3, #1
 800238c:	00db      	lsls	r3, r3, #3
 800238e:	3301      	adds	r3, #1
 8002390:	33ff      	adds	r3, #255	@ 0xff
 8002392:	0018      	movs	r0, r3
 8002394:	f000 fa44 	bl	8002820 <WIZCHIP_READ>
 8002398:	1e03      	subs	r3, r0, #0
 800239a:	d1f3      	bne.n	8002384 <send+0x224>
   sock_is_sending |= (1 << sn);
 800239c:	1dfb      	adds	r3, r7, #7
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	2201      	movs	r2, #1
 80023a2:	409a      	lsls	r2, r3
 80023a4:	0013      	movs	r3, r2
 80023a6:	b21a      	sxth	r2, r3
 80023a8:	4b06      	ldr	r3, [pc, #24]	@ (80023c4 <send+0x264>)
 80023aa:	881b      	ldrh	r3, [r3, #0]
 80023ac:	b21b      	sxth	r3, r3
 80023ae:	4313      	orrs	r3, r2
 80023b0:	b21b      	sxth	r3, r3
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	4b03      	ldr	r3, [pc, #12]	@ (80023c4 <send+0x264>)
 80023b6:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80023b8:	1d3b      	adds	r3, r7, #4
 80023ba:	881b      	ldrh	r3, [r3, #0]
}
 80023bc:	0018      	movs	r0, r3
 80023be:	46bd      	mov	sp, r7
 80023c0:	b004      	add	sp, #16
 80023c2:	bdb0      	pop	{r4, r5, r7, pc}
 80023c4:	200001f6 	.word	0x200001f6
 80023c8:	200001f4 	.word	0x200001f4

080023cc <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80023cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6039      	str	r1, [r7, #0]
 80023d4:	0011      	movs	r1, r2
 80023d6:	1dfb      	adds	r3, r7, #7
 80023d8:	1c02      	adds	r2, r0, #0
 80023da:	701a      	strb	r2, [r3, #0]
 80023dc:	1d3b      	adds	r3, r7, #4
 80023de:	1c0a      	adds	r2, r1, #0
 80023e0:	801a      	strh	r2, [r3, #0]
   uint8_t  tmp = 0;
 80023e2:	230f      	movs	r3, #15
 80023e4:	18fb      	adds	r3, r7, r3
 80023e6:	2200      	movs	r2, #0
 80023e8:	701a      	strb	r2, [r3, #0]
   uint16_t recvsize = 0;
 80023ea:	230c      	movs	r3, #12
 80023ec:	18fb      	adds	r3, r7, r3
 80023ee:	2200      	movs	r2, #0
 80023f0:	801a      	strh	r2, [r3, #0]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 80023f2:	1dfb      	adds	r3, r7, #7
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	2b08      	cmp	r3, #8
 80023f8:	d902      	bls.n	8002400 <recv+0x34>
 80023fa:	2301      	movs	r3, #1
 80023fc:	425b      	negs	r3, r3
 80023fe:	e0c6      	b.n	800258e <recv+0x1c2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002400:	1dfb      	adds	r3, r7, #7
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	3301      	adds	r3, #1
 8002408:	00db      	lsls	r3, r3, #3
 800240a:	0018      	movs	r0, r3
 800240c:	f000 fa08 	bl	8002820 <WIZCHIP_READ>
 8002410:	0003      	movs	r3, r0
 8002412:	001a      	movs	r2, r3
 8002414:	230f      	movs	r3, #15
 8002416:	4013      	ands	r3, r2
 8002418:	2b01      	cmp	r3, #1
 800241a:	d002      	beq.n	8002422 <recv+0x56>
 800241c:	2305      	movs	r3, #5
 800241e:	425b      	negs	r3, r3
 8002420:	e0b5      	b.n	800258e <recv+0x1c2>
   CHECK_SOCKDATA();
 8002422:	1d3b      	adds	r3, r7, #4
 8002424:	881b      	ldrh	r3, [r3, #0]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d102      	bne.n	8002430 <recv+0x64>
 800242a:	230e      	movs	r3, #14
 800242c:	425b      	negs	r3, r3
 800242e:	e0ae      	b.n	800258e <recv+0x1c2>
   
   recvsize = getSn_RxMAX(sn);
 8002430:	1dfb      	adds	r3, r7, #7
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	3301      	adds	r3, #1
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	22f0      	movs	r2, #240	@ 0xf0
 800243c:	0152      	lsls	r2, r2, #5
 800243e:	4694      	mov	ip, r2
 8002440:	4463      	add	r3, ip
 8002442:	0018      	movs	r0, r3
 8002444:	f000 f9ec 	bl	8002820 <WIZCHIP_READ>
 8002448:	0003      	movs	r3, r0
 800244a:	001a      	movs	r2, r3
 800244c:	210c      	movs	r1, #12
 800244e:	187b      	adds	r3, r7, r1
 8002450:	0292      	lsls	r2, r2, #10
 8002452:	801a      	strh	r2, [r3, #0]
   if(recvsize < len) len = recvsize;
 8002454:	187a      	adds	r2, r7, r1
 8002456:	1d3b      	adds	r3, r7, #4
 8002458:	8812      	ldrh	r2, [r2, #0]
 800245a:	881b      	ldrh	r3, [r3, #0]
 800245c:	429a      	cmp	r2, r3
 800245e:	d203      	bcs.n	8002468 <recv+0x9c>
 8002460:	1d3b      	adds	r3, r7, #4
 8002462:	187a      	adds	r2, r7, r1
 8002464:	8812      	ldrh	r2, [r2, #0]
 8002466:	801a      	strh	r2, [r3, #0]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8002468:	260c      	movs	r6, #12
 800246a:	19bc      	adds	r4, r7, r6
 800246c:	1dfb      	adds	r3, r7, #7
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	0018      	movs	r0, r3
 8002472:	f000 fbc5 	bl	8002c00 <getSn_RX_RSR>
 8002476:	0003      	movs	r3, r0
 8002478:	8023      	strh	r3, [r4, #0]
         tmp = getSn_SR(sn);
 800247a:	1dfb      	adds	r3, r7, #7
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	3301      	adds	r3, #1
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	22c0      	movs	r2, #192	@ 0xc0
 8002486:	0092      	lsls	r2, r2, #2
 8002488:	4694      	mov	ip, r2
 800248a:	4463      	add	r3, ip
 800248c:	250f      	movs	r5, #15
 800248e:	197c      	adds	r4, r7, r5
 8002490:	0018      	movs	r0, r3
 8002492:	f000 f9c5 	bl	8002820 <WIZCHIP_READ>
 8002496:	0003      	movs	r3, r0
 8002498:	7023      	strb	r3, [r4, #0]
         if (tmp != SOCK_ESTABLISHED)
 800249a:	197b      	adds	r3, r7, r5
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	2b17      	cmp	r3, #23
 80024a0:	d02e      	beq.n	8002500 <recv+0x134>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 80024a2:	197b      	adds	r3, r7, r5
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	2b1c      	cmp	r3, #28
 80024a8:	d122      	bne.n	80024f0 <recv+0x124>
            {
               if(recvsize != 0) break;
 80024aa:	19bb      	adds	r3, r7, r6
 80024ac:	881b      	ldrh	r3, [r3, #0]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d13d      	bne.n	800252e <recv+0x162>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 80024b2:	1dfb      	adds	r3, r7, #7
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	0018      	movs	r0, r3
 80024b8:	f000 fb36 	bl	8002b28 <getSn_TX_FSR>
 80024bc:	0003      	movs	r3, r0
 80024be:	001c      	movs	r4, r3
 80024c0:	1dfb      	adds	r3, r7, #7
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	3301      	adds	r3, #1
 80024c8:	00db      	lsls	r3, r3, #3
 80024ca:	22f8      	movs	r2, #248	@ 0xf8
 80024cc:	0152      	lsls	r2, r2, #5
 80024ce:	4694      	mov	ip, r2
 80024d0:	4463      	add	r3, ip
 80024d2:	0018      	movs	r0, r3
 80024d4:	f000 f9a4 	bl	8002820 <WIZCHIP_READ>
 80024d8:	0003      	movs	r3, r0
 80024da:	029b      	lsls	r3, r3, #10
 80024dc:	429c      	cmp	r4, r3
 80024de:	d10f      	bne.n	8002500 <recv+0x134>
               {
                  close(sn);
 80024e0:	1dfb      	adds	r3, r7, #7
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	0018      	movs	r0, r3
 80024e6:	f7ff fcc5 	bl	8001e74 <close>
                  return SOCKERR_SOCKSTATUS;
 80024ea:	2307      	movs	r3, #7
 80024ec:	425b      	negs	r3, r3
 80024ee:	e04e      	b.n	800258e <recv+0x1c2>
               }
            }
            else
            {
               close(sn);
 80024f0:	1dfb      	adds	r3, r7, #7
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	0018      	movs	r0, r3
 80024f6:	f7ff fcbd 	bl	8001e74 <close>
               return SOCKERR_SOCKSTATUS;
 80024fa:	2307      	movs	r3, #7
 80024fc:	425b      	negs	r3, r3
 80024fe:	e046      	b.n	800258e <recv+0x1c2>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8002500:	4b25      	ldr	r3, [pc, #148]	@ (8002598 <recv+0x1cc>)
 8002502:	881b      	ldrh	r3, [r3, #0]
 8002504:	001a      	movs	r2, r3
 8002506:	1dfb      	adds	r3, r7, #7
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	411a      	asrs	r2, r3
 800250c:	0013      	movs	r3, r2
 800250e:	2201      	movs	r2, #1
 8002510:	4013      	ands	r3, r2
 8002512:	d006      	beq.n	8002522 <recv+0x156>
 8002514:	230c      	movs	r3, #12
 8002516:	18fb      	adds	r3, r7, r3
 8002518:	881b      	ldrh	r3, [r3, #0]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <recv+0x156>
 800251e:	2300      	movs	r3, #0
 8002520:	e035      	b.n	800258e <recv+0x1c2>
         if(recvsize != 0) break;
 8002522:	230c      	movs	r3, #12
 8002524:	18fb      	adds	r3, r7, r3
 8002526:	881b      	ldrh	r3, [r3, #0]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d102      	bne.n	8002532 <recv+0x166>
         recvsize = getSn_RX_RSR(sn);
 800252c:	e79c      	b.n	8002468 <recv+0x9c>
               if(recvsize != 0) break;
 800252e:	46c0      	nop			@ (mov r8, r8)
 8002530:	e000      	b.n	8002534 <recv+0x168>
         if(recvsize != 0) break;
 8002532:	46c0      	nop			@ (mov r8, r8)
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8002534:	210c      	movs	r1, #12
 8002536:	187a      	adds	r2, r7, r1
 8002538:	1d3b      	adds	r3, r7, #4
 800253a:	8812      	ldrh	r2, [r2, #0]
 800253c:	881b      	ldrh	r3, [r3, #0]
 800253e:	429a      	cmp	r2, r3
 8002540:	d203      	bcs.n	800254a <recv+0x17e>
 8002542:	1d3b      	adds	r3, r7, #4
 8002544:	187a      	adds	r2, r7, r1
 8002546:	8812      	ldrh	r2, [r2, #0]
 8002548:	801a      	strh	r2, [r3, #0]
   wiz_recv_data(sn, buf, len);
 800254a:	1d3b      	adds	r3, r7, #4
 800254c:	881a      	ldrh	r2, [r3, #0]
 800254e:	6839      	ldr	r1, [r7, #0]
 8002550:	1dfb      	adds	r3, r7, #7
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	0018      	movs	r0, r3
 8002556:	f000 fc36 	bl	8002dc6 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 800255a:	1dfb      	adds	r3, r7, #7
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	3301      	adds	r3, #1
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	3301      	adds	r3, #1
 8002566:	33ff      	adds	r3, #255	@ 0xff
 8002568:	2140      	movs	r1, #64	@ 0x40
 800256a:	0018      	movs	r0, r3
 800256c:	f000 f9aa 	bl	80028c4 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8002570:	46c0      	nop			@ (mov r8, r8)
 8002572:	1dfb      	adds	r3, r7, #7
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	3301      	adds	r3, #1
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	3301      	adds	r3, #1
 800257e:	33ff      	adds	r3, #255	@ 0xff
 8002580:	0018      	movs	r0, r3
 8002582:	f000 f94d 	bl	8002820 <WIZCHIP_READ>
 8002586:	1e03      	subs	r3, r0, #0
 8002588:	d1f3      	bne.n	8002572 <recv+0x1a6>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800258a:	1d3b      	adds	r3, r7, #4
 800258c:	881b      	ldrh	r3, [r3, #0]
}
 800258e:	0018      	movs	r0, r3
 8002590:	46bd      	mov	sp, r7
 8002592:	b005      	add	sp, #20
 8002594:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002596:	46c0      	nop			@ (mov r8, r8)
 8002598:	200001f4 	.word	0x200001f4

0800259c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025a2:	4b0f      	ldr	r3, [pc, #60]	@ (80025e0 <HAL_MspInit+0x44>)
 80025a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80025a6:	4b0e      	ldr	r3, [pc, #56]	@ (80025e0 <HAL_MspInit+0x44>)
 80025a8:	2101      	movs	r1, #1
 80025aa:	430a      	orrs	r2, r1
 80025ac:	641a      	str	r2, [r3, #64]	@ 0x40
 80025ae:	4b0c      	ldr	r3, [pc, #48]	@ (80025e0 <HAL_MspInit+0x44>)
 80025b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b2:	2201      	movs	r2, #1
 80025b4:	4013      	ands	r3, r2
 80025b6:	607b      	str	r3, [r7, #4]
 80025b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025ba:	4b09      	ldr	r3, [pc, #36]	@ (80025e0 <HAL_MspInit+0x44>)
 80025bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80025be:	4b08      	ldr	r3, [pc, #32]	@ (80025e0 <HAL_MspInit+0x44>)
 80025c0:	2180      	movs	r1, #128	@ 0x80
 80025c2:	0549      	lsls	r1, r1, #21
 80025c4:	430a      	orrs	r2, r1
 80025c6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80025c8:	4b05      	ldr	r3, [pc, #20]	@ (80025e0 <HAL_MspInit+0x44>)
 80025ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80025cc:	2380      	movs	r3, #128	@ 0x80
 80025ce:	055b      	lsls	r3, r3, #21
 80025d0:	4013      	ands	r3, r2
 80025d2:	603b      	str	r3, [r7, #0]
 80025d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025d6:	46c0      	nop			@ (mov r8, r8)
 80025d8:	46bd      	mov	sp, r7
 80025da:	b002      	add	sp, #8
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	46c0      	nop			@ (mov r8, r8)
 80025e0:	40021000 	.word	0x40021000

080025e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025e4:	b590      	push	{r4, r7, lr}
 80025e6:	b095      	sub	sp, #84	@ 0x54
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ec:	233c      	movs	r3, #60	@ 0x3c
 80025ee:	18fb      	adds	r3, r7, r3
 80025f0:	0018      	movs	r0, r3
 80025f2:	2314      	movs	r3, #20
 80025f4:	001a      	movs	r2, r3
 80025f6:	2100      	movs	r1, #0
 80025f8:	f004 fa0a 	bl	8006a10 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025fc:	2414      	movs	r4, #20
 80025fe:	193b      	adds	r3, r7, r4
 8002600:	0018      	movs	r0, r3
 8002602:	2328      	movs	r3, #40	@ 0x28
 8002604:	001a      	movs	r2, r3
 8002606:	2100      	movs	r1, #0
 8002608:	f004 fa02 	bl	8006a10 <memset>
  if(hi2c->Instance==I2C1)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a22      	ldr	r2, [pc, #136]	@ (800269c <HAL_I2C_MspInit+0xb8>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d13d      	bne.n	8002692 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002616:	193b      	adds	r3, r7, r4
 8002618:	2220      	movs	r2, #32
 800261a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800261c:	193b      	adds	r3, r7, r4
 800261e:	2200      	movs	r2, #0
 8002620:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002622:	193b      	adds	r3, r7, r4
 8002624:	0018      	movs	r0, r3
 8002626:	f002 fe37 	bl	8005298 <HAL_RCCEx_PeriphCLKConfig>
 800262a:	1e03      	subs	r3, r0, #0
 800262c:	d001      	beq.n	8002632 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800262e:	f7ff fae3 	bl	8001bf8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002632:	4b1b      	ldr	r3, [pc, #108]	@ (80026a0 <HAL_I2C_MspInit+0xbc>)
 8002634:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002636:	4b1a      	ldr	r3, [pc, #104]	@ (80026a0 <HAL_I2C_MspInit+0xbc>)
 8002638:	2102      	movs	r1, #2
 800263a:	430a      	orrs	r2, r1
 800263c:	635a      	str	r2, [r3, #52]	@ 0x34
 800263e:	4b18      	ldr	r3, [pc, #96]	@ (80026a0 <HAL_I2C_MspInit+0xbc>)
 8002640:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002642:	2202      	movs	r2, #2
 8002644:	4013      	ands	r3, r2
 8002646:	613b      	str	r3, [r7, #16]
 8002648:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800264a:	213c      	movs	r1, #60	@ 0x3c
 800264c:	187b      	adds	r3, r7, r1
 800264e:	22c0      	movs	r2, #192	@ 0xc0
 8002650:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002652:	187b      	adds	r3, r7, r1
 8002654:	2212      	movs	r2, #18
 8002656:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002658:	187b      	adds	r3, r7, r1
 800265a:	2200      	movs	r2, #0
 800265c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800265e:	187b      	adds	r3, r7, r1
 8002660:	2200      	movs	r2, #0
 8002662:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8002664:	187b      	adds	r3, r7, r1
 8002666:	2206      	movs	r2, #6
 8002668:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800266a:	187b      	adds	r3, r7, r1
 800266c:	4a0d      	ldr	r2, [pc, #52]	@ (80026a4 <HAL_I2C_MspInit+0xc0>)
 800266e:	0019      	movs	r1, r3
 8002670:	0010      	movs	r0, r2
 8002672:	f000 fff9 	bl	8003668 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002676:	4b0a      	ldr	r3, [pc, #40]	@ (80026a0 <HAL_I2C_MspInit+0xbc>)
 8002678:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800267a:	4b09      	ldr	r3, [pc, #36]	@ (80026a0 <HAL_I2C_MspInit+0xbc>)
 800267c:	2180      	movs	r1, #128	@ 0x80
 800267e:	0389      	lsls	r1, r1, #14
 8002680:	430a      	orrs	r2, r1
 8002682:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002684:	4b06      	ldr	r3, [pc, #24]	@ (80026a0 <HAL_I2C_MspInit+0xbc>)
 8002686:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002688:	2380      	movs	r3, #128	@ 0x80
 800268a:	039b      	lsls	r3, r3, #14
 800268c:	4013      	ands	r3, r2
 800268e:	60fb      	str	r3, [r7, #12]
 8002690:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002692:	46c0      	nop			@ (mov r8, r8)
 8002694:	46bd      	mov	sp, r7
 8002696:	b015      	add	sp, #84	@ 0x54
 8002698:	bd90      	pop	{r4, r7, pc}
 800269a:	46c0      	nop			@ (mov r8, r8)
 800269c:	40005400 	.word	0x40005400
 80026a0:	40021000 	.word	0x40021000
 80026a4:	50000400 	.word	0x50000400

080026a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80026a8:	b590      	push	{r4, r7, lr}
 80026aa:	b08b      	sub	sp, #44	@ 0x2c
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b0:	2414      	movs	r4, #20
 80026b2:	193b      	adds	r3, r7, r4
 80026b4:	0018      	movs	r0, r3
 80026b6:	2314      	movs	r3, #20
 80026b8:	001a      	movs	r2, r3
 80026ba:	2100      	movs	r1, #0
 80026bc:	f004 f9a8 	bl	8006a10 <memset>
  if(hspi->Instance==SPI1)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a1b      	ldr	r2, [pc, #108]	@ (8002734 <HAL_SPI_MspInit+0x8c>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d130      	bne.n	800272c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80026ca:	4b1b      	ldr	r3, [pc, #108]	@ (8002738 <HAL_SPI_MspInit+0x90>)
 80026cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002738 <HAL_SPI_MspInit+0x90>)
 80026d0:	2180      	movs	r1, #128	@ 0x80
 80026d2:	0149      	lsls	r1, r1, #5
 80026d4:	430a      	orrs	r2, r1
 80026d6:	641a      	str	r2, [r3, #64]	@ 0x40
 80026d8:	4b17      	ldr	r3, [pc, #92]	@ (8002738 <HAL_SPI_MspInit+0x90>)
 80026da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026dc:	2380      	movs	r3, #128	@ 0x80
 80026de:	015b      	lsls	r3, r3, #5
 80026e0:	4013      	ands	r3, r2
 80026e2:	613b      	str	r3, [r7, #16]
 80026e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026e6:	4b14      	ldr	r3, [pc, #80]	@ (8002738 <HAL_SPI_MspInit+0x90>)
 80026e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026ea:	4b13      	ldr	r3, [pc, #76]	@ (8002738 <HAL_SPI_MspInit+0x90>)
 80026ec:	2101      	movs	r1, #1
 80026ee:	430a      	orrs	r2, r1
 80026f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80026f2:	4b11      	ldr	r3, [pc, #68]	@ (8002738 <HAL_SPI_MspInit+0x90>)
 80026f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026f6:	2201      	movs	r2, #1
 80026f8:	4013      	ands	r3, r2
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA2     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6;
 80026fe:	0021      	movs	r1, r4
 8002700:	187b      	adds	r3, r7, r1
 8002702:	2246      	movs	r2, #70	@ 0x46
 8002704:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002706:	187b      	adds	r3, r7, r1
 8002708:	2202      	movs	r2, #2
 800270a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270c:	187b      	adds	r3, r7, r1
 800270e:	2200      	movs	r2, #0
 8002710:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002712:	187b      	adds	r3, r7, r1
 8002714:	2200      	movs	r2, #0
 8002716:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002718:	187b      	adds	r3, r7, r1
 800271a:	2200      	movs	r2, #0
 800271c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800271e:	187a      	adds	r2, r7, r1
 8002720:	23a0      	movs	r3, #160	@ 0xa0
 8002722:	05db      	lsls	r3, r3, #23
 8002724:	0011      	movs	r1, r2
 8002726:	0018      	movs	r0, r3
 8002728:	f000 ff9e 	bl	8003668 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800272c:	46c0      	nop			@ (mov r8, r8)
 800272e:	46bd      	mov	sp, r7
 8002730:	b00b      	add	sp, #44	@ 0x2c
 8002732:	bd90      	pop	{r4, r7, pc}
 8002734:	40013000 	.word	0x40013000
 8002738:	40021000 	.word	0x40021000

0800273c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	2380      	movs	r3, #128	@ 0x80
 800274a:	05db      	lsls	r3, r3, #23
 800274c:	429a      	cmp	r2, r3
 800274e:	d10b      	bne.n	8002768 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002750:	4b07      	ldr	r3, [pc, #28]	@ (8002770 <HAL_TIM_Base_MspInit+0x34>)
 8002752:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002754:	4b06      	ldr	r3, [pc, #24]	@ (8002770 <HAL_TIM_Base_MspInit+0x34>)
 8002756:	2101      	movs	r1, #1
 8002758:	430a      	orrs	r2, r1
 800275a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800275c:	4b04      	ldr	r3, [pc, #16]	@ (8002770 <HAL_TIM_Base_MspInit+0x34>)
 800275e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002760:	2201      	movs	r2, #1
 8002762:	4013      	ands	r3, r2
 8002764:	60fb      	str	r3, [r7, #12]
 8002766:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002768:	46c0      	nop			@ (mov r8, r8)
 800276a:	46bd      	mov	sp, r7
 800276c:	b004      	add	sp, #16
 800276e:	bd80      	pop	{r7, pc}
 8002770:	40021000 	.word	0x40021000

08002774 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002778:	46c0      	nop			@ (mov r8, r8)
 800277a:	e7fd      	b.n	8002778 <NMI_Handler+0x4>

0800277c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002780:	46c0      	nop			@ (mov r8, r8)
 8002782:	e7fd      	b.n	8002780 <HardFault_Handler+0x4>

08002784 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002788:	46c0      	nop			@ (mov r8, r8)
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002792:	46c0      	nop			@ (mov r8, r8)
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800279c:	f000 fe70 	bl	8003480 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027a0:	46c0      	nop			@ (mov r8, r8)
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
	...

080027a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027b0:	4a14      	ldr	r2, [pc, #80]	@ (8002804 <_sbrk+0x5c>)
 80027b2:	4b15      	ldr	r3, [pc, #84]	@ (8002808 <_sbrk+0x60>)
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027bc:	4b13      	ldr	r3, [pc, #76]	@ (800280c <_sbrk+0x64>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d102      	bne.n	80027ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027c4:	4b11      	ldr	r3, [pc, #68]	@ (800280c <_sbrk+0x64>)
 80027c6:	4a12      	ldr	r2, [pc, #72]	@ (8002810 <_sbrk+0x68>)
 80027c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027ca:	4b10      	ldr	r3, [pc, #64]	@ (800280c <_sbrk+0x64>)
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	18d3      	adds	r3, r2, r3
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d207      	bcs.n	80027e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027d8:	f004 f922 	bl	8006a20 <__errno>
 80027dc:	0003      	movs	r3, r0
 80027de:	220c      	movs	r2, #12
 80027e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027e2:	2301      	movs	r3, #1
 80027e4:	425b      	negs	r3, r3
 80027e6:	e009      	b.n	80027fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027e8:	4b08      	ldr	r3, [pc, #32]	@ (800280c <_sbrk+0x64>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027ee:	4b07      	ldr	r3, [pc, #28]	@ (800280c <_sbrk+0x64>)
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	18d2      	adds	r2, r2, r3
 80027f6:	4b05      	ldr	r3, [pc, #20]	@ (800280c <_sbrk+0x64>)
 80027f8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80027fa:	68fb      	ldr	r3, [r7, #12]
}
 80027fc:	0018      	movs	r0, r3
 80027fe:	46bd      	mov	sp, r7
 8002800:	b006      	add	sp, #24
 8002802:	bd80      	pop	{r7, pc}
 8002804:	20002000 	.word	0x20002000
 8002808:	00000400 	.word	0x00000400
 800280c:	20000210 	.word	0x20000210
 8002810:	20000368 	.word	0x20000368

08002814 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002818:	46c0      	nop			@ (mov r8, r8)
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
	...

08002820 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8002820:	b5b0      	push	{r4, r5, r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8002828:	4b25      	ldr	r3, [pc, #148]	@ (80028c0 <WIZCHIP_READ+0xa0>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	4798      	blx	r3
   WIZCHIP.CS._select();
 800282e:	4b24      	ldr	r3, [pc, #144]	@ (80028c0 <WIZCHIP_READ+0xa0>)
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002834:	4b22      	ldr	r3, [pc, #136]	@ (80028c0 <WIZCHIP_READ+0xa0>)
 8002836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002838:	2b00      	cmp	r3, #0
 800283a:	d003      	beq.n	8002844 <WIZCHIP_READ+0x24>
 800283c:	4b20      	ldr	r3, [pc, #128]	@ (80028c0 <WIZCHIP_READ+0xa0>)
 800283e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002840:	2b00      	cmp	r3, #0
 8002842:	d114      	bne.n	800286e <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002844:	4b1e      	ldr	r3, [pc, #120]	@ (80028c0 <WIZCHIP_READ+0xa0>)
 8002846:	6a1b      	ldr	r3, [r3, #32]
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	0c12      	lsrs	r2, r2, #16
 800284c:	b2d2      	uxtb	r2, r2
 800284e:	0010      	movs	r0, r2
 8002850:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002852:	4b1b      	ldr	r3, [pc, #108]	@ (80028c0 <WIZCHIP_READ+0xa0>)
 8002854:	6a1b      	ldr	r3, [r3, #32]
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	0a12      	lsrs	r2, r2, #8
 800285a:	b2d2      	uxtb	r2, r2
 800285c:	0010      	movs	r0, r2
 800285e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002860:	4b17      	ldr	r3, [pc, #92]	@ (80028c0 <WIZCHIP_READ+0xa0>)
 8002862:	6a1b      	ldr	r3, [r3, #32]
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	b2d2      	uxtb	r2, r2
 8002868:	0010      	movs	r0, r2
 800286a:	4798      	blx	r3
 800286c:	e014      	b.n	8002898 <WIZCHIP_READ+0x78>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	0c1b      	lsrs	r3, r3, #16
 8002872:	b2da      	uxtb	r2, r3
 8002874:	210c      	movs	r1, #12
 8002876:	187b      	adds	r3, r7, r1
 8002878:	701a      	strb	r2, [r3, #0]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	0a1b      	lsrs	r3, r3, #8
 800287e:	b2da      	uxtb	r2, r3
 8002880:	187b      	adds	r3, r7, r1
 8002882:	705a      	strb	r2, [r3, #1]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	b2da      	uxtb	r2, r3
 8002888:	187b      	adds	r3, r7, r1
 800288a:	709a      	strb	r2, [r3, #2]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800288c:	4b0c      	ldr	r3, [pc, #48]	@ (80028c0 <WIZCHIP_READ+0xa0>)
 800288e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002890:	187a      	adds	r2, r7, r1
 8002892:	2103      	movs	r1, #3
 8002894:	0010      	movs	r0, r2
 8002896:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8002898:	4b09      	ldr	r3, [pc, #36]	@ (80028c0 <WIZCHIP_READ+0xa0>)
 800289a:	69db      	ldr	r3, [r3, #28]
 800289c:	250f      	movs	r5, #15
 800289e:	197c      	adds	r4, r7, r5
 80028a0:	4798      	blx	r3
 80028a2:	0003      	movs	r3, r0
 80028a4:	7023      	strb	r3, [r4, #0]

   WIZCHIP.CS._deselect();
 80028a6:	4b06      	ldr	r3, [pc, #24]	@ (80028c0 <WIZCHIP_READ+0xa0>)
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80028ac:	4b04      	ldr	r3, [pc, #16]	@ (80028c0 <WIZCHIP_READ+0xa0>)
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	4798      	blx	r3
   return ret;
 80028b2:	197b      	adds	r3, r7, r5
 80028b4:	781b      	ldrb	r3, [r3, #0]
}
 80028b6:	0018      	movs	r0, r3
 80028b8:	46bd      	mov	sp, r7
 80028ba:	b004      	add	sp, #16
 80028bc:	bdb0      	pop	{r4, r5, r7, pc}
 80028be:	46c0      	nop			@ (mov r8, r8)
 80028c0:	20000018 	.word	0x20000018

080028c4 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	000a      	movs	r2, r1
 80028ce:	1cfb      	adds	r3, r7, #3
 80028d0:	701a      	strb	r2, [r3, #0]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 80028d2:	4b26      	ldr	r3, [pc, #152]	@ (800296c <WIZCHIP_WRITE+0xa8>)
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	4798      	blx	r3
   WIZCHIP.CS._select();
 80028d8:	4b24      	ldr	r3, [pc, #144]	@ (800296c <WIZCHIP_WRITE+0xa8>)
 80028da:	695b      	ldr	r3, [r3, #20]
 80028dc:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2204      	movs	r2, #4
 80028e2:	4313      	orrs	r3, r2
 80028e4:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80028e6:	4b21      	ldr	r3, [pc, #132]	@ (800296c <WIZCHIP_WRITE+0xa8>)
 80028e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d11a      	bne.n	8002924 <WIZCHIP_WRITE+0x60>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80028ee:	4b1f      	ldr	r3, [pc, #124]	@ (800296c <WIZCHIP_WRITE+0xa8>)
 80028f0:	6a1b      	ldr	r3, [r3, #32]
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	0c12      	lsrs	r2, r2, #16
 80028f6:	b2d2      	uxtb	r2, r2
 80028f8:	0010      	movs	r0, r2
 80028fa:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80028fc:	4b1b      	ldr	r3, [pc, #108]	@ (800296c <WIZCHIP_WRITE+0xa8>)
 80028fe:	6a1b      	ldr	r3, [r3, #32]
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	0a12      	lsrs	r2, r2, #8
 8002904:	b2d2      	uxtb	r2, r2
 8002906:	0010      	movs	r0, r2
 8002908:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800290a:	4b18      	ldr	r3, [pc, #96]	@ (800296c <WIZCHIP_WRITE+0xa8>)
 800290c:	6a1b      	ldr	r3, [r3, #32]
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	b2d2      	uxtb	r2, r2
 8002912:	0010      	movs	r0, r2
 8002914:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8002916:	4b15      	ldr	r3, [pc, #84]	@ (800296c <WIZCHIP_WRITE+0xa8>)
 8002918:	6a1b      	ldr	r3, [r3, #32]
 800291a:	1cfa      	adds	r2, r7, #3
 800291c:	7812      	ldrb	r2, [r2, #0]
 800291e:	0010      	movs	r0, r2
 8002920:	4798      	blx	r3
 8002922:	e018      	b.n	8002956 <WIZCHIP_WRITE+0x92>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	0c1b      	lsrs	r3, r3, #16
 8002928:	b2da      	uxtb	r2, r3
 800292a:	210c      	movs	r1, #12
 800292c:	187b      	adds	r3, r7, r1
 800292e:	701a      	strb	r2, [r3, #0]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	0a1b      	lsrs	r3, r3, #8
 8002934:	b2da      	uxtb	r2, r3
 8002936:	187b      	adds	r3, r7, r1
 8002938:	705a      	strb	r2, [r3, #1]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	b2da      	uxtb	r2, r3
 800293e:	187b      	adds	r3, r7, r1
 8002940:	709a      	strb	r2, [r3, #2]
		spi_data[3] = wb;
 8002942:	187b      	adds	r3, r7, r1
 8002944:	1cfa      	adds	r2, r7, #3
 8002946:	7812      	ldrb	r2, [r2, #0]
 8002948:	70da      	strb	r2, [r3, #3]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 800294a:	4b08      	ldr	r3, [pc, #32]	@ (800296c <WIZCHIP_WRITE+0xa8>)
 800294c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800294e:	187a      	adds	r2, r7, r1
 8002950:	2104      	movs	r1, #4
 8002952:	0010      	movs	r0, r2
 8002954:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8002956:	4b05      	ldr	r3, [pc, #20]	@ (800296c <WIZCHIP_WRITE+0xa8>)
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800295c:	4b03      	ldr	r3, [pc, #12]	@ (800296c <WIZCHIP_WRITE+0xa8>)
 800295e:	691b      	ldr	r3, [r3, #16]
 8002960:	4798      	blx	r3
}
 8002962:	46c0      	nop			@ (mov r8, r8)
 8002964:	46bd      	mov	sp, r7
 8002966:	b004      	add	sp, #16
 8002968:	bd80      	pop	{r7, pc}
 800296a:	46c0      	nop			@ (mov r8, r8)
 800296c:	20000018 	.word	0x20000018

08002970 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8002970:	b5b0      	push	{r4, r5, r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	1dbb      	adds	r3, r7, #6
 800297c:	801a      	strh	r2, [r3, #0]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800297e:	4b32      	ldr	r3, [pc, #200]	@ (8002a48 <WIZCHIP_READ_BUF+0xd8>)
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002984:	4b30      	ldr	r3, [pc, #192]	@ (8002a48 <WIZCHIP_READ_BUF+0xd8>)
 8002986:	695b      	ldr	r3, [r3, #20]
 8002988:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800298a:	4b2f      	ldr	r3, [pc, #188]	@ (8002a48 <WIZCHIP_READ_BUF+0xd8>)
 800298c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800298e:	2b00      	cmp	r3, #0
 8002990:	d003      	beq.n	800299a <WIZCHIP_READ_BUF+0x2a>
 8002992:	4b2d      	ldr	r3, [pc, #180]	@ (8002a48 <WIZCHIP_READ_BUF+0xd8>)
 8002994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002996:	2b00      	cmp	r3, #0
 8002998:	d12f      	bne.n	80029fa <WIZCHIP_READ_BUF+0x8a>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800299a:	4b2b      	ldr	r3, [pc, #172]	@ (8002a48 <WIZCHIP_READ_BUF+0xd8>)
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	0c12      	lsrs	r2, r2, #16
 80029a2:	b2d2      	uxtb	r2, r2
 80029a4:	0010      	movs	r0, r2
 80029a6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80029a8:	4b27      	ldr	r3, [pc, #156]	@ (8002a48 <WIZCHIP_READ_BUF+0xd8>)
 80029aa:	6a1b      	ldr	r3, [r3, #32]
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	0a12      	lsrs	r2, r2, #8
 80029b0:	b2d2      	uxtb	r2, r2
 80029b2:	0010      	movs	r0, r2
 80029b4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80029b6:	4b24      	ldr	r3, [pc, #144]	@ (8002a48 <WIZCHIP_READ_BUF+0xd8>)
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	b2d2      	uxtb	r2, r2
 80029be:	0010      	movs	r0, r2
 80029c0:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80029c2:	2316      	movs	r3, #22
 80029c4:	18fb      	adds	r3, r7, r3
 80029c6:	2200      	movs	r2, #0
 80029c8:	801a      	strh	r2, [r3, #0]
 80029ca:	e00e      	b.n	80029ea <WIZCHIP_READ_BUF+0x7a>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 80029cc:	4b1e      	ldr	r3, [pc, #120]	@ (8002a48 <WIZCHIP_READ_BUF+0xd8>)
 80029ce:	69db      	ldr	r3, [r3, #28]
 80029d0:	2516      	movs	r5, #22
 80029d2:	197a      	adds	r2, r7, r5
 80029d4:	8812      	ldrh	r2, [r2, #0]
 80029d6:	68b9      	ldr	r1, [r7, #8]
 80029d8:	188c      	adds	r4, r1, r2
 80029da:	4798      	blx	r3
 80029dc:	0003      	movs	r3, r0
 80029de:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 80029e0:	197b      	adds	r3, r7, r5
 80029e2:	881a      	ldrh	r2, [r3, #0]
 80029e4:	197b      	adds	r3, r7, r5
 80029e6:	3201      	adds	r2, #1
 80029e8:	801a      	strh	r2, [r3, #0]
 80029ea:	2316      	movs	r3, #22
 80029ec:	18fa      	adds	r2, r7, r3
 80029ee:	1dbb      	adds	r3, r7, #6
 80029f0:	8812      	ldrh	r2, [r2, #0]
 80029f2:	881b      	ldrh	r3, [r3, #0]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d3e9      	bcc.n	80029cc <WIZCHIP_READ_BUF+0x5c>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80029f8:	e01b      	b.n	8002a32 <WIZCHIP_READ_BUF+0xc2>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	0c1b      	lsrs	r3, r3, #16
 80029fe:	b2da      	uxtb	r2, r3
 8002a00:	2110      	movs	r1, #16
 8002a02:	187b      	adds	r3, r7, r1
 8002a04:	701a      	strb	r2, [r3, #0]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	0a1b      	lsrs	r3, r3, #8
 8002a0a:	b2da      	uxtb	r2, r3
 8002a0c:	187b      	adds	r3, r7, r1
 8002a0e:	705a      	strb	r2, [r3, #1]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	b2da      	uxtb	r2, r3
 8002a14:	187b      	adds	r3, r7, r1
 8002a16:	709a      	strb	r2, [r3, #2]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8002a18:	4b0b      	ldr	r3, [pc, #44]	@ (8002a48 <WIZCHIP_READ_BUF+0xd8>)
 8002a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a1c:	187a      	adds	r2, r7, r1
 8002a1e:	2103      	movs	r1, #3
 8002a20:	0010      	movs	r0, r2
 8002a22:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8002a24:	4b08      	ldr	r3, [pc, #32]	@ (8002a48 <WIZCHIP_READ_BUF+0xd8>)
 8002a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a28:	1dba      	adds	r2, r7, #6
 8002a2a:	8811      	ldrh	r1, [r2, #0]
 8002a2c:	68ba      	ldr	r2, [r7, #8]
 8002a2e:	0010      	movs	r0, r2
 8002a30:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8002a32:	4b05      	ldr	r3, [pc, #20]	@ (8002a48 <WIZCHIP_READ_BUF+0xd8>)
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002a38:	4b03      	ldr	r3, [pc, #12]	@ (8002a48 <WIZCHIP_READ_BUF+0xd8>)
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	4798      	blx	r3
}
 8002a3e:	46c0      	nop			@ (mov r8, r8)
 8002a40:	46bd      	mov	sp, r7
 8002a42:	b006      	add	sp, #24
 8002a44:	bdb0      	pop	{r4, r5, r7, pc}
 8002a46:	46c0      	nop			@ (mov r8, r8)
 8002a48:	20000018 	.word	0x20000018

08002a4c <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8002a4c:	b590      	push	{r4, r7, lr}
 8002a4e:	b087      	sub	sp, #28
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	1dbb      	adds	r3, r7, #6
 8002a58:	801a      	strh	r2, [r3, #0]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8002a5a:	4b32      	ldr	r3, [pc, #200]	@ (8002b24 <WIZCHIP_WRITE_BUF+0xd8>)
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002a60:	4b30      	ldr	r3, [pc, #192]	@ (8002b24 <WIZCHIP_WRITE_BUF+0xd8>)
 8002a62:	695b      	ldr	r3, [r3, #20]
 8002a64:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2204      	movs	r2, #4
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002a6e:	4b2d      	ldr	r3, [pc, #180]	@ (8002b24 <WIZCHIP_WRITE_BUF+0xd8>)
 8002a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d12f      	bne.n	8002ad6 <WIZCHIP_WRITE_BUF+0x8a>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002a76:	4b2b      	ldr	r3, [pc, #172]	@ (8002b24 <WIZCHIP_WRITE_BUF+0xd8>)
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	0c12      	lsrs	r2, r2, #16
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	0010      	movs	r0, r2
 8002a82:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002a84:	4b27      	ldr	r3, [pc, #156]	@ (8002b24 <WIZCHIP_WRITE_BUF+0xd8>)
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	0a12      	lsrs	r2, r2, #8
 8002a8c:	b2d2      	uxtb	r2, r2
 8002a8e:	0010      	movs	r0, r2
 8002a90:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002a92:	4b24      	ldr	r3, [pc, #144]	@ (8002b24 <WIZCHIP_WRITE_BUF+0xd8>)
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	b2d2      	uxtb	r2, r2
 8002a9a:	0010      	movs	r0, r2
 8002a9c:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8002a9e:	2316      	movs	r3, #22
 8002aa0:	18fb      	adds	r3, r7, r3
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	801a      	strh	r2, [r3, #0]
 8002aa6:	e00e      	b.n	8002ac6 <WIZCHIP_WRITE_BUF+0x7a>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8002aa8:	4b1e      	ldr	r3, [pc, #120]	@ (8002b24 <WIZCHIP_WRITE_BUF+0xd8>)
 8002aaa:	6a1b      	ldr	r3, [r3, #32]
 8002aac:	2416      	movs	r4, #22
 8002aae:	193a      	adds	r2, r7, r4
 8002ab0:	8812      	ldrh	r2, [r2, #0]
 8002ab2:	68b9      	ldr	r1, [r7, #8]
 8002ab4:	188a      	adds	r2, r1, r2
 8002ab6:	7812      	ldrb	r2, [r2, #0]
 8002ab8:	0010      	movs	r0, r2
 8002aba:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8002abc:	193b      	adds	r3, r7, r4
 8002abe:	881a      	ldrh	r2, [r3, #0]
 8002ac0:	193b      	adds	r3, r7, r4
 8002ac2:	3201      	adds	r2, #1
 8002ac4:	801a      	strh	r2, [r3, #0]
 8002ac6:	2316      	movs	r3, #22
 8002ac8:	18fa      	adds	r2, r7, r3
 8002aca:	1dbb      	adds	r3, r7, #6
 8002acc:	8812      	ldrh	r2, [r2, #0]
 8002ace:	881b      	ldrh	r3, [r3, #0]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d3e9      	bcc.n	8002aa8 <WIZCHIP_WRITE_BUF+0x5c>
 8002ad4:	e01b      	b.n	8002b0e <WIZCHIP_WRITE_BUF+0xc2>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	0c1b      	lsrs	r3, r3, #16
 8002ada:	b2da      	uxtb	r2, r3
 8002adc:	2110      	movs	r1, #16
 8002ade:	187b      	adds	r3, r7, r1
 8002ae0:	701a      	strb	r2, [r3, #0]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	0a1b      	lsrs	r3, r3, #8
 8002ae6:	b2da      	uxtb	r2, r3
 8002ae8:	187b      	adds	r3, r7, r1
 8002aea:	705a      	strb	r2, [r3, #1]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	b2da      	uxtb	r2, r3
 8002af0:	187b      	adds	r3, r7, r1
 8002af2:	709a      	strb	r2, [r3, #2]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8002af4:	4b0b      	ldr	r3, [pc, #44]	@ (8002b24 <WIZCHIP_WRITE_BUF+0xd8>)
 8002af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002af8:	187a      	adds	r2, r7, r1
 8002afa:	2103      	movs	r1, #3
 8002afc:	0010      	movs	r0, r2
 8002afe:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8002b00:	4b08      	ldr	r3, [pc, #32]	@ (8002b24 <WIZCHIP_WRITE_BUF+0xd8>)
 8002b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b04:	1dba      	adds	r2, r7, #6
 8002b06:	8811      	ldrh	r1, [r2, #0]
 8002b08:	68ba      	ldr	r2, [r7, #8]
 8002b0a:	0010      	movs	r0, r2
 8002b0c:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8002b0e:	4b05      	ldr	r3, [pc, #20]	@ (8002b24 <WIZCHIP_WRITE_BUF+0xd8>)
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002b14:	4b03      	ldr	r3, [pc, #12]	@ (8002b24 <WIZCHIP_WRITE_BUF+0xd8>)
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	4798      	blx	r3
}
 8002b1a:	46c0      	nop			@ (mov r8, r8)
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	b007      	add	sp, #28
 8002b20:	bd90      	pop	{r4, r7, pc}
 8002b22:	46c0      	nop			@ (mov r8, r8)
 8002b24:	20000018 	.word	0x20000018

08002b28 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8002b28:	b5b0      	push	{r4, r5, r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	0002      	movs	r2, r0
 8002b30:	1dfb      	adds	r3, r7, #7
 8002b32:	701a      	strb	r2, [r3, #0]
   uint16_t val=0,val1=0;
 8002b34:	230e      	movs	r3, #14
 8002b36:	18fb      	adds	r3, r7, r3
 8002b38:	2200      	movs	r2, #0
 8002b3a:	801a      	strh	r2, [r3, #0]
 8002b3c:	230c      	movs	r3, #12
 8002b3e:	18fb      	adds	r3, r7, r3
 8002b40:	2200      	movs	r2, #0
 8002b42:	801a      	strh	r2, [r3, #0]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8002b44:	1dfb      	adds	r3, r7, #7
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	2280      	movs	r2, #128	@ 0x80
 8002b50:	0192      	lsls	r2, r2, #6
 8002b52:	4694      	mov	ip, r2
 8002b54:	4463      	add	r3, ip
 8002b56:	0018      	movs	r0, r3
 8002b58:	f7ff fe62 	bl	8002820 <WIZCHIP_READ>
 8002b5c:	0003      	movs	r3, r0
 8002b5e:	001a      	movs	r2, r3
 8002b60:	250c      	movs	r5, #12
 8002b62:	197b      	adds	r3, r7, r5
 8002b64:	801a      	strh	r2, [r3, #0]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8002b66:	197b      	adds	r3, r7, r5
 8002b68:	881b      	ldrh	r3, [r3, #0]
 8002b6a:	021b      	lsls	r3, r3, #8
 8002b6c:	b29c      	uxth	r4, r3
 8002b6e:	1dfb      	adds	r3, r7, #7
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	3301      	adds	r3, #1
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	2284      	movs	r2, #132	@ 0x84
 8002b7a:	0192      	lsls	r2, r2, #6
 8002b7c:	4694      	mov	ip, r2
 8002b7e:	4463      	add	r3, ip
 8002b80:	0018      	movs	r0, r3
 8002b82:	f7ff fe4d 	bl	8002820 <WIZCHIP_READ>
 8002b86:	0003      	movs	r3, r0
 8002b88:	001a      	movs	r2, r3
 8002b8a:	197b      	adds	r3, r7, r5
 8002b8c:	18a2      	adds	r2, r4, r2
 8002b8e:	801a      	strh	r2, [r3, #0]
      if (val1 != 0)
 8002b90:	197b      	adds	r3, r7, r5
 8002b92:	881b      	ldrh	r3, [r3, #0]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d025      	beq.n	8002be4 <getSn_TX_FSR+0xbc>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8002b98:	1dfb      	adds	r3, r7, #7
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	2280      	movs	r2, #128	@ 0x80
 8002ba4:	0192      	lsls	r2, r2, #6
 8002ba6:	4694      	mov	ip, r2
 8002ba8:	4463      	add	r3, ip
 8002baa:	0018      	movs	r0, r3
 8002bac:	f7ff fe38 	bl	8002820 <WIZCHIP_READ>
 8002bb0:	0003      	movs	r3, r0
 8002bb2:	001a      	movs	r2, r3
 8002bb4:	250e      	movs	r5, #14
 8002bb6:	197b      	adds	r3, r7, r5
 8002bb8:	801a      	strh	r2, [r3, #0]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8002bba:	197b      	adds	r3, r7, r5
 8002bbc:	881b      	ldrh	r3, [r3, #0]
 8002bbe:	021b      	lsls	r3, r3, #8
 8002bc0:	b29c      	uxth	r4, r3
 8002bc2:	1dfb      	adds	r3, r7, #7
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	3301      	adds	r3, #1
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	2284      	movs	r2, #132	@ 0x84
 8002bce:	0192      	lsls	r2, r2, #6
 8002bd0:	4694      	mov	ip, r2
 8002bd2:	4463      	add	r3, ip
 8002bd4:	0018      	movs	r0, r3
 8002bd6:	f7ff fe23 	bl	8002820 <WIZCHIP_READ>
 8002bda:	0003      	movs	r3, r0
 8002bdc:	001a      	movs	r2, r3
 8002bde:	197b      	adds	r3, r7, r5
 8002be0:	18a2      	adds	r2, r4, r2
 8002be2:	801a      	strh	r2, [r3, #0]
      }
   }while (val != val1);
 8002be4:	210e      	movs	r1, #14
 8002be6:	187a      	adds	r2, r7, r1
 8002be8:	230c      	movs	r3, #12
 8002bea:	18fb      	adds	r3, r7, r3
 8002bec:	8812      	ldrh	r2, [r2, #0]
 8002bee:	881b      	ldrh	r3, [r3, #0]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d1a7      	bne.n	8002b44 <getSn_TX_FSR+0x1c>
   return val;
 8002bf4:	187b      	adds	r3, r7, r1
 8002bf6:	881b      	ldrh	r3, [r3, #0]
}
 8002bf8:	0018      	movs	r0, r3
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	b004      	add	sp, #16
 8002bfe:	bdb0      	pop	{r4, r5, r7, pc}

08002c00 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8002c00:	b5b0      	push	{r4, r5, r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	0002      	movs	r2, r0
 8002c08:	1dfb      	adds	r3, r7, #7
 8002c0a:	701a      	strb	r2, [r3, #0]
   uint16_t val=0,val1=0;
 8002c0c:	230e      	movs	r3, #14
 8002c0e:	18fb      	adds	r3, r7, r3
 8002c10:	2200      	movs	r2, #0
 8002c12:	801a      	strh	r2, [r3, #0]
 8002c14:	230c      	movs	r3, #12
 8002c16:	18fb      	adds	r3, r7, r3
 8002c18:	2200      	movs	r2, #0
 8002c1a:	801a      	strh	r2, [r3, #0]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8002c1c:	1dfb      	adds	r3, r7, #7
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	3301      	adds	r3, #1
 8002c24:	00db      	lsls	r3, r3, #3
 8002c26:	2298      	movs	r2, #152	@ 0x98
 8002c28:	0192      	lsls	r2, r2, #6
 8002c2a:	4694      	mov	ip, r2
 8002c2c:	4463      	add	r3, ip
 8002c2e:	0018      	movs	r0, r3
 8002c30:	f7ff fdf6 	bl	8002820 <WIZCHIP_READ>
 8002c34:	0003      	movs	r3, r0
 8002c36:	001a      	movs	r2, r3
 8002c38:	250c      	movs	r5, #12
 8002c3a:	197b      	adds	r3, r7, r5
 8002c3c:	801a      	strh	r2, [r3, #0]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8002c3e:	197b      	adds	r3, r7, r5
 8002c40:	881b      	ldrh	r3, [r3, #0]
 8002c42:	021b      	lsls	r3, r3, #8
 8002c44:	b29c      	uxth	r4, r3
 8002c46:	1dfb      	adds	r3, r7, #7
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	229c      	movs	r2, #156	@ 0x9c
 8002c52:	0192      	lsls	r2, r2, #6
 8002c54:	4694      	mov	ip, r2
 8002c56:	4463      	add	r3, ip
 8002c58:	0018      	movs	r0, r3
 8002c5a:	f7ff fde1 	bl	8002820 <WIZCHIP_READ>
 8002c5e:	0003      	movs	r3, r0
 8002c60:	001a      	movs	r2, r3
 8002c62:	197b      	adds	r3, r7, r5
 8002c64:	18a2      	adds	r2, r4, r2
 8002c66:	801a      	strh	r2, [r3, #0]
      if (val1 != 0)
 8002c68:	197b      	adds	r3, r7, r5
 8002c6a:	881b      	ldrh	r3, [r3, #0]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d025      	beq.n	8002cbc <getSn_RX_RSR+0xbc>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8002c70:	1dfb      	adds	r3, r7, #7
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	3301      	adds	r3, #1
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	2298      	movs	r2, #152	@ 0x98
 8002c7c:	0192      	lsls	r2, r2, #6
 8002c7e:	4694      	mov	ip, r2
 8002c80:	4463      	add	r3, ip
 8002c82:	0018      	movs	r0, r3
 8002c84:	f7ff fdcc 	bl	8002820 <WIZCHIP_READ>
 8002c88:	0003      	movs	r3, r0
 8002c8a:	001a      	movs	r2, r3
 8002c8c:	250e      	movs	r5, #14
 8002c8e:	197b      	adds	r3, r7, r5
 8002c90:	801a      	strh	r2, [r3, #0]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8002c92:	197b      	adds	r3, r7, r5
 8002c94:	881b      	ldrh	r3, [r3, #0]
 8002c96:	021b      	lsls	r3, r3, #8
 8002c98:	b29c      	uxth	r4, r3
 8002c9a:	1dfb      	adds	r3, r7, #7
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	229c      	movs	r2, #156	@ 0x9c
 8002ca6:	0192      	lsls	r2, r2, #6
 8002ca8:	4694      	mov	ip, r2
 8002caa:	4463      	add	r3, ip
 8002cac:	0018      	movs	r0, r3
 8002cae:	f7ff fdb7 	bl	8002820 <WIZCHIP_READ>
 8002cb2:	0003      	movs	r3, r0
 8002cb4:	001a      	movs	r2, r3
 8002cb6:	197b      	adds	r3, r7, r5
 8002cb8:	18a2      	adds	r2, r4, r2
 8002cba:	801a      	strh	r2, [r3, #0]
      }
   }while (val != val1);
 8002cbc:	210e      	movs	r1, #14
 8002cbe:	187a      	adds	r2, r7, r1
 8002cc0:	230c      	movs	r3, #12
 8002cc2:	18fb      	adds	r3, r7, r3
 8002cc4:	8812      	ldrh	r2, [r2, #0]
 8002cc6:	881b      	ldrh	r3, [r3, #0]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d1a7      	bne.n	8002c1c <getSn_RX_RSR+0x1c>
   return val;
 8002ccc:	187b      	adds	r3, r7, r1
 8002cce:	881b      	ldrh	r3, [r3, #0]
}
 8002cd0:	0018      	movs	r0, r3
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	b004      	add	sp, #16
 8002cd6:	bdb0      	pop	{r4, r5, r7, pc}

08002cd8 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8002cd8:	b5b0      	push	{r4, r5, r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6039      	str	r1, [r7, #0]
 8002ce0:	0011      	movs	r1, r2
 8002ce2:	1dfb      	adds	r3, r7, #7
 8002ce4:	1c02      	adds	r2, r0, #0
 8002ce6:	701a      	strb	r2, [r3, #0]
 8002ce8:	1d3b      	adds	r3, r7, #4
 8002cea:	1c0a      	adds	r2, r1, #0
 8002cec:	801a      	strh	r2, [r3, #0]
   uint16_t ptr = 0;
 8002cee:	250e      	movs	r5, #14
 8002cf0:	197b      	adds	r3, r7, r5
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	801a      	strh	r2, [r3, #0]
   uint32_t addrsel = 0;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8002cfa:	1d3b      	adds	r3, r7, #4
 8002cfc:	881b      	ldrh	r3, [r3, #0]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d05d      	beq.n	8002dbe <wiz_send_data+0xe6>
   ptr = getSn_TX_WR(sn);
 8002d02:	1dfb      	adds	r3, r7, #7
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	3301      	adds	r3, #1
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	2290      	movs	r2, #144	@ 0x90
 8002d0e:	0192      	lsls	r2, r2, #6
 8002d10:	4694      	mov	ip, r2
 8002d12:	4463      	add	r3, ip
 8002d14:	0018      	movs	r0, r3
 8002d16:	f7ff fd83 	bl	8002820 <WIZCHIP_READ>
 8002d1a:	0003      	movs	r3, r0
 8002d1c:	021b      	lsls	r3, r3, #8
 8002d1e:	b29c      	uxth	r4, r3
 8002d20:	1dfb      	adds	r3, r7, #7
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	3301      	adds	r3, #1
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	2294      	movs	r2, #148	@ 0x94
 8002d2c:	0192      	lsls	r2, r2, #6
 8002d2e:	4694      	mov	ip, r2
 8002d30:	4463      	add	r3, ip
 8002d32:	0018      	movs	r0, r3
 8002d34:	f7ff fd74 	bl	8002820 <WIZCHIP_READ>
 8002d38:	0003      	movs	r3, r0
 8002d3a:	001a      	movs	r2, r3
 8002d3c:	197b      	adds	r3, r7, r5
 8002d3e:	18a2      	adds	r2, r4, r2
 8002d40:	801a      	strh	r2, [r3, #0]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8002d42:	002c      	movs	r4, r5
 8002d44:	197b      	adds	r3, r7, r5
 8002d46:	881b      	ldrh	r3, [r3, #0]
 8002d48:	021b      	lsls	r3, r3, #8
 8002d4a:	1dfa      	adds	r2, r7, #7
 8002d4c:	7812      	ldrb	r2, [r2, #0]
 8002d4e:	0092      	lsls	r2, r2, #2
 8002d50:	3202      	adds	r2, #2
 8002d52:	00d2      	lsls	r2, r2, #3
 8002d54:	189b      	adds	r3, r3, r2
 8002d56:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8002d58:	1d3b      	adds	r3, r7, #4
 8002d5a:	881a      	ldrh	r2, [r3, #0]
 8002d5c:	6839      	ldr	r1, [r7, #0]
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	0018      	movs	r0, r3
 8002d62:	f7ff fe73 	bl	8002a4c <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8002d66:	193b      	adds	r3, r7, r4
 8002d68:	1939      	adds	r1, r7, r4
 8002d6a:	1d3a      	adds	r2, r7, #4
 8002d6c:	8809      	ldrh	r1, [r1, #0]
 8002d6e:	8812      	ldrh	r2, [r2, #0]
 8002d70:	188a      	adds	r2, r1, r2
 8002d72:	801a      	strh	r2, [r3, #0]
   setSn_TX_WR(sn,ptr);
 8002d74:	1dfb      	adds	r3, r7, #7
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	00db      	lsls	r3, r3, #3
 8002d7e:	2290      	movs	r2, #144	@ 0x90
 8002d80:	0192      	lsls	r2, r2, #6
 8002d82:	4694      	mov	ip, r2
 8002d84:	4463      	add	r3, ip
 8002d86:	001a      	movs	r2, r3
 8002d88:	193b      	adds	r3, r7, r4
 8002d8a:	881b      	ldrh	r3, [r3, #0]
 8002d8c:	0a1b      	lsrs	r3, r3, #8
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	0019      	movs	r1, r3
 8002d94:	0010      	movs	r0, r2
 8002d96:	f7ff fd95 	bl	80028c4 <WIZCHIP_WRITE>
 8002d9a:	1dfb      	adds	r3, r7, #7
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	3301      	adds	r3, #1
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	2294      	movs	r2, #148	@ 0x94
 8002da6:	0192      	lsls	r2, r2, #6
 8002da8:	4694      	mov	ip, r2
 8002daa:	4463      	add	r3, ip
 8002dac:	001a      	movs	r2, r3
 8002dae:	193b      	adds	r3, r7, r4
 8002db0:	881b      	ldrh	r3, [r3, #0]
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	0019      	movs	r1, r3
 8002db6:	0010      	movs	r0, r2
 8002db8:	f7ff fd84 	bl	80028c4 <WIZCHIP_WRITE>
 8002dbc:	e000      	b.n	8002dc0 <wiz_send_data+0xe8>
   if(len == 0)  return;
 8002dbe:	46c0      	nop			@ (mov r8, r8)
}
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	b004      	add	sp, #16
 8002dc4:	bdb0      	pop	{r4, r5, r7, pc}

08002dc6 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8002dc6:	b5b0      	push	{r4, r5, r7, lr}
 8002dc8:	b084      	sub	sp, #16
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6039      	str	r1, [r7, #0]
 8002dce:	0011      	movs	r1, r2
 8002dd0:	1dfb      	adds	r3, r7, #7
 8002dd2:	1c02      	adds	r2, r0, #0
 8002dd4:	701a      	strb	r2, [r3, #0]
 8002dd6:	1d3b      	adds	r3, r7, #4
 8002dd8:	1c0a      	adds	r2, r1, #0
 8002dda:	801a      	strh	r2, [r3, #0]
   uint16_t ptr = 0;
 8002ddc:	250e      	movs	r5, #14
 8002dde:	197b      	adds	r3, r7, r5
 8002de0:	2200      	movs	r2, #0
 8002de2:	801a      	strh	r2, [r3, #0]
   uint32_t addrsel = 0;
 8002de4:	2300      	movs	r3, #0
 8002de6:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8002de8:	1d3b      	adds	r3, r7, #4
 8002dea:	881b      	ldrh	r3, [r3, #0]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d05d      	beq.n	8002eac <wiz_recv_data+0xe6>
   ptr = getSn_RX_RD(sn);
 8002df0:	1dfb      	adds	r3, r7, #7
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	3301      	adds	r3, #1
 8002df8:	00db      	lsls	r3, r3, #3
 8002dfa:	22a0      	movs	r2, #160	@ 0xa0
 8002dfc:	0192      	lsls	r2, r2, #6
 8002dfe:	4694      	mov	ip, r2
 8002e00:	4463      	add	r3, ip
 8002e02:	0018      	movs	r0, r3
 8002e04:	f7ff fd0c 	bl	8002820 <WIZCHIP_READ>
 8002e08:	0003      	movs	r3, r0
 8002e0a:	021b      	lsls	r3, r3, #8
 8002e0c:	b29c      	uxth	r4, r3
 8002e0e:	1dfb      	adds	r3, r7, #7
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	3301      	adds	r3, #1
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	22a4      	movs	r2, #164	@ 0xa4
 8002e1a:	0192      	lsls	r2, r2, #6
 8002e1c:	4694      	mov	ip, r2
 8002e1e:	4463      	add	r3, ip
 8002e20:	0018      	movs	r0, r3
 8002e22:	f7ff fcfd 	bl	8002820 <WIZCHIP_READ>
 8002e26:	0003      	movs	r3, r0
 8002e28:	001a      	movs	r2, r3
 8002e2a:	197b      	adds	r3, r7, r5
 8002e2c:	18a2      	adds	r2, r4, r2
 8002e2e:	801a      	strh	r2, [r3, #0]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8002e30:	002c      	movs	r4, r5
 8002e32:	197b      	adds	r3, r7, r5
 8002e34:	881b      	ldrh	r3, [r3, #0]
 8002e36:	021b      	lsls	r3, r3, #8
 8002e38:	1dfa      	adds	r2, r7, #7
 8002e3a:	7812      	ldrb	r2, [r2, #0]
 8002e3c:	0092      	lsls	r2, r2, #2
 8002e3e:	3203      	adds	r2, #3
 8002e40:	00d2      	lsls	r2, r2, #3
 8002e42:	189b      	adds	r3, r3, r2
 8002e44:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8002e46:	1d3b      	adds	r3, r7, #4
 8002e48:	881a      	ldrh	r2, [r3, #0]
 8002e4a:	6839      	ldr	r1, [r7, #0]
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	0018      	movs	r0, r3
 8002e50:	f7ff fd8e 	bl	8002970 <WIZCHIP_READ_BUF>
   ptr += len;
 8002e54:	193b      	adds	r3, r7, r4
 8002e56:	1939      	adds	r1, r7, r4
 8002e58:	1d3a      	adds	r2, r7, #4
 8002e5a:	8809      	ldrh	r1, [r1, #0]
 8002e5c:	8812      	ldrh	r2, [r2, #0]
 8002e5e:	188a      	adds	r2, r1, r2
 8002e60:	801a      	strh	r2, [r3, #0]
   
   setSn_RX_RD(sn,ptr);
 8002e62:	1dfb      	adds	r3, r7, #7
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	3301      	adds	r3, #1
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	22a0      	movs	r2, #160	@ 0xa0
 8002e6e:	0192      	lsls	r2, r2, #6
 8002e70:	4694      	mov	ip, r2
 8002e72:	4463      	add	r3, ip
 8002e74:	001a      	movs	r2, r3
 8002e76:	193b      	adds	r3, r7, r4
 8002e78:	881b      	ldrh	r3, [r3, #0]
 8002e7a:	0a1b      	lsrs	r3, r3, #8
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	0019      	movs	r1, r3
 8002e82:	0010      	movs	r0, r2
 8002e84:	f7ff fd1e 	bl	80028c4 <WIZCHIP_WRITE>
 8002e88:	1dfb      	adds	r3, r7, #7
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	3301      	adds	r3, #1
 8002e90:	00db      	lsls	r3, r3, #3
 8002e92:	22a4      	movs	r2, #164	@ 0xa4
 8002e94:	0192      	lsls	r2, r2, #6
 8002e96:	4694      	mov	ip, r2
 8002e98:	4463      	add	r3, ip
 8002e9a:	001a      	movs	r2, r3
 8002e9c:	193b      	adds	r3, r7, r4
 8002e9e:	881b      	ldrh	r3, [r3, #0]
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	0019      	movs	r1, r3
 8002ea4:	0010      	movs	r0, r2
 8002ea6:	f7ff fd0d 	bl	80028c4 <WIZCHIP_WRITE>
 8002eaa:	e000      	b.n	8002eae <wiz_recv_data+0xe8>
   if(len == 0) return;
 8002eac:	46c0      	nop			@ (mov r8, r8)
}
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	b004      	add	sp, #16
 8002eb2:	bdb0      	pop	{r4, r5, r7, pc}

08002eb4 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	46c0      	nop			@ (mov r8, r8)
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	46c0      	nop			@ (mov r8, r8)
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	46c0      	nop			@ (mov r8, r8)
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	46c0      	nop			@ (mov r8, r8)
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	0018      	movs	r0, r3
 8002eec:	46bd      	mov	sp, r7
 8002eee:	b002      	add	sp, #8
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b082      	sub	sp, #8
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
 8002efa:	000a      	movs	r2, r1
 8002efc:	1cfb      	adds	r3, r7, #3
 8002efe:	701a      	strb	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	1cfa      	adds	r2, r7, #3
 8002f04:	7812      	ldrb	r2, [r2, #0]
 8002f06:	701a      	strb	r2, [r3, #0]
 8002f08:	46c0      	nop			@ (mov r8, r8)
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	b002      	add	sp, #8
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	2300      	movs	r3, #0
 8002f16:	0018      	movs	r0, r3
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	0002      	movs	r2, r0
 8002f24:	1dfb      	adds	r3, r7, #7
 8002f26:	701a      	strb	r2, [r3, #0]
 8002f28:	46c0      	nop			@ (mov r8, r8)
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	b002      	add	sp, #8
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d002      	beq.n	8002f46 <reg_wizchip_cs_cbfunc+0x16>
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d106      	bne.n	8002f54 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8002f46:	4b09      	ldr	r3, [pc, #36]	@ (8002f6c <reg_wizchip_cs_cbfunc+0x3c>)
 8002f48:	4a09      	ldr	r2, [pc, #36]	@ (8002f70 <reg_wizchip_cs_cbfunc+0x40>)
 8002f4a:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8002f4c:	4b07      	ldr	r3, [pc, #28]	@ (8002f6c <reg_wizchip_cs_cbfunc+0x3c>)
 8002f4e:	4a09      	ldr	r2, [pc, #36]	@ (8002f74 <reg_wizchip_cs_cbfunc+0x44>)
 8002f50:	619a      	str	r2, [r3, #24]
 8002f52:	e006      	b.n	8002f62 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8002f54:	4b05      	ldr	r3, [pc, #20]	@ (8002f6c <reg_wizchip_cs_cbfunc+0x3c>)
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8002f5a:	4b04      	ldr	r3, [pc, #16]	@ (8002f6c <reg_wizchip_cs_cbfunc+0x3c>)
 8002f5c:	683a      	ldr	r2, [r7, #0]
 8002f5e:	619a      	str	r2, [r3, #24]
   }
}
 8002f60:	46c0      	nop			@ (mov r8, r8)
 8002f62:	46c0      	nop			@ (mov r8, r8)
 8002f64:	46bd      	mov	sp, r7
 8002f66:	b002      	add	sp, #8
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	46c0      	nop			@ (mov r8, r8)
 8002f6c:	20000018 	.word	0x20000018
 8002f70:	08002ec9 	.word	0x08002ec9
 8002f74:	08002ed3 	.word	0x08002ed3

08002f78 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8002f82:	46c0      	nop			@ (mov r8, r8)
 8002f84:	4b0f      	ldr	r3, [pc, #60]	@ (8002fc4 <reg_wizchip_spi_cbfunc+0x4c>)
 8002f86:	881b      	ldrh	r3, [r3, #0]
 8002f88:	001a      	movs	r2, r3
 8002f8a:	2380      	movs	r3, #128	@ 0x80
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	4013      	ands	r3, r2
 8002f90:	d0f8      	beq.n	8002f84 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d002      	beq.n	8002f9e <reg_wizchip_spi_cbfunc+0x26>
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d106      	bne.n	8002fac <reg_wizchip_spi_cbfunc+0x34>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8002f9e:	4b09      	ldr	r3, [pc, #36]	@ (8002fc4 <reg_wizchip_spi_cbfunc+0x4c>)
 8002fa0:	4a09      	ldr	r2, [pc, #36]	@ (8002fc8 <reg_wizchip_spi_cbfunc+0x50>)
 8002fa2:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8002fa4:	4b07      	ldr	r3, [pc, #28]	@ (8002fc4 <reg_wizchip_spi_cbfunc+0x4c>)
 8002fa6:	4a09      	ldr	r2, [pc, #36]	@ (8002fcc <reg_wizchip_spi_cbfunc+0x54>)
 8002fa8:	621a      	str	r2, [r3, #32]
 8002faa:	e006      	b.n	8002fba <reg_wizchip_spi_cbfunc+0x42>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8002fac:	4b05      	ldr	r3, [pc, #20]	@ (8002fc4 <reg_wizchip_spi_cbfunc+0x4c>)
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8002fb2:	4b04      	ldr	r3, [pc, #16]	@ (8002fc4 <reg_wizchip_spi_cbfunc+0x4c>)
 8002fb4:	683a      	ldr	r2, [r7, #0]
 8002fb6:	621a      	str	r2, [r3, #32]
   }
}
 8002fb8:	46c0      	nop			@ (mov r8, r8)
 8002fba:	46c0      	nop			@ (mov r8, r8)
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	b002      	add	sp, #8
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	46c0      	nop			@ (mov r8, r8)
 8002fc4:	20000018 	.word	0x20000018
 8002fc8:	08002f11 	.word	0x08002f11
 8002fcc:	08002f1d 	.word	0x08002f1d

08002fd0 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8002fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fd2:	b087      	sub	sp, #28
 8002fd4:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8002fd6:	1d39      	adds	r1, r7, #4
 8002fd8:	2390      	movs	r3, #144	@ 0x90
 8002fda:	011b      	lsls	r3, r3, #4
 8002fdc:	2206      	movs	r2, #6
 8002fde:	0018      	movs	r0, r3
 8002fe0:	f7ff fcc6 	bl	8002970 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8002fe4:	2414      	movs	r4, #20
 8002fe6:	1939      	adds	r1, r7, r4
 8002fe8:	2380      	movs	r3, #128	@ 0x80
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	2204      	movs	r2, #4
 8002fee:	0018      	movs	r0, r3
 8002ff0:	f7ff fcbe 	bl	8002970 <WIZCHIP_READ_BUF>
 8002ff4:	2510      	movs	r5, #16
 8002ff6:	1979      	adds	r1, r7, r5
 8002ff8:	23a0      	movs	r3, #160	@ 0xa0
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	2204      	movs	r2, #4
 8002ffe:	0018      	movs	r0, r3
 8003000:	f7ff fcb6 	bl	8002970 <WIZCHIP_READ_BUF>
 8003004:	260c      	movs	r6, #12
 8003006:	19b9      	adds	r1, r7, r6
 8003008:	23f0      	movs	r3, #240	@ 0xf0
 800300a:	011b      	lsls	r3, r3, #4
 800300c:	2204      	movs	r2, #4
 800300e:	0018      	movs	r0, r3
 8003010:	f7ff fcae 	bl	8002970 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8003014:	2180      	movs	r1, #128	@ 0x80
 8003016:	2000      	movs	r0, #0
 8003018:	f7ff fc54 	bl	80028c4 <WIZCHIP_WRITE>
   getMR(); // for delay
 800301c:	2000      	movs	r0, #0
 800301e:	f7ff fbff 	bl	8002820 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8003022:	1d39      	adds	r1, r7, #4
 8003024:	2390      	movs	r3, #144	@ 0x90
 8003026:	011b      	lsls	r3, r3, #4
 8003028:	2206      	movs	r2, #6
 800302a:	0018      	movs	r0, r3
 800302c:	f7ff fd0e 	bl	8002a4c <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8003030:	1939      	adds	r1, r7, r4
 8003032:	2380      	movs	r3, #128	@ 0x80
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	2204      	movs	r2, #4
 8003038:	0018      	movs	r0, r3
 800303a:	f7ff fd07 	bl	8002a4c <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 800303e:	1979      	adds	r1, r7, r5
 8003040:	23a0      	movs	r3, #160	@ 0xa0
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	2204      	movs	r2, #4
 8003046:	0018      	movs	r0, r3
 8003048:	f7ff fd00 	bl	8002a4c <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 800304c:	19b9      	adds	r1, r7, r6
 800304e:	23f0      	movs	r3, #240	@ 0xf0
 8003050:	011b      	lsls	r3, r3, #4
 8003052:	2204      	movs	r2, #4
 8003054:	0018      	movs	r0, r3
 8003056:	f7ff fcf9 	bl	8002a4c <WIZCHIP_WRITE_BUF>
}
 800305a:	46c0      	nop			@ (mov r8, r8)
 800305c:	46bd      	mov	sp, r7
 800305e:	b007      	add	sp, #28
 8003060:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003062 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8003062:	b590      	push	{r4, r7, lr}
 8003064:	b085      	sub	sp, #20
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
 800306a:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 800306c:	240e      	movs	r4, #14
 800306e:	193b      	adds	r3, r7, r4
 8003070:	2200      	movs	r2, #0
 8003072:	701a      	strb	r2, [r3, #0]
   wizchip_sw_reset();
 8003074:	f7ff ffac 	bl	8002fd0 <wizchip_sw_reset>
   if(txsize)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d055      	beq.n	800312a <wizchip_init+0xc8>
   {
      tmp = 0;
 800307e:	193b      	adds	r3, r7, r4
 8003080:	2200      	movs	r2, #0
 8003082:	701a      	strb	r2, [r3, #0]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003084:	230f      	movs	r3, #15
 8003086:	18fb      	adds	r3, r7, r3
 8003088:	2200      	movs	r2, #0
 800308a:	701a      	strb	r2, [r3, #0]
 800308c:	e01e      	b.n	80030cc <wizchip_init+0x6a>
		{
			tmp += txsize[i];
 800308e:	230f      	movs	r3, #15
 8003090:	18fb      	adds	r3, r7, r3
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	b25b      	sxtb	r3, r3
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	18d3      	adds	r3, r2, r3
 800309a:	781a      	ldrb	r2, [r3, #0]
 800309c:	210e      	movs	r1, #14
 800309e:	187b      	adds	r3, r7, r1
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	18d3      	adds	r3, r2, r3
 80030a4:	b2da      	uxtb	r2, r3
 80030a6:	187b      	adds	r3, r7, r1
 80030a8:	701a      	strb	r2, [r3, #0]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 80030aa:	187b      	adds	r3, r7, r1
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	b25b      	sxtb	r3, r3
 80030b0:	2b10      	cmp	r3, #16
 80030b2:	dd02      	ble.n	80030ba <wizchip_init+0x58>
 80030b4:	2301      	movs	r3, #1
 80030b6:	425b      	negs	r3, r3
 80030b8:	e092      	b.n	80031e0 <wizchip_init+0x17e>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80030ba:	210f      	movs	r1, #15
 80030bc:	187b      	adds	r3, r7, r1
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	b25b      	sxtb	r3, r3
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	3301      	adds	r3, #1
 80030c6:	b2da      	uxtb	r2, r3
 80030c8:	187b      	adds	r3, r7, r1
 80030ca:	701a      	strb	r2, [r3, #0]
 80030cc:	220f      	movs	r2, #15
 80030ce:	18bb      	adds	r3, r7, r2
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	b25b      	sxtb	r3, r3
 80030d4:	2b07      	cmp	r3, #7
 80030d6:	ddda      	ble.n	800308e <wizchip_init+0x2c>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80030d8:	18bb      	adds	r3, r7, r2
 80030da:	2200      	movs	r2, #0
 80030dc:	701a      	strb	r2, [r3, #0]
 80030de:	e01e      	b.n	800311e <wizchip_init+0xbc>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 80030e0:	220f      	movs	r2, #15
 80030e2:	18bb      	adds	r3, r7, r2
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	b25b      	sxtb	r3, r3
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	3301      	adds	r3, #1
 80030ec:	00db      	lsls	r3, r3, #3
 80030ee:	21f8      	movs	r1, #248	@ 0xf8
 80030f0:	0149      	lsls	r1, r1, #5
 80030f2:	468c      	mov	ip, r1
 80030f4:	4463      	add	r3, ip
 80030f6:	0018      	movs	r0, r3
 80030f8:	0014      	movs	r4, r2
 80030fa:	18bb      	adds	r3, r7, r2
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	b25b      	sxtb	r3, r3
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	18d3      	adds	r3, r2, r3
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	0019      	movs	r1, r3
 8003108:	f7ff fbdc 	bl	80028c4 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800310c:	0021      	movs	r1, r4
 800310e:	187b      	adds	r3, r7, r1
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	b25b      	sxtb	r3, r3
 8003114:	b2db      	uxtb	r3, r3
 8003116:	3301      	adds	r3, #1
 8003118:	b2da      	uxtb	r2, r3
 800311a:	187b      	adds	r3, r7, r1
 800311c:	701a      	strb	r2, [r3, #0]
 800311e:	230f      	movs	r3, #15
 8003120:	18fb      	adds	r3, r7, r3
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	b25b      	sxtb	r3, r3
 8003126:	2b07      	cmp	r3, #7
 8003128:	ddda      	ble.n	80030e0 <wizchip_init+0x7e>
#endif
		}	
   }

   if(rxsize)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d056      	beq.n	80031de <wizchip_init+0x17c>
   {
      tmp = 0;
 8003130:	230e      	movs	r3, #14
 8003132:	18fb      	adds	r3, r7, r3
 8003134:	2200      	movs	r2, #0
 8003136:	701a      	strb	r2, [r3, #0]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003138:	230f      	movs	r3, #15
 800313a:	18fb      	adds	r3, r7, r3
 800313c:	2200      	movs	r2, #0
 800313e:	701a      	strb	r2, [r3, #0]
 8003140:	e01e      	b.n	8003180 <wizchip_init+0x11e>
		{
			tmp += rxsize[i];
 8003142:	230f      	movs	r3, #15
 8003144:	18fb      	adds	r3, r7, r3
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	b25b      	sxtb	r3, r3
 800314a:	683a      	ldr	r2, [r7, #0]
 800314c:	18d3      	adds	r3, r2, r3
 800314e:	781a      	ldrb	r2, [r3, #0]
 8003150:	210e      	movs	r1, #14
 8003152:	187b      	adds	r3, r7, r1
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	18d3      	adds	r3, r2, r3
 8003158:	b2da      	uxtb	r2, r3
 800315a:	187b      	adds	r3, r7, r1
 800315c:	701a      	strb	r2, [r3, #0]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 800315e:	187b      	adds	r3, r7, r1
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	b25b      	sxtb	r3, r3
 8003164:	2b10      	cmp	r3, #16
 8003166:	dd02      	ble.n	800316e <wizchip_init+0x10c>
 8003168:	2301      	movs	r3, #1
 800316a:	425b      	negs	r3, r3
 800316c:	e038      	b.n	80031e0 <wizchip_init+0x17e>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800316e:	210f      	movs	r1, #15
 8003170:	187b      	adds	r3, r7, r1
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	b25b      	sxtb	r3, r3
 8003176:	b2db      	uxtb	r3, r3
 8003178:	3301      	adds	r3, #1
 800317a:	b2da      	uxtb	r2, r3
 800317c:	187b      	adds	r3, r7, r1
 800317e:	701a      	strb	r2, [r3, #0]
 8003180:	220f      	movs	r2, #15
 8003182:	18bb      	adds	r3, r7, r2
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	b25b      	sxtb	r3, r3
 8003188:	2b07      	cmp	r3, #7
 800318a:	ddda      	ble.n	8003142 <wizchip_init+0xe0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800318c:	18bb      	adds	r3, r7, r2
 800318e:	2200      	movs	r2, #0
 8003190:	701a      	strb	r2, [r3, #0]
 8003192:	e01e      	b.n	80031d2 <wizchip_init+0x170>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8003194:	220f      	movs	r2, #15
 8003196:	18bb      	adds	r3, r7, r2
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	b25b      	sxtb	r3, r3
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	3301      	adds	r3, #1
 80031a0:	00db      	lsls	r3, r3, #3
 80031a2:	21f0      	movs	r1, #240	@ 0xf0
 80031a4:	0149      	lsls	r1, r1, #5
 80031a6:	468c      	mov	ip, r1
 80031a8:	4463      	add	r3, ip
 80031aa:	0018      	movs	r0, r3
 80031ac:	0014      	movs	r4, r2
 80031ae:	18bb      	adds	r3, r7, r2
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	b25b      	sxtb	r3, r3
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	18d3      	adds	r3, r2, r3
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	0019      	movs	r1, r3
 80031bc:	f7ff fb82 	bl	80028c4 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80031c0:	0021      	movs	r1, r4
 80031c2:	187b      	adds	r3, r7, r1
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	b25b      	sxtb	r3, r3
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	3301      	adds	r3, #1
 80031cc:	b2da      	uxtb	r2, r3
 80031ce:	187b      	adds	r3, r7, r1
 80031d0:	701a      	strb	r2, [r3, #0]
 80031d2:	230f      	movs	r3, #15
 80031d4:	18fb      	adds	r3, r7, r3
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	b25b      	sxtb	r3, r3
 80031da:	2b07      	cmp	r3, #7
 80031dc:	ddda      	ble.n	8003194 <wizchip_init+0x132>
#endif
		}
   }
   return 0;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	0018      	movs	r0, r3
 80031e2:	46bd      	mov	sp, r7
 80031e4:	b005      	add	sp, #20
 80031e6:	bd90      	pop	{r4, r7, pc}

080031e8 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 80031e8:	b590      	push	{r4, r7, lr}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 80031ee:	1dfc      	adds	r4, r7, #7
 80031f0:	23b8      	movs	r3, #184	@ 0xb8
 80031f2:	019b      	lsls	r3, r3, #6
 80031f4:	0018      	movs	r0, r3
 80031f6:	f7ff fb13 	bl	8002820 <WIZCHIP_READ>
 80031fa:	0003      	movs	r3, r0
 80031fc:	7023      	strb	r3, [r4, #0]
   tmp &= PHYCFGR_RST;
 80031fe:	1dfb      	adds	r3, r7, #7
 8003200:	1dfa      	adds	r2, r7, #7
 8003202:	7812      	ldrb	r2, [r2, #0]
 8003204:	217f      	movs	r1, #127	@ 0x7f
 8003206:	400a      	ands	r2, r1
 8003208:	701a      	strb	r2, [r3, #0]
   setPHYCFGR(tmp);
 800320a:	1dfb      	adds	r3, r7, #7
 800320c:	781a      	ldrb	r2, [r3, #0]
 800320e:	23b8      	movs	r3, #184	@ 0xb8
 8003210:	019b      	lsls	r3, r3, #6
 8003212:	0011      	movs	r1, r2
 8003214:	0018      	movs	r0, r3
 8003216:	f7ff fb55 	bl	80028c4 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 800321a:	1dfc      	adds	r4, r7, #7
 800321c:	23b8      	movs	r3, #184	@ 0xb8
 800321e:	019b      	lsls	r3, r3, #6
 8003220:	0018      	movs	r0, r3
 8003222:	f7ff fafd 	bl	8002820 <WIZCHIP_READ>
 8003226:	0003      	movs	r3, r0
 8003228:	7023      	strb	r3, [r4, #0]
   tmp |= ~PHYCFGR_RST;
 800322a:	1dfb      	adds	r3, r7, #7
 800322c:	1dfa      	adds	r2, r7, #7
 800322e:	7812      	ldrb	r2, [r2, #0]
 8003230:	2180      	movs	r1, #128	@ 0x80
 8003232:	4249      	negs	r1, r1
 8003234:	430a      	orrs	r2, r1
 8003236:	701a      	strb	r2, [r3, #0]
   setPHYCFGR(tmp);
 8003238:	1dfb      	adds	r3, r7, #7
 800323a:	781a      	ldrb	r2, [r3, #0]
 800323c:	23b8      	movs	r3, #184	@ 0xb8
 800323e:	019b      	lsls	r3, r3, #6
 8003240:	0011      	movs	r1, r2
 8003242:	0018      	movs	r0, r3
 8003244:	f7ff fb3e 	bl	80028c4 <WIZCHIP_WRITE>
}
 8003248:	46c0      	nop			@ (mov r8, r8)
 800324a:	46bd      	mov	sp, r7
 800324c:	b003      	add	sp, #12
 800324e:	bd90      	pop	{r4, r7, pc}

08003250 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8003258:	6879      	ldr	r1, [r7, #4]
 800325a:	2390      	movs	r3, #144	@ 0x90
 800325c:	011b      	lsls	r3, r3, #4
 800325e:	2206      	movs	r2, #6
 8003260:	0018      	movs	r0, r3
 8003262:	f7ff fbf3 	bl	8002a4c <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	330e      	adds	r3, #14
 800326a:	0019      	movs	r1, r3
 800326c:	2380      	movs	r3, #128	@ 0x80
 800326e:	005b      	lsls	r3, r3, #1
 8003270:	2204      	movs	r2, #4
 8003272:	0018      	movs	r0, r3
 8003274:	f7ff fbea 	bl	8002a4c <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	330a      	adds	r3, #10
 800327c:	0019      	movs	r1, r3
 800327e:	23a0      	movs	r3, #160	@ 0xa0
 8003280:	00db      	lsls	r3, r3, #3
 8003282:	2204      	movs	r2, #4
 8003284:	0018      	movs	r0, r3
 8003286:	f7ff fbe1 	bl	8002a4c <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	1d99      	adds	r1, r3, #6
 800328e:	23f0      	movs	r3, #240	@ 0xf0
 8003290:	011b      	lsls	r3, r3, #4
 8003292:	2204      	movs	r2, #4
 8003294:	0018      	movs	r0, r3
 8003296:	f7ff fbd9 	bl	8002a4c <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	7c9a      	ldrb	r2, [r3, #18]
 800329e:	4b0b      	ldr	r3, [pc, #44]	@ (80032cc <wizchip_setnetinfo+0x7c>)
 80032a0:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	7cda      	ldrb	r2, [r3, #19]
 80032a6:	4b09      	ldr	r3, [pc, #36]	@ (80032cc <wizchip_setnetinfo+0x7c>)
 80032a8:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	7d1a      	ldrb	r2, [r3, #20]
 80032ae:	4b07      	ldr	r3, [pc, #28]	@ (80032cc <wizchip_setnetinfo+0x7c>)
 80032b0:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	7d5a      	ldrb	r2, [r3, #21]
 80032b6:	4b05      	ldr	r3, [pc, #20]	@ (80032cc <wizchip_setnetinfo+0x7c>)
 80032b8:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	7d9a      	ldrb	r2, [r3, #22]
 80032be:	4b04      	ldr	r3, [pc, #16]	@ (80032d0 <wizchip_setnetinfo+0x80>)
 80032c0:	701a      	strb	r2, [r3, #0]
}
 80032c2:	46c0      	nop			@ (mov r8, r8)
 80032c4:	46bd      	mov	sp, r7
 80032c6:	b002      	add	sp, #8
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	46c0      	nop			@ (mov r8, r8)
 80032cc:	20000214 	.word	0x20000214
 80032d0:	20000218 	.word	0x20000218

080032d4 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 80032dc:	6879      	ldr	r1, [r7, #4]
 80032de:	2390      	movs	r3, #144	@ 0x90
 80032e0:	011b      	lsls	r3, r3, #4
 80032e2:	2206      	movs	r2, #6
 80032e4:	0018      	movs	r0, r3
 80032e6:	f7ff fb43 	bl	8002970 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	330e      	adds	r3, #14
 80032ee:	0019      	movs	r1, r3
 80032f0:	2380      	movs	r3, #128	@ 0x80
 80032f2:	005b      	lsls	r3, r3, #1
 80032f4:	2204      	movs	r2, #4
 80032f6:	0018      	movs	r0, r3
 80032f8:	f7ff fb3a 	bl	8002970 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	330a      	adds	r3, #10
 8003300:	0019      	movs	r1, r3
 8003302:	23a0      	movs	r3, #160	@ 0xa0
 8003304:	00db      	lsls	r3, r3, #3
 8003306:	2204      	movs	r2, #4
 8003308:	0018      	movs	r0, r3
 800330a:	f7ff fb31 	bl	8002970 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	1d99      	adds	r1, r3, #6
 8003312:	23f0      	movs	r3, #240	@ 0xf0
 8003314:	011b      	lsls	r3, r3, #4
 8003316:	2204      	movs	r2, #4
 8003318:	0018      	movs	r0, r3
 800331a:	f7ff fb29 	bl	8002970 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 800331e:	4b0c      	ldr	r3, [pc, #48]	@ (8003350 <wizchip_getnetinfo+0x7c>)
 8003320:	781a      	ldrb	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8003326:	4b0a      	ldr	r3, [pc, #40]	@ (8003350 <wizchip_getnetinfo+0x7c>)
 8003328:	785a      	ldrb	r2, [r3, #1]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 800332e:	4b08      	ldr	r3, [pc, #32]	@ (8003350 <wizchip_getnetinfo+0x7c>)
 8003330:	789a      	ldrb	r2, [r3, #2]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8003336:	4b06      	ldr	r3, [pc, #24]	@ (8003350 <wizchip_getnetinfo+0x7c>)
 8003338:	78da      	ldrb	r2, [r3, #3]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 800333e:	4b05      	ldr	r3, [pc, #20]	@ (8003354 <wizchip_getnetinfo+0x80>)
 8003340:	781a      	ldrb	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	759a      	strb	r2, [r3, #22]
}
 8003346:	46c0      	nop			@ (mov r8, r8)
 8003348:	46bd      	mov	sp, r7
 800334a:	b002      	add	sp, #8
 800334c:	bd80      	pop	{r7, pc}
 800334e:	46c0      	nop			@ (mov r8, r8)
 8003350:	20000214 	.word	0x20000214
 8003354:	20000218 	.word	0x20000218

08003358 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003358:	480d      	ldr	r0, [pc, #52]	@ (8003390 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800335a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800335c:	f7ff fa5a 	bl	8002814 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003360:	480c      	ldr	r0, [pc, #48]	@ (8003394 <LoopForever+0x6>)
  ldr r1, =_edata
 8003362:	490d      	ldr	r1, [pc, #52]	@ (8003398 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003364:	4a0d      	ldr	r2, [pc, #52]	@ (800339c <LoopForever+0xe>)
  movs r3, #0
 8003366:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003368:	e002      	b.n	8003370 <LoopCopyDataInit>

0800336a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800336a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800336c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800336e:	3304      	adds	r3, #4

08003370 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003370:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003372:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003374:	d3f9      	bcc.n	800336a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003376:	4a0a      	ldr	r2, [pc, #40]	@ (80033a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003378:	4c0a      	ldr	r4, [pc, #40]	@ (80033a4 <LoopForever+0x16>)
  movs r3, #0
 800337a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800337c:	e001      	b.n	8003382 <LoopFillZerobss>

0800337e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800337e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003380:	3204      	adds	r2, #4

08003382 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003382:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003384:	d3fb      	bcc.n	800337e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003386:	f003 fb51 	bl	8006a2c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800338a:	f7fe f92b 	bl	80015e4 <main>

0800338e <LoopForever>:

LoopForever:
  b LoopForever
 800338e:	e7fe      	b.n	800338e <LoopForever>
  ldr   r0, =_estack
 8003390:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003394:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003398:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 800339c:	08007444 	.word	0x08007444
  ldr r2, =_sbss
 80033a0:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 80033a4:	20000368 	.word	0x20000368

080033a8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80033a8:	e7fe      	b.n	80033a8 <ADC1_IRQHandler>
	...

080033ac <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80033b2:	1dfb      	adds	r3, r7, #7
 80033b4:	2200      	movs	r2, #0
 80033b6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033b8:	4b0b      	ldr	r3, [pc, #44]	@ (80033e8 <HAL_Init+0x3c>)
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	4b0a      	ldr	r3, [pc, #40]	@ (80033e8 <HAL_Init+0x3c>)
 80033be:	2180      	movs	r1, #128	@ 0x80
 80033c0:	0049      	lsls	r1, r1, #1
 80033c2:	430a      	orrs	r2, r1
 80033c4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80033c6:	2003      	movs	r0, #3
 80033c8:	f000 f810 	bl	80033ec <HAL_InitTick>
 80033cc:	1e03      	subs	r3, r0, #0
 80033ce:	d003      	beq.n	80033d8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80033d0:	1dfb      	adds	r3, r7, #7
 80033d2:	2201      	movs	r2, #1
 80033d4:	701a      	strb	r2, [r3, #0]
 80033d6:	e001      	b.n	80033dc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80033d8:	f7ff f8e0 	bl	800259c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80033dc:	1dfb      	adds	r3, r7, #7
 80033de:	781b      	ldrb	r3, [r3, #0]
}
 80033e0:	0018      	movs	r0, r3
 80033e2:	46bd      	mov	sp, r7
 80033e4:	b002      	add	sp, #8
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	40022000 	.word	0x40022000

080033ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033ec:	b590      	push	{r4, r7, lr}
 80033ee:	b085      	sub	sp, #20
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80033f4:	230f      	movs	r3, #15
 80033f6:	18fb      	adds	r3, r7, r3
 80033f8:	2200      	movs	r2, #0
 80033fa:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80033fc:	4b1d      	ldr	r3, [pc, #116]	@ (8003474 <HAL_InitTick+0x88>)
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d02b      	beq.n	800345c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003404:	4b1c      	ldr	r3, [pc, #112]	@ (8003478 <HAL_InitTick+0x8c>)
 8003406:	681c      	ldr	r4, [r3, #0]
 8003408:	4b1a      	ldr	r3, [pc, #104]	@ (8003474 <HAL_InitTick+0x88>)
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	0019      	movs	r1, r3
 800340e:	23fa      	movs	r3, #250	@ 0xfa
 8003410:	0098      	lsls	r0, r3, #2
 8003412:	f7fc fe89 	bl	8000128 <__udivsi3>
 8003416:	0003      	movs	r3, r0
 8003418:	0019      	movs	r1, r3
 800341a:	0020      	movs	r0, r4
 800341c:	f7fc fe84 	bl	8000128 <__udivsi3>
 8003420:	0003      	movs	r3, r0
 8003422:	0018      	movs	r0, r3
 8003424:	f000 f913 	bl	800364e <HAL_SYSTICK_Config>
 8003428:	1e03      	subs	r3, r0, #0
 800342a:	d112      	bne.n	8003452 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b03      	cmp	r3, #3
 8003430:	d80a      	bhi.n	8003448 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003432:	6879      	ldr	r1, [r7, #4]
 8003434:	2301      	movs	r3, #1
 8003436:	425b      	negs	r3, r3
 8003438:	2200      	movs	r2, #0
 800343a:	0018      	movs	r0, r3
 800343c:	f000 f8f2 	bl	8003624 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003440:	4b0e      	ldr	r3, [pc, #56]	@ (800347c <HAL_InitTick+0x90>)
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	601a      	str	r2, [r3, #0]
 8003446:	e00d      	b.n	8003464 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003448:	230f      	movs	r3, #15
 800344a:	18fb      	adds	r3, r7, r3
 800344c:	2201      	movs	r2, #1
 800344e:	701a      	strb	r2, [r3, #0]
 8003450:	e008      	b.n	8003464 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003452:	230f      	movs	r3, #15
 8003454:	18fb      	adds	r3, r7, r3
 8003456:	2201      	movs	r2, #1
 8003458:	701a      	strb	r2, [r3, #0]
 800345a:	e003      	b.n	8003464 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800345c:	230f      	movs	r3, #15
 800345e:	18fb      	adds	r3, r7, r3
 8003460:	2201      	movs	r2, #1
 8003462:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003464:	230f      	movs	r3, #15
 8003466:	18fb      	adds	r3, r7, r3
 8003468:	781b      	ldrb	r3, [r3, #0]
}
 800346a:	0018      	movs	r0, r3
 800346c:	46bd      	mov	sp, r7
 800346e:	b005      	add	sp, #20
 8003470:	bd90      	pop	{r4, r7, pc}
 8003472:	46c0      	nop			@ (mov r8, r8)
 8003474:	20000048 	.word	0x20000048
 8003478:	20000014 	.word	0x20000014
 800347c:	20000044 	.word	0x20000044

08003480 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003484:	4b05      	ldr	r3, [pc, #20]	@ (800349c <HAL_IncTick+0x1c>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	001a      	movs	r2, r3
 800348a:	4b05      	ldr	r3, [pc, #20]	@ (80034a0 <HAL_IncTick+0x20>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	18d2      	adds	r2, r2, r3
 8003490:	4b03      	ldr	r3, [pc, #12]	@ (80034a0 <HAL_IncTick+0x20>)
 8003492:	601a      	str	r2, [r3, #0]
}
 8003494:	46c0      	nop			@ (mov r8, r8)
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	46c0      	nop			@ (mov r8, r8)
 800349c:	20000048 	.word	0x20000048
 80034a0:	2000021c 	.word	0x2000021c

080034a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	af00      	add	r7, sp, #0
  return uwTick;
 80034a8:	4b02      	ldr	r3, [pc, #8]	@ (80034b4 <HAL_GetTick+0x10>)
 80034aa:	681b      	ldr	r3, [r3, #0]
}
 80034ac:	0018      	movs	r0, r3
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	46c0      	nop			@ (mov r8, r8)
 80034b4:	2000021c 	.word	0x2000021c

080034b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034c0:	f7ff fff0 	bl	80034a4 <HAL_GetTick>
 80034c4:	0003      	movs	r3, r0
 80034c6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	3301      	adds	r3, #1
 80034d0:	d005      	beq.n	80034de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80034d2:	4b0a      	ldr	r3, [pc, #40]	@ (80034fc <HAL_Delay+0x44>)
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	001a      	movs	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	189b      	adds	r3, r3, r2
 80034dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80034de:	46c0      	nop			@ (mov r8, r8)
 80034e0:	f7ff ffe0 	bl	80034a4 <HAL_GetTick>
 80034e4:	0002      	movs	r2, r0
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d8f7      	bhi.n	80034e0 <HAL_Delay+0x28>
  {
  }
}
 80034f0:	46c0      	nop			@ (mov r8, r8)
 80034f2:	46c0      	nop			@ (mov r8, r8)
 80034f4:	46bd      	mov	sp, r7
 80034f6:	b004      	add	sp, #16
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	46c0      	nop			@ (mov r8, r8)
 80034fc:	20000048 	.word	0x20000048

08003500 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003500:	b590      	push	{r4, r7, lr}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	0002      	movs	r2, r0
 8003508:	6039      	str	r1, [r7, #0]
 800350a:	1dfb      	adds	r3, r7, #7
 800350c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800350e:	1dfb      	adds	r3, r7, #7
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	2b7f      	cmp	r3, #127	@ 0x7f
 8003514:	d828      	bhi.n	8003568 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003516:	4a2f      	ldr	r2, [pc, #188]	@ (80035d4 <__NVIC_SetPriority+0xd4>)
 8003518:	1dfb      	adds	r3, r7, #7
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	b25b      	sxtb	r3, r3
 800351e:	089b      	lsrs	r3, r3, #2
 8003520:	33c0      	adds	r3, #192	@ 0xc0
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	589b      	ldr	r3, [r3, r2]
 8003526:	1dfa      	adds	r2, r7, #7
 8003528:	7812      	ldrb	r2, [r2, #0]
 800352a:	0011      	movs	r1, r2
 800352c:	2203      	movs	r2, #3
 800352e:	400a      	ands	r2, r1
 8003530:	00d2      	lsls	r2, r2, #3
 8003532:	21ff      	movs	r1, #255	@ 0xff
 8003534:	4091      	lsls	r1, r2
 8003536:	000a      	movs	r2, r1
 8003538:	43d2      	mvns	r2, r2
 800353a:	401a      	ands	r2, r3
 800353c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	019b      	lsls	r3, r3, #6
 8003542:	22ff      	movs	r2, #255	@ 0xff
 8003544:	401a      	ands	r2, r3
 8003546:	1dfb      	adds	r3, r7, #7
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	0018      	movs	r0, r3
 800354c:	2303      	movs	r3, #3
 800354e:	4003      	ands	r3, r0
 8003550:	00db      	lsls	r3, r3, #3
 8003552:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003554:	481f      	ldr	r0, [pc, #124]	@ (80035d4 <__NVIC_SetPriority+0xd4>)
 8003556:	1dfb      	adds	r3, r7, #7
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	b25b      	sxtb	r3, r3
 800355c:	089b      	lsrs	r3, r3, #2
 800355e:	430a      	orrs	r2, r1
 8003560:	33c0      	adds	r3, #192	@ 0xc0
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003566:	e031      	b.n	80035cc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003568:	4a1b      	ldr	r2, [pc, #108]	@ (80035d8 <__NVIC_SetPriority+0xd8>)
 800356a:	1dfb      	adds	r3, r7, #7
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	0019      	movs	r1, r3
 8003570:	230f      	movs	r3, #15
 8003572:	400b      	ands	r3, r1
 8003574:	3b08      	subs	r3, #8
 8003576:	089b      	lsrs	r3, r3, #2
 8003578:	3306      	adds	r3, #6
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	18d3      	adds	r3, r2, r3
 800357e:	3304      	adds	r3, #4
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	1dfa      	adds	r2, r7, #7
 8003584:	7812      	ldrb	r2, [r2, #0]
 8003586:	0011      	movs	r1, r2
 8003588:	2203      	movs	r2, #3
 800358a:	400a      	ands	r2, r1
 800358c:	00d2      	lsls	r2, r2, #3
 800358e:	21ff      	movs	r1, #255	@ 0xff
 8003590:	4091      	lsls	r1, r2
 8003592:	000a      	movs	r2, r1
 8003594:	43d2      	mvns	r2, r2
 8003596:	401a      	ands	r2, r3
 8003598:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	019b      	lsls	r3, r3, #6
 800359e:	22ff      	movs	r2, #255	@ 0xff
 80035a0:	401a      	ands	r2, r3
 80035a2:	1dfb      	adds	r3, r7, #7
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	0018      	movs	r0, r3
 80035a8:	2303      	movs	r3, #3
 80035aa:	4003      	ands	r3, r0
 80035ac:	00db      	lsls	r3, r3, #3
 80035ae:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80035b0:	4809      	ldr	r0, [pc, #36]	@ (80035d8 <__NVIC_SetPriority+0xd8>)
 80035b2:	1dfb      	adds	r3, r7, #7
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	001c      	movs	r4, r3
 80035b8:	230f      	movs	r3, #15
 80035ba:	4023      	ands	r3, r4
 80035bc:	3b08      	subs	r3, #8
 80035be:	089b      	lsrs	r3, r3, #2
 80035c0:	430a      	orrs	r2, r1
 80035c2:	3306      	adds	r3, #6
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	18c3      	adds	r3, r0, r3
 80035c8:	3304      	adds	r3, #4
 80035ca:	601a      	str	r2, [r3, #0]
}
 80035cc:	46c0      	nop			@ (mov r8, r8)
 80035ce:	46bd      	mov	sp, r7
 80035d0:	b003      	add	sp, #12
 80035d2:	bd90      	pop	{r4, r7, pc}
 80035d4:	e000e100 	.word	0xe000e100
 80035d8:	e000ed00 	.word	0xe000ed00

080035dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	1e5a      	subs	r2, r3, #1
 80035e8:	2380      	movs	r3, #128	@ 0x80
 80035ea:	045b      	lsls	r3, r3, #17
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d301      	bcc.n	80035f4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035f0:	2301      	movs	r3, #1
 80035f2:	e010      	b.n	8003616 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035f4:	4b0a      	ldr	r3, [pc, #40]	@ (8003620 <SysTick_Config+0x44>)
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	3a01      	subs	r2, #1
 80035fa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035fc:	2301      	movs	r3, #1
 80035fe:	425b      	negs	r3, r3
 8003600:	2103      	movs	r1, #3
 8003602:	0018      	movs	r0, r3
 8003604:	f7ff ff7c 	bl	8003500 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003608:	4b05      	ldr	r3, [pc, #20]	@ (8003620 <SysTick_Config+0x44>)
 800360a:	2200      	movs	r2, #0
 800360c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800360e:	4b04      	ldr	r3, [pc, #16]	@ (8003620 <SysTick_Config+0x44>)
 8003610:	2207      	movs	r2, #7
 8003612:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003614:	2300      	movs	r3, #0
}
 8003616:	0018      	movs	r0, r3
 8003618:	46bd      	mov	sp, r7
 800361a:	b002      	add	sp, #8
 800361c:	bd80      	pop	{r7, pc}
 800361e:	46c0      	nop			@ (mov r8, r8)
 8003620:	e000e010 	.word	0xe000e010

08003624 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	60b9      	str	r1, [r7, #8]
 800362c:	607a      	str	r2, [r7, #4]
 800362e:	210f      	movs	r1, #15
 8003630:	187b      	adds	r3, r7, r1
 8003632:	1c02      	adds	r2, r0, #0
 8003634:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003636:	68ba      	ldr	r2, [r7, #8]
 8003638:	187b      	adds	r3, r7, r1
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	b25b      	sxtb	r3, r3
 800363e:	0011      	movs	r1, r2
 8003640:	0018      	movs	r0, r3
 8003642:	f7ff ff5d 	bl	8003500 <__NVIC_SetPriority>
}
 8003646:	46c0      	nop			@ (mov r8, r8)
 8003648:	46bd      	mov	sp, r7
 800364a:	b004      	add	sp, #16
 800364c:	bd80      	pop	{r7, pc}

0800364e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b082      	sub	sp, #8
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	0018      	movs	r0, r3
 800365a:	f7ff ffbf 	bl	80035dc <SysTick_Config>
 800365e:	0003      	movs	r3, r0
}
 8003660:	0018      	movs	r0, r3
 8003662:	46bd      	mov	sp, r7
 8003664:	b002      	add	sp, #8
 8003666:	bd80      	pop	{r7, pc}

08003668 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003672:	2300      	movs	r3, #0
 8003674:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003676:	e147      	b.n	8003908 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2101      	movs	r1, #1
 800367e:	697a      	ldr	r2, [r7, #20]
 8003680:	4091      	lsls	r1, r2
 8003682:	000a      	movs	r2, r1
 8003684:	4013      	ands	r3, r2
 8003686:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d100      	bne.n	8003690 <HAL_GPIO_Init+0x28>
 800368e:	e138      	b.n	8003902 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	2203      	movs	r2, #3
 8003696:	4013      	ands	r3, r2
 8003698:	2b01      	cmp	r3, #1
 800369a:	d005      	beq.n	80036a8 <HAL_GPIO_Init+0x40>
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	2203      	movs	r2, #3
 80036a2:	4013      	ands	r3, r2
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d130      	bne.n	800370a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	005b      	lsls	r3, r3, #1
 80036b2:	2203      	movs	r2, #3
 80036b4:	409a      	lsls	r2, r3
 80036b6:	0013      	movs	r3, r2
 80036b8:	43da      	mvns	r2, r3
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	4013      	ands	r3, r2
 80036be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	68da      	ldr	r2, [r3, #12]
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	005b      	lsls	r3, r3, #1
 80036c8:	409a      	lsls	r2, r3
 80036ca:	0013      	movs	r3, r2
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80036de:	2201      	movs	r2, #1
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	409a      	lsls	r2, r3
 80036e4:	0013      	movs	r3, r2
 80036e6:	43da      	mvns	r2, r3
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	4013      	ands	r3, r2
 80036ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	091b      	lsrs	r3, r3, #4
 80036f4:	2201      	movs	r2, #1
 80036f6:	401a      	ands	r2, r3
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	409a      	lsls	r2, r3
 80036fc:	0013      	movs	r3, r2
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	4313      	orrs	r3, r2
 8003702:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	2203      	movs	r2, #3
 8003710:	4013      	ands	r3, r2
 8003712:	2b03      	cmp	r3, #3
 8003714:	d017      	beq.n	8003746 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	005b      	lsls	r3, r3, #1
 8003720:	2203      	movs	r2, #3
 8003722:	409a      	lsls	r2, r3
 8003724:	0013      	movs	r3, r2
 8003726:	43da      	mvns	r2, r3
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	4013      	ands	r3, r2
 800372c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	689a      	ldr	r2, [r3, #8]
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	409a      	lsls	r2, r3
 8003738:	0013      	movs	r3, r2
 800373a:	693a      	ldr	r2, [r7, #16]
 800373c:	4313      	orrs	r3, r2
 800373e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	2203      	movs	r2, #3
 800374c:	4013      	ands	r3, r2
 800374e:	2b02      	cmp	r3, #2
 8003750:	d123      	bne.n	800379a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	08da      	lsrs	r2, r3, #3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	3208      	adds	r2, #8
 800375a:	0092      	lsls	r2, r2, #2
 800375c:	58d3      	ldr	r3, [r2, r3]
 800375e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	2207      	movs	r2, #7
 8003764:	4013      	ands	r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	220f      	movs	r2, #15
 800376a:	409a      	lsls	r2, r3
 800376c:	0013      	movs	r3, r2
 800376e:	43da      	mvns	r2, r3
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	4013      	ands	r3, r2
 8003774:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	691a      	ldr	r2, [r3, #16]
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	2107      	movs	r1, #7
 800377e:	400b      	ands	r3, r1
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	409a      	lsls	r2, r3
 8003784:	0013      	movs	r3, r2
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	4313      	orrs	r3, r2
 800378a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	08da      	lsrs	r2, r3, #3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	3208      	adds	r2, #8
 8003794:	0092      	lsls	r2, r2, #2
 8003796:	6939      	ldr	r1, [r7, #16]
 8003798:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	005b      	lsls	r3, r3, #1
 80037a4:	2203      	movs	r2, #3
 80037a6:	409a      	lsls	r2, r3
 80037a8:	0013      	movs	r3, r2
 80037aa:	43da      	mvns	r2, r3
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	4013      	ands	r3, r2
 80037b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	2203      	movs	r2, #3
 80037b8:	401a      	ands	r2, r3
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	409a      	lsls	r2, r3
 80037c0:	0013      	movs	r3, r2
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	23c0      	movs	r3, #192	@ 0xc0
 80037d4:	029b      	lsls	r3, r3, #10
 80037d6:	4013      	ands	r3, r2
 80037d8:	d100      	bne.n	80037dc <HAL_GPIO_Init+0x174>
 80037da:	e092      	b.n	8003902 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80037dc:	4a50      	ldr	r2, [pc, #320]	@ (8003920 <HAL_GPIO_Init+0x2b8>)
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	089b      	lsrs	r3, r3, #2
 80037e2:	3318      	adds	r3, #24
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	589b      	ldr	r3, [r3, r2]
 80037e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	2203      	movs	r2, #3
 80037ee:	4013      	ands	r3, r2
 80037f0:	00db      	lsls	r3, r3, #3
 80037f2:	220f      	movs	r2, #15
 80037f4:	409a      	lsls	r2, r3
 80037f6:	0013      	movs	r3, r2
 80037f8:	43da      	mvns	r2, r3
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	4013      	ands	r3, r2
 80037fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	23a0      	movs	r3, #160	@ 0xa0
 8003804:	05db      	lsls	r3, r3, #23
 8003806:	429a      	cmp	r2, r3
 8003808:	d013      	beq.n	8003832 <HAL_GPIO_Init+0x1ca>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a45      	ldr	r2, [pc, #276]	@ (8003924 <HAL_GPIO_Init+0x2bc>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d00d      	beq.n	800382e <HAL_GPIO_Init+0x1c6>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a44      	ldr	r2, [pc, #272]	@ (8003928 <HAL_GPIO_Init+0x2c0>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d007      	beq.n	800382a <HAL_GPIO_Init+0x1c2>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a43      	ldr	r2, [pc, #268]	@ (800392c <HAL_GPIO_Init+0x2c4>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d101      	bne.n	8003826 <HAL_GPIO_Init+0x1be>
 8003822:	2303      	movs	r3, #3
 8003824:	e006      	b.n	8003834 <HAL_GPIO_Init+0x1cc>
 8003826:	2305      	movs	r3, #5
 8003828:	e004      	b.n	8003834 <HAL_GPIO_Init+0x1cc>
 800382a:	2302      	movs	r3, #2
 800382c:	e002      	b.n	8003834 <HAL_GPIO_Init+0x1cc>
 800382e:	2301      	movs	r3, #1
 8003830:	e000      	b.n	8003834 <HAL_GPIO_Init+0x1cc>
 8003832:	2300      	movs	r3, #0
 8003834:	697a      	ldr	r2, [r7, #20]
 8003836:	2103      	movs	r1, #3
 8003838:	400a      	ands	r2, r1
 800383a:	00d2      	lsls	r2, r2, #3
 800383c:	4093      	lsls	r3, r2
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	4313      	orrs	r3, r2
 8003842:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003844:	4936      	ldr	r1, [pc, #216]	@ (8003920 <HAL_GPIO_Init+0x2b8>)
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	089b      	lsrs	r3, r3, #2
 800384a:	3318      	adds	r3, #24
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	693a      	ldr	r2, [r7, #16]
 8003850:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003852:	4b33      	ldr	r3, [pc, #204]	@ (8003920 <HAL_GPIO_Init+0x2b8>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	43da      	mvns	r2, r3
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	4013      	ands	r3, r2
 8003860:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	685a      	ldr	r2, [r3, #4]
 8003866:	2380      	movs	r3, #128	@ 0x80
 8003868:	035b      	lsls	r3, r3, #13
 800386a:	4013      	ands	r3, r2
 800386c:	d003      	beq.n	8003876 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	4313      	orrs	r3, r2
 8003874:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003876:	4b2a      	ldr	r3, [pc, #168]	@ (8003920 <HAL_GPIO_Init+0x2b8>)
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800387c:	4b28      	ldr	r3, [pc, #160]	@ (8003920 <HAL_GPIO_Init+0x2b8>)
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	43da      	mvns	r2, r3
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	4013      	ands	r3, r2
 800388a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	685a      	ldr	r2, [r3, #4]
 8003890:	2380      	movs	r3, #128	@ 0x80
 8003892:	039b      	lsls	r3, r3, #14
 8003894:	4013      	ands	r3, r2
 8003896:	d003      	beq.n	80038a0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003898:	693a      	ldr	r2, [r7, #16]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	4313      	orrs	r3, r2
 800389e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80038a0:	4b1f      	ldr	r3, [pc, #124]	@ (8003920 <HAL_GPIO_Init+0x2b8>)
 80038a2:	693a      	ldr	r2, [r7, #16]
 80038a4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80038a6:	4a1e      	ldr	r2, [pc, #120]	@ (8003920 <HAL_GPIO_Init+0x2b8>)
 80038a8:	2384      	movs	r3, #132	@ 0x84
 80038aa:	58d3      	ldr	r3, [r2, r3]
 80038ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	43da      	mvns	r2, r3
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	4013      	ands	r3, r2
 80038b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685a      	ldr	r2, [r3, #4]
 80038bc:	2380      	movs	r3, #128	@ 0x80
 80038be:	029b      	lsls	r3, r3, #10
 80038c0:	4013      	ands	r3, r2
 80038c2:	d003      	beq.n	80038cc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80038cc:	4914      	ldr	r1, [pc, #80]	@ (8003920 <HAL_GPIO_Init+0x2b8>)
 80038ce:	2284      	movs	r2, #132	@ 0x84
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80038d4:	4a12      	ldr	r2, [pc, #72]	@ (8003920 <HAL_GPIO_Init+0x2b8>)
 80038d6:	2380      	movs	r3, #128	@ 0x80
 80038d8:	58d3      	ldr	r3, [r2, r3]
 80038da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	43da      	mvns	r2, r3
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	4013      	ands	r3, r2
 80038e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	685a      	ldr	r2, [r3, #4]
 80038ea:	2380      	movs	r3, #128	@ 0x80
 80038ec:	025b      	lsls	r3, r3, #9
 80038ee:	4013      	ands	r3, r2
 80038f0:	d003      	beq.n	80038fa <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80038fa:	4909      	ldr	r1, [pc, #36]	@ (8003920 <HAL_GPIO_Init+0x2b8>)
 80038fc:	2280      	movs	r2, #128	@ 0x80
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	3301      	adds	r3, #1
 8003906:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	40da      	lsrs	r2, r3
 8003910:	1e13      	subs	r3, r2, #0
 8003912:	d000      	beq.n	8003916 <HAL_GPIO_Init+0x2ae>
 8003914:	e6b0      	b.n	8003678 <HAL_GPIO_Init+0x10>
  }
}
 8003916:	46c0      	nop			@ (mov r8, r8)
 8003918:	46c0      	nop			@ (mov r8, r8)
 800391a:	46bd      	mov	sp, r7
 800391c:	b006      	add	sp, #24
 800391e:	bd80      	pop	{r7, pc}
 8003920:	40021800 	.word	0x40021800
 8003924:	50000400 	.word	0x50000400
 8003928:	50000800 	.word	0x50000800
 800392c:	50000c00 	.word	0x50000c00

08003930 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	0008      	movs	r0, r1
 800393a:	0011      	movs	r1, r2
 800393c:	1cbb      	adds	r3, r7, #2
 800393e:	1c02      	adds	r2, r0, #0
 8003940:	801a      	strh	r2, [r3, #0]
 8003942:	1c7b      	adds	r3, r7, #1
 8003944:	1c0a      	adds	r2, r1, #0
 8003946:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003948:	1c7b      	adds	r3, r7, #1
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d004      	beq.n	800395a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003950:	1cbb      	adds	r3, r7, #2
 8003952:	881a      	ldrh	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003958:	e003      	b.n	8003962 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800395a:	1cbb      	adds	r3, r7, #2
 800395c:	881a      	ldrh	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003962:	46c0      	nop			@ (mov r8, r8)
 8003964:	46bd      	mov	sp, r7
 8003966:	b002      	add	sp, #8
 8003968:	bd80      	pop	{r7, pc}

0800396a <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800396a:	b580      	push	{r7, lr}
 800396c:	b084      	sub	sp, #16
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
 8003972:	000a      	movs	r2, r1
 8003974:	1cbb      	adds	r3, r7, #2
 8003976:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	695b      	ldr	r3, [r3, #20]
 800397c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800397e:	1cbb      	adds	r3, r7, #2
 8003980:	881b      	ldrh	r3, [r3, #0]
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	4013      	ands	r3, r2
 8003986:	041a      	lsls	r2, r3, #16
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	43db      	mvns	r3, r3
 800398c:	1cb9      	adds	r1, r7, #2
 800398e:	8809      	ldrh	r1, [r1, #0]
 8003990:	400b      	ands	r3, r1
 8003992:	431a      	orrs	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	619a      	str	r2, [r3, #24]
}
 8003998:	46c0      	nop			@ (mov r8, r8)
 800399a:	46bd      	mov	sp, r7
 800399c:	b004      	add	sp, #16
 800399e:	bd80      	pop	{r7, pc}

080039a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e08f      	b.n	8003ad2 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2241      	movs	r2, #65	@ 0x41
 80039b6:	5c9b      	ldrb	r3, [r3, r2]
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d107      	bne.n	80039ce <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2240      	movs	r2, #64	@ 0x40
 80039c2:	2100      	movs	r1, #0
 80039c4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	0018      	movs	r0, r3
 80039ca:	f7fe fe0b 	bl	80025e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2241      	movs	r2, #65	@ 0x41
 80039d2:	2124      	movs	r1, #36	@ 0x24
 80039d4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2101      	movs	r1, #1
 80039e2:	438a      	bics	r2, r1
 80039e4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685a      	ldr	r2, [r3, #4]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	493b      	ldr	r1, [pc, #236]	@ (8003adc <HAL_I2C_Init+0x13c>)
 80039f0:	400a      	ands	r2, r1
 80039f2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689a      	ldr	r2, [r3, #8]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4938      	ldr	r1, [pc, #224]	@ (8003ae0 <HAL_I2C_Init+0x140>)
 8003a00:	400a      	ands	r2, r1
 8003a02:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d108      	bne.n	8003a1e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689a      	ldr	r2, [r3, #8]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2180      	movs	r1, #128	@ 0x80
 8003a16:	0209      	lsls	r1, r1, #8
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	609a      	str	r2, [r3, #8]
 8003a1c:	e007      	b.n	8003a2e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	689a      	ldr	r2, [r3, #8]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2184      	movs	r1, #132	@ 0x84
 8003a28:	0209      	lsls	r1, r1, #8
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d109      	bne.n	8003a4a <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	685a      	ldr	r2, [r3, #4]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2180      	movs	r1, #128	@ 0x80
 8003a42:	0109      	lsls	r1, r1, #4
 8003a44:	430a      	orrs	r2, r1
 8003a46:	605a      	str	r2, [r3, #4]
 8003a48:	e007      	b.n	8003a5a <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	685a      	ldr	r2, [r3, #4]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4923      	ldr	r1, [pc, #140]	@ (8003ae4 <HAL_I2C_Init+0x144>)
 8003a56:	400a      	ands	r2, r1
 8003a58:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	685a      	ldr	r2, [r3, #4]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4920      	ldr	r1, [pc, #128]	@ (8003ae8 <HAL_I2C_Init+0x148>)
 8003a66:	430a      	orrs	r2, r1
 8003a68:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68da      	ldr	r2, [r3, #12]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	491a      	ldr	r1, [pc, #104]	@ (8003ae0 <HAL_I2C_Init+0x140>)
 8003a76:	400a      	ands	r2, r1
 8003a78:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	691a      	ldr	r2, [r3, #16]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	431a      	orrs	r2, r3
 8003a84:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	430a      	orrs	r2, r1
 8003a92:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	69d9      	ldr	r1, [r3, #28]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a1a      	ldr	r2, [r3, #32]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2101      	movs	r1, #1
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2241      	movs	r2, #65	@ 0x41
 8003abe:	2120      	movs	r1, #32
 8003ac0:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2242      	movs	r2, #66	@ 0x42
 8003acc:	2100      	movs	r1, #0
 8003ace:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	0018      	movs	r0, r3
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	b002      	add	sp, #8
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	46c0      	nop			@ (mov r8, r8)
 8003adc:	f0ffffff 	.word	0xf0ffffff
 8003ae0:	ffff7fff 	.word	0xffff7fff
 8003ae4:	fffff7ff 	.word	0xfffff7ff
 8003ae8:	02008000 	.word	0x02008000

08003aec <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aec:	b590      	push	{r4, r7, lr}
 8003aee:	b089      	sub	sp, #36	@ 0x24
 8003af0:	af02      	add	r7, sp, #8
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	000c      	movs	r4, r1
 8003af6:	0010      	movs	r0, r2
 8003af8:	0019      	movs	r1, r3
 8003afa:	230a      	movs	r3, #10
 8003afc:	18fb      	adds	r3, r7, r3
 8003afe:	1c22      	adds	r2, r4, #0
 8003b00:	801a      	strh	r2, [r3, #0]
 8003b02:	2308      	movs	r3, #8
 8003b04:	18fb      	adds	r3, r7, r3
 8003b06:	1c02      	adds	r2, r0, #0
 8003b08:	801a      	strh	r2, [r3, #0]
 8003b0a:	1dbb      	adds	r3, r7, #6
 8003b0c:	1c0a      	adds	r2, r1, #0
 8003b0e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2241      	movs	r2, #65	@ 0x41
 8003b14:	5c9b      	ldrb	r3, [r3, r2]
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	2b20      	cmp	r3, #32
 8003b1a:	d000      	beq.n	8003b1e <HAL_I2C_Mem_Write+0x32>
 8003b1c:	e10c      	b.n	8003d38 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d004      	beq.n	8003b2e <HAL_I2C_Mem_Write+0x42>
 8003b24:	232c      	movs	r3, #44	@ 0x2c
 8003b26:	18fb      	adds	r3, r7, r3
 8003b28:	881b      	ldrh	r3, [r3, #0]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d105      	bne.n	8003b3a <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2280      	movs	r2, #128	@ 0x80
 8003b32:	0092      	lsls	r2, r2, #2
 8003b34:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e0ff      	b.n	8003d3a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2240      	movs	r2, #64	@ 0x40
 8003b3e:	5c9b      	ldrb	r3, [r3, r2]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d101      	bne.n	8003b48 <HAL_I2C_Mem_Write+0x5c>
 8003b44:	2302      	movs	r3, #2
 8003b46:	e0f8      	b.n	8003d3a <HAL_I2C_Mem_Write+0x24e>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2240      	movs	r2, #64	@ 0x40
 8003b4c:	2101      	movs	r1, #1
 8003b4e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003b50:	f7ff fca8 	bl	80034a4 <HAL_GetTick>
 8003b54:	0003      	movs	r3, r0
 8003b56:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003b58:	2380      	movs	r3, #128	@ 0x80
 8003b5a:	0219      	lsls	r1, r3, #8
 8003b5c:	68f8      	ldr	r0, [r7, #12]
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	2319      	movs	r3, #25
 8003b64:	2201      	movs	r2, #1
 8003b66:	f000 fc07 	bl	8004378 <I2C_WaitOnFlagUntilTimeout>
 8003b6a:	1e03      	subs	r3, r0, #0
 8003b6c:	d001      	beq.n	8003b72 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e0e3      	b.n	8003d3a <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2241      	movs	r2, #65	@ 0x41
 8003b76:	2121      	movs	r1, #33	@ 0x21
 8003b78:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2242      	movs	r2, #66	@ 0x42
 8003b7e:	2140      	movs	r1, #64	@ 0x40
 8003b80:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b8c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	222c      	movs	r2, #44	@ 0x2c
 8003b92:	18ba      	adds	r2, r7, r2
 8003b94:	8812      	ldrh	r2, [r2, #0]
 8003b96:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b9e:	1dbb      	adds	r3, r7, #6
 8003ba0:	881c      	ldrh	r4, [r3, #0]
 8003ba2:	2308      	movs	r3, #8
 8003ba4:	18fb      	adds	r3, r7, r3
 8003ba6:	881a      	ldrh	r2, [r3, #0]
 8003ba8:	230a      	movs	r3, #10
 8003baa:	18fb      	adds	r3, r7, r3
 8003bac:	8819      	ldrh	r1, [r3, #0]
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	9301      	str	r3, [sp, #4]
 8003bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bb6:	9300      	str	r3, [sp, #0]
 8003bb8:	0023      	movs	r3, r4
 8003bba:	f000 faf5 	bl	80041a8 <I2C_RequestMemoryWrite>
 8003bbe:	1e03      	subs	r3, r0, #0
 8003bc0:	d005      	beq.n	8003bce <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2240      	movs	r2, #64	@ 0x40
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e0b5      	b.n	8003d3a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	2bff      	cmp	r3, #255	@ 0xff
 8003bd6:	d911      	bls.n	8003bfc <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	22ff      	movs	r2, #255	@ 0xff
 8003bdc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003be2:	b2da      	uxtb	r2, r3
 8003be4:	2380      	movs	r3, #128	@ 0x80
 8003be6:	045c      	lsls	r4, r3, #17
 8003be8:	230a      	movs	r3, #10
 8003bea:	18fb      	adds	r3, r7, r3
 8003bec:	8819      	ldrh	r1, [r3, #0]
 8003bee:	68f8      	ldr	r0, [r7, #12]
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	9300      	str	r3, [sp, #0]
 8003bf4:	0023      	movs	r3, r4
 8003bf6:	f000 fd99 	bl	800472c <I2C_TransferConfig>
 8003bfa:	e012      	b.n	8003c22 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c0a:	b2da      	uxtb	r2, r3
 8003c0c:	2380      	movs	r3, #128	@ 0x80
 8003c0e:	049c      	lsls	r4, r3, #18
 8003c10:	230a      	movs	r3, #10
 8003c12:	18fb      	adds	r3, r7, r3
 8003c14:	8819      	ldrh	r1, [r3, #0]
 8003c16:	68f8      	ldr	r0, [r7, #12]
 8003c18:	2300      	movs	r3, #0
 8003c1a:	9300      	str	r3, [sp, #0]
 8003c1c:	0023      	movs	r3, r4
 8003c1e:	f000 fd85 	bl	800472c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	0018      	movs	r0, r3
 8003c2a:	f000 fbfd 	bl	8004428 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c2e:	1e03      	subs	r3, r0, #0
 8003c30:	d001      	beq.n	8003c36 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e081      	b.n	8003d3a <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3a:	781a      	ldrb	r2, [r3, #0]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c46:	1c5a      	adds	r2, r3, #1
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	3b01      	subs	r3, #1
 8003c54:	b29a      	uxth	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d03a      	beq.n	8003ce6 <HAL_I2C_Mem_Write+0x1fa>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d136      	bne.n	8003ce6 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003c78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	9300      	str	r3, [sp, #0]
 8003c80:	0013      	movs	r3, r2
 8003c82:	2200      	movs	r2, #0
 8003c84:	2180      	movs	r1, #128	@ 0x80
 8003c86:	f000 fb77 	bl	8004378 <I2C_WaitOnFlagUntilTimeout>
 8003c8a:	1e03      	subs	r3, r0, #0
 8003c8c:	d001      	beq.n	8003c92 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e053      	b.n	8003d3a <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	2bff      	cmp	r3, #255	@ 0xff
 8003c9a:	d911      	bls.n	8003cc0 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	22ff      	movs	r2, #255	@ 0xff
 8003ca0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ca6:	b2da      	uxtb	r2, r3
 8003ca8:	2380      	movs	r3, #128	@ 0x80
 8003caa:	045c      	lsls	r4, r3, #17
 8003cac:	230a      	movs	r3, #10
 8003cae:	18fb      	adds	r3, r7, r3
 8003cb0:	8819      	ldrh	r1, [r3, #0]
 8003cb2:	68f8      	ldr	r0, [r7, #12]
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	9300      	str	r3, [sp, #0]
 8003cb8:	0023      	movs	r3, r4
 8003cba:	f000 fd37 	bl	800472c <I2C_TransferConfig>
 8003cbe:	e012      	b.n	8003ce6 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cce:	b2da      	uxtb	r2, r3
 8003cd0:	2380      	movs	r3, #128	@ 0x80
 8003cd2:	049c      	lsls	r4, r3, #18
 8003cd4:	230a      	movs	r3, #10
 8003cd6:	18fb      	adds	r3, r7, r3
 8003cd8:	8819      	ldrh	r1, [r3, #0]
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	2300      	movs	r3, #0
 8003cde:	9300      	str	r3, [sp, #0]
 8003ce0:	0023      	movs	r3, r4
 8003ce2:	f000 fd23 	bl	800472c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d198      	bne.n	8003c22 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cf0:	697a      	ldr	r2, [r7, #20]
 8003cf2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	0018      	movs	r0, r3
 8003cf8:	f000 fbdc 	bl	80044b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003cfc:	1e03      	subs	r3, r0, #0
 8003cfe:	d001      	beq.n	8003d04 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e01a      	b.n	8003d3a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2220      	movs	r2, #32
 8003d0a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	685a      	ldr	r2, [r3, #4]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	490b      	ldr	r1, [pc, #44]	@ (8003d44 <HAL_I2C_Mem_Write+0x258>)
 8003d18:	400a      	ands	r2, r1
 8003d1a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2241      	movs	r2, #65	@ 0x41
 8003d20:	2120      	movs	r1, #32
 8003d22:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2242      	movs	r2, #66	@ 0x42
 8003d28:	2100      	movs	r1, #0
 8003d2a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2240      	movs	r2, #64	@ 0x40
 8003d30:	2100      	movs	r1, #0
 8003d32:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003d34:	2300      	movs	r3, #0
 8003d36:	e000      	b.n	8003d3a <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8003d38:	2302      	movs	r3, #2
  }
}
 8003d3a:	0018      	movs	r0, r3
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	b007      	add	sp, #28
 8003d40:	bd90      	pop	{r4, r7, pc}
 8003d42:	46c0      	nop			@ (mov r8, r8)
 8003d44:	fe00e800 	.word	0xfe00e800

08003d48 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d48:	b590      	push	{r4, r7, lr}
 8003d4a:	b089      	sub	sp, #36	@ 0x24
 8003d4c:	af02      	add	r7, sp, #8
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	000c      	movs	r4, r1
 8003d52:	0010      	movs	r0, r2
 8003d54:	0019      	movs	r1, r3
 8003d56:	230a      	movs	r3, #10
 8003d58:	18fb      	adds	r3, r7, r3
 8003d5a:	1c22      	adds	r2, r4, #0
 8003d5c:	801a      	strh	r2, [r3, #0]
 8003d5e:	2308      	movs	r3, #8
 8003d60:	18fb      	adds	r3, r7, r3
 8003d62:	1c02      	adds	r2, r0, #0
 8003d64:	801a      	strh	r2, [r3, #0]
 8003d66:	1dbb      	adds	r3, r7, #6
 8003d68:	1c0a      	adds	r2, r1, #0
 8003d6a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2241      	movs	r2, #65	@ 0x41
 8003d70:	5c9b      	ldrb	r3, [r3, r2]
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	2b20      	cmp	r3, #32
 8003d76:	d000      	beq.n	8003d7a <HAL_I2C_Mem_Read+0x32>
 8003d78:	e110      	b.n	8003f9c <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d004      	beq.n	8003d8a <HAL_I2C_Mem_Read+0x42>
 8003d80:	232c      	movs	r3, #44	@ 0x2c
 8003d82:	18fb      	adds	r3, r7, r3
 8003d84:	881b      	ldrh	r3, [r3, #0]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d105      	bne.n	8003d96 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2280      	movs	r2, #128	@ 0x80
 8003d8e:	0092      	lsls	r2, r2, #2
 8003d90:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e103      	b.n	8003f9e <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2240      	movs	r2, #64	@ 0x40
 8003d9a:	5c9b      	ldrb	r3, [r3, r2]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d101      	bne.n	8003da4 <HAL_I2C_Mem_Read+0x5c>
 8003da0:	2302      	movs	r3, #2
 8003da2:	e0fc      	b.n	8003f9e <HAL_I2C_Mem_Read+0x256>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2240      	movs	r2, #64	@ 0x40
 8003da8:	2101      	movs	r1, #1
 8003daa:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003dac:	f7ff fb7a 	bl	80034a4 <HAL_GetTick>
 8003db0:	0003      	movs	r3, r0
 8003db2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003db4:	2380      	movs	r3, #128	@ 0x80
 8003db6:	0219      	lsls	r1, r3, #8
 8003db8:	68f8      	ldr	r0, [r7, #12]
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	9300      	str	r3, [sp, #0]
 8003dbe:	2319      	movs	r3, #25
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	f000 fad9 	bl	8004378 <I2C_WaitOnFlagUntilTimeout>
 8003dc6:	1e03      	subs	r3, r0, #0
 8003dc8:	d001      	beq.n	8003dce <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e0e7      	b.n	8003f9e <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2241      	movs	r2, #65	@ 0x41
 8003dd2:	2122      	movs	r1, #34	@ 0x22
 8003dd4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2242      	movs	r2, #66	@ 0x42
 8003dda:	2140      	movs	r1, #64	@ 0x40
 8003ddc:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003de8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	222c      	movs	r2, #44	@ 0x2c
 8003dee:	18ba      	adds	r2, r7, r2
 8003df0:	8812      	ldrh	r2, [r2, #0]
 8003df2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2200      	movs	r2, #0
 8003df8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003dfa:	1dbb      	adds	r3, r7, #6
 8003dfc:	881c      	ldrh	r4, [r3, #0]
 8003dfe:	2308      	movs	r3, #8
 8003e00:	18fb      	adds	r3, r7, r3
 8003e02:	881a      	ldrh	r2, [r3, #0]
 8003e04:	230a      	movs	r3, #10
 8003e06:	18fb      	adds	r3, r7, r3
 8003e08:	8819      	ldrh	r1, [r3, #0]
 8003e0a:	68f8      	ldr	r0, [r7, #12]
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	9301      	str	r3, [sp, #4]
 8003e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e12:	9300      	str	r3, [sp, #0]
 8003e14:	0023      	movs	r3, r4
 8003e16:	f000 fa2b 	bl	8004270 <I2C_RequestMemoryRead>
 8003e1a:	1e03      	subs	r3, r0, #0
 8003e1c:	d005      	beq.n	8003e2a <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2240      	movs	r2, #64	@ 0x40
 8003e22:	2100      	movs	r1, #0
 8003e24:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e0b9      	b.n	8003f9e <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	2bff      	cmp	r3, #255	@ 0xff
 8003e32:	d911      	bls.n	8003e58 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	22ff      	movs	r2, #255	@ 0xff
 8003e38:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e3e:	b2da      	uxtb	r2, r3
 8003e40:	2380      	movs	r3, #128	@ 0x80
 8003e42:	045c      	lsls	r4, r3, #17
 8003e44:	230a      	movs	r3, #10
 8003e46:	18fb      	adds	r3, r7, r3
 8003e48:	8819      	ldrh	r1, [r3, #0]
 8003e4a:	68f8      	ldr	r0, [r7, #12]
 8003e4c:	4b56      	ldr	r3, [pc, #344]	@ (8003fa8 <HAL_I2C_Mem_Read+0x260>)
 8003e4e:	9300      	str	r3, [sp, #0]
 8003e50:	0023      	movs	r3, r4
 8003e52:	f000 fc6b 	bl	800472c <I2C_TransferConfig>
 8003e56:	e012      	b.n	8003e7e <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e66:	b2da      	uxtb	r2, r3
 8003e68:	2380      	movs	r3, #128	@ 0x80
 8003e6a:	049c      	lsls	r4, r3, #18
 8003e6c:	230a      	movs	r3, #10
 8003e6e:	18fb      	adds	r3, r7, r3
 8003e70:	8819      	ldrh	r1, [r3, #0]
 8003e72:	68f8      	ldr	r0, [r7, #12]
 8003e74:	4b4c      	ldr	r3, [pc, #304]	@ (8003fa8 <HAL_I2C_Mem_Read+0x260>)
 8003e76:	9300      	str	r3, [sp, #0]
 8003e78:	0023      	movs	r3, r4
 8003e7a:	f000 fc57 	bl	800472c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003e7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	9300      	str	r3, [sp, #0]
 8003e86:	0013      	movs	r3, r2
 8003e88:	2200      	movs	r2, #0
 8003e8a:	2104      	movs	r1, #4
 8003e8c:	f000 fa74 	bl	8004378 <I2C_WaitOnFlagUntilTimeout>
 8003e90:	1e03      	subs	r3, r0, #0
 8003e92:	d001      	beq.n	8003e98 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e082      	b.n	8003f9e <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea2:	b2d2      	uxtb	r2, r2
 8003ea4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eaa:	1c5a      	adds	r2, r3, #1
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d03a      	beq.n	8003f4a <HAL_I2C_Mem_Read+0x202>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d136      	bne.n	8003f4a <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003edc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	9300      	str	r3, [sp, #0]
 8003ee4:	0013      	movs	r3, r2
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	2180      	movs	r1, #128	@ 0x80
 8003eea:	f000 fa45 	bl	8004378 <I2C_WaitOnFlagUntilTimeout>
 8003eee:	1e03      	subs	r3, r0, #0
 8003ef0:	d001      	beq.n	8003ef6 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e053      	b.n	8003f9e <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	2bff      	cmp	r3, #255	@ 0xff
 8003efe:	d911      	bls.n	8003f24 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	22ff      	movs	r2, #255	@ 0xff
 8003f04:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f0a:	b2da      	uxtb	r2, r3
 8003f0c:	2380      	movs	r3, #128	@ 0x80
 8003f0e:	045c      	lsls	r4, r3, #17
 8003f10:	230a      	movs	r3, #10
 8003f12:	18fb      	adds	r3, r7, r3
 8003f14:	8819      	ldrh	r1, [r3, #0]
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	2300      	movs	r3, #0
 8003f1a:	9300      	str	r3, [sp, #0]
 8003f1c:	0023      	movs	r3, r4
 8003f1e:	f000 fc05 	bl	800472c <I2C_TransferConfig>
 8003f22:	e012      	b.n	8003f4a <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f28:	b29a      	uxth	r2, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f32:	b2da      	uxtb	r2, r3
 8003f34:	2380      	movs	r3, #128	@ 0x80
 8003f36:	049c      	lsls	r4, r3, #18
 8003f38:	230a      	movs	r3, #10
 8003f3a:	18fb      	adds	r3, r7, r3
 8003f3c:	8819      	ldrh	r1, [r3, #0]
 8003f3e:	68f8      	ldr	r0, [r7, #12]
 8003f40:	2300      	movs	r3, #0
 8003f42:	9300      	str	r3, [sp, #0]
 8003f44:	0023      	movs	r3, r4
 8003f46:	f000 fbf1 	bl	800472c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d194      	bne.n	8003e7e <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	0018      	movs	r0, r3
 8003f5c:	f000 faaa 	bl	80044b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003f60:	1e03      	subs	r3, r0, #0
 8003f62:	d001      	beq.n	8003f68 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e01a      	b.n	8003f9e <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2220      	movs	r2, #32
 8003f6e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	685a      	ldr	r2, [r3, #4]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	490c      	ldr	r1, [pc, #48]	@ (8003fac <HAL_I2C_Mem_Read+0x264>)
 8003f7c:	400a      	ands	r2, r1
 8003f7e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2241      	movs	r2, #65	@ 0x41
 8003f84:	2120      	movs	r1, #32
 8003f86:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2242      	movs	r2, #66	@ 0x42
 8003f8c:	2100      	movs	r1, #0
 8003f8e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2240      	movs	r2, #64	@ 0x40
 8003f94:	2100      	movs	r1, #0
 8003f96:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	e000      	b.n	8003f9e <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8003f9c:	2302      	movs	r3, #2
  }
}
 8003f9e:	0018      	movs	r0, r3
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	b007      	add	sp, #28
 8003fa4:	bd90      	pop	{r4, r7, pc}
 8003fa6:	46c0      	nop			@ (mov r8, r8)
 8003fa8:	80002400 	.word	0x80002400
 8003fac:	fe00e800 	.word	0xfe00e800

08003fb0 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b08a      	sub	sp, #40	@ 0x28
 8003fb4:	af02      	add	r7, sp, #8
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	607a      	str	r2, [r7, #4]
 8003fba:	603b      	str	r3, [r7, #0]
 8003fbc:	230a      	movs	r3, #10
 8003fbe:	18fb      	adds	r3, r7, r3
 8003fc0:	1c0a      	adds	r2, r1, #0
 8003fc2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2241      	movs	r2, #65	@ 0x41
 8003fcc:	5c9b      	ldrb	r3, [r3, r2]
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	2b20      	cmp	r3, #32
 8003fd2:	d000      	beq.n	8003fd6 <HAL_I2C_IsDeviceReady+0x26>
 8003fd4:	e0df      	b.n	8004196 <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	699a      	ldr	r2, [r3, #24]
 8003fdc:	2380      	movs	r3, #128	@ 0x80
 8003fde:	021b      	lsls	r3, r3, #8
 8003fe0:	401a      	ands	r2, r3
 8003fe2:	2380      	movs	r3, #128	@ 0x80
 8003fe4:	021b      	lsls	r3, r3, #8
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d101      	bne.n	8003fee <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8003fea:	2302      	movs	r3, #2
 8003fec:	e0d4      	b.n	8004198 <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2240      	movs	r2, #64	@ 0x40
 8003ff2:	5c9b      	ldrb	r3, [r3, r2]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d101      	bne.n	8003ffc <HAL_I2C_IsDeviceReady+0x4c>
 8003ff8:	2302      	movs	r3, #2
 8003ffa:	e0cd      	b.n	8004198 <HAL_I2C_IsDeviceReady+0x1e8>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2240      	movs	r2, #64	@ 0x40
 8004000:	2101      	movs	r1, #1
 8004002:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2241      	movs	r2, #65	@ 0x41
 8004008:	2124      	movs	r1, #36	@ 0x24
 800400a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	2b01      	cmp	r3, #1
 8004018:	d107      	bne.n	800402a <HAL_I2C_IsDeviceReady+0x7a>
 800401a:	230a      	movs	r3, #10
 800401c:	18fb      	adds	r3, r7, r3
 800401e:	881b      	ldrh	r3, [r3, #0]
 8004020:	059b      	lsls	r3, r3, #22
 8004022:	0d9b      	lsrs	r3, r3, #22
 8004024:	4a5e      	ldr	r2, [pc, #376]	@ (80041a0 <HAL_I2C_IsDeviceReady+0x1f0>)
 8004026:	431a      	orrs	r2, r3
 8004028:	e006      	b.n	8004038 <HAL_I2C_IsDeviceReady+0x88>
 800402a:	230a      	movs	r3, #10
 800402c:	18fb      	adds	r3, r7, r3
 800402e:	881b      	ldrh	r3, [r3, #0]
 8004030:	059b      	lsls	r3, r3, #22
 8004032:	0d9b      	lsrs	r3, r3, #22
 8004034:	4a5b      	ldr	r2, [pc, #364]	@ (80041a4 <HAL_I2C_IsDeviceReady+0x1f4>)
 8004036:	431a      	orrs	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800403e:	f7ff fa31 	bl	80034a4 <HAL_GetTick>
 8004042:	0003      	movs	r3, r0
 8004044:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	2220      	movs	r2, #32
 800404e:	4013      	ands	r3, r2
 8004050:	3b20      	subs	r3, #32
 8004052:	425a      	negs	r2, r3
 8004054:	4153      	adcs	r3, r2
 8004056:	b2da      	uxtb	r2, r3
 8004058:	231f      	movs	r3, #31
 800405a:	18fb      	adds	r3, r7, r3
 800405c:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	699b      	ldr	r3, [r3, #24]
 8004064:	2210      	movs	r2, #16
 8004066:	4013      	ands	r3, r2
 8004068:	3b10      	subs	r3, #16
 800406a:	425a      	negs	r2, r3
 800406c:	4153      	adcs	r3, r2
 800406e:	b2da      	uxtb	r2, r3
 8004070:	231e      	movs	r3, #30
 8004072:	18fb      	adds	r3, r7, r3
 8004074:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004076:	e035      	b.n	80040e4 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	3301      	adds	r3, #1
 800407c:	d01a      	beq.n	80040b4 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800407e:	f7ff fa11 	bl	80034a4 <HAL_GetTick>
 8004082:	0002      	movs	r2, r0
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	683a      	ldr	r2, [r7, #0]
 800408a:	429a      	cmp	r2, r3
 800408c:	d302      	bcc.n	8004094 <HAL_I2C_IsDeviceReady+0xe4>
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d10f      	bne.n	80040b4 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2241      	movs	r2, #65	@ 0x41
 8004098:	2120      	movs	r1, #32
 800409a:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040a0:	2220      	movs	r2, #32
 80040a2:	431a      	orrs	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2240      	movs	r2, #64	@ 0x40
 80040ac:	2100      	movs	r1, #0
 80040ae:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e071      	b.n	8004198 <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	2220      	movs	r2, #32
 80040bc:	4013      	ands	r3, r2
 80040be:	3b20      	subs	r3, #32
 80040c0:	425a      	negs	r2, r3
 80040c2:	4153      	adcs	r3, r2
 80040c4:	b2da      	uxtb	r2, r3
 80040c6:	231f      	movs	r3, #31
 80040c8:	18fb      	adds	r3, r7, r3
 80040ca:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	2210      	movs	r2, #16
 80040d4:	4013      	ands	r3, r2
 80040d6:	3b10      	subs	r3, #16
 80040d8:	425a      	negs	r2, r3
 80040da:	4153      	adcs	r3, r2
 80040dc:	b2da      	uxtb	r2, r3
 80040de:	231e      	movs	r3, #30
 80040e0:	18fb      	adds	r3, r7, r3
 80040e2:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80040e4:	231f      	movs	r3, #31
 80040e6:	18fb      	adds	r3, r7, r3
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d104      	bne.n	80040f8 <HAL_I2C_IsDeviceReady+0x148>
 80040ee:	231e      	movs	r3, #30
 80040f0:	18fb      	adds	r3, r7, r3
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d0bf      	beq.n	8004078 <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	2210      	movs	r2, #16
 8004100:	4013      	ands	r3, r2
 8004102:	2b10      	cmp	r3, #16
 8004104:	d01a      	beq.n	800413c <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004106:	683a      	ldr	r2, [r7, #0]
 8004108:	68f8      	ldr	r0, [r7, #12]
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	9300      	str	r3, [sp, #0]
 800410e:	0013      	movs	r3, r2
 8004110:	2200      	movs	r2, #0
 8004112:	2120      	movs	r1, #32
 8004114:	f000 f930 	bl	8004378 <I2C_WaitOnFlagUntilTimeout>
 8004118:	1e03      	subs	r3, r0, #0
 800411a:	d001      	beq.n	8004120 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e03b      	b.n	8004198 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2220      	movs	r2, #32
 8004126:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2241      	movs	r2, #65	@ 0x41
 800412c:	2120      	movs	r1, #32
 800412e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2240      	movs	r2, #64	@ 0x40
 8004134:	2100      	movs	r1, #0
 8004136:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8004138:	2300      	movs	r3, #0
 800413a:	e02d      	b.n	8004198 <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800413c:	683a      	ldr	r2, [r7, #0]
 800413e:	68f8      	ldr	r0, [r7, #12]
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	9300      	str	r3, [sp, #0]
 8004144:	0013      	movs	r3, r2
 8004146:	2200      	movs	r2, #0
 8004148:	2120      	movs	r1, #32
 800414a:	f000 f915 	bl	8004378 <I2C_WaitOnFlagUntilTimeout>
 800414e:	1e03      	subs	r3, r0, #0
 8004150:	d001      	beq.n	8004156 <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e020      	b.n	8004198 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2210      	movs	r2, #16
 800415c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2220      	movs	r2, #32
 8004164:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	3301      	adds	r3, #1
 800416a:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	429a      	cmp	r2, r3
 8004172:	d900      	bls.n	8004176 <HAL_I2C_IsDeviceReady+0x1c6>
 8004174:	e74d      	b.n	8004012 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2241      	movs	r2, #65	@ 0x41
 800417a:	2120      	movs	r1, #32
 800417c:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004182:	2220      	movs	r2, #32
 8004184:	431a      	orrs	r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2240      	movs	r2, #64	@ 0x40
 800418e:	2100      	movs	r1, #0
 8004190:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e000      	b.n	8004198 <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 8004196:	2302      	movs	r3, #2
  }
}
 8004198:	0018      	movs	r0, r3
 800419a:	46bd      	mov	sp, r7
 800419c:	b008      	add	sp, #32
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	02002000 	.word	0x02002000
 80041a4:	02002800 	.word	0x02002800

080041a8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80041a8:	b5b0      	push	{r4, r5, r7, lr}
 80041aa:	b086      	sub	sp, #24
 80041ac:	af02      	add	r7, sp, #8
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	000c      	movs	r4, r1
 80041b2:	0010      	movs	r0, r2
 80041b4:	0019      	movs	r1, r3
 80041b6:	250a      	movs	r5, #10
 80041b8:	197b      	adds	r3, r7, r5
 80041ba:	1c22      	adds	r2, r4, #0
 80041bc:	801a      	strh	r2, [r3, #0]
 80041be:	2308      	movs	r3, #8
 80041c0:	18fb      	adds	r3, r7, r3
 80041c2:	1c02      	adds	r2, r0, #0
 80041c4:	801a      	strh	r2, [r3, #0]
 80041c6:	1dbb      	adds	r3, r7, #6
 80041c8:	1c0a      	adds	r2, r1, #0
 80041ca:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80041cc:	1dbb      	adds	r3, r7, #6
 80041ce:	881b      	ldrh	r3, [r3, #0]
 80041d0:	b2da      	uxtb	r2, r3
 80041d2:	2380      	movs	r3, #128	@ 0x80
 80041d4:	045c      	lsls	r4, r3, #17
 80041d6:	197b      	adds	r3, r7, r5
 80041d8:	8819      	ldrh	r1, [r3, #0]
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	4b23      	ldr	r3, [pc, #140]	@ (800426c <I2C_RequestMemoryWrite+0xc4>)
 80041de:	9300      	str	r3, [sp, #0]
 80041e0:	0023      	movs	r3, r4
 80041e2:	f000 faa3 	bl	800472c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041e8:	6a39      	ldr	r1, [r7, #32]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	0018      	movs	r0, r3
 80041ee:	f000 f91b 	bl	8004428 <I2C_WaitOnTXISFlagUntilTimeout>
 80041f2:	1e03      	subs	r3, r0, #0
 80041f4:	d001      	beq.n	80041fa <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e033      	b.n	8004262 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041fa:	1dbb      	adds	r3, r7, #6
 80041fc:	881b      	ldrh	r3, [r3, #0]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d107      	bne.n	8004212 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004202:	2308      	movs	r3, #8
 8004204:	18fb      	adds	r3, r7, r3
 8004206:	881b      	ldrh	r3, [r3, #0]
 8004208:	b2da      	uxtb	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004210:	e019      	b.n	8004246 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004212:	2308      	movs	r3, #8
 8004214:	18fb      	adds	r3, r7, r3
 8004216:	881b      	ldrh	r3, [r3, #0]
 8004218:	0a1b      	lsrs	r3, r3, #8
 800421a:	b29b      	uxth	r3, r3
 800421c:	b2da      	uxtb	r2, r3
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004224:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004226:	6a39      	ldr	r1, [r7, #32]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	0018      	movs	r0, r3
 800422c:	f000 f8fc 	bl	8004428 <I2C_WaitOnTXISFlagUntilTimeout>
 8004230:	1e03      	subs	r3, r0, #0
 8004232:	d001      	beq.n	8004238 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e014      	b.n	8004262 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004238:	2308      	movs	r3, #8
 800423a:	18fb      	adds	r3, r7, r3
 800423c:	881b      	ldrh	r3, [r3, #0]
 800423e:	b2da      	uxtb	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004246:	6a3a      	ldr	r2, [r7, #32]
 8004248:	68f8      	ldr	r0, [r7, #12]
 800424a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800424c:	9300      	str	r3, [sp, #0]
 800424e:	0013      	movs	r3, r2
 8004250:	2200      	movs	r2, #0
 8004252:	2180      	movs	r1, #128	@ 0x80
 8004254:	f000 f890 	bl	8004378 <I2C_WaitOnFlagUntilTimeout>
 8004258:	1e03      	subs	r3, r0, #0
 800425a:	d001      	beq.n	8004260 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e000      	b.n	8004262 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	0018      	movs	r0, r3
 8004264:	46bd      	mov	sp, r7
 8004266:	b004      	add	sp, #16
 8004268:	bdb0      	pop	{r4, r5, r7, pc}
 800426a:	46c0      	nop			@ (mov r8, r8)
 800426c:	80002000 	.word	0x80002000

08004270 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004270:	b5b0      	push	{r4, r5, r7, lr}
 8004272:	b086      	sub	sp, #24
 8004274:	af02      	add	r7, sp, #8
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	000c      	movs	r4, r1
 800427a:	0010      	movs	r0, r2
 800427c:	0019      	movs	r1, r3
 800427e:	250a      	movs	r5, #10
 8004280:	197b      	adds	r3, r7, r5
 8004282:	1c22      	adds	r2, r4, #0
 8004284:	801a      	strh	r2, [r3, #0]
 8004286:	2308      	movs	r3, #8
 8004288:	18fb      	adds	r3, r7, r3
 800428a:	1c02      	adds	r2, r0, #0
 800428c:	801a      	strh	r2, [r3, #0]
 800428e:	1dbb      	adds	r3, r7, #6
 8004290:	1c0a      	adds	r2, r1, #0
 8004292:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004294:	1dbb      	adds	r3, r7, #6
 8004296:	881b      	ldrh	r3, [r3, #0]
 8004298:	b2da      	uxtb	r2, r3
 800429a:	197b      	adds	r3, r7, r5
 800429c:	8819      	ldrh	r1, [r3, #0]
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	4b23      	ldr	r3, [pc, #140]	@ (8004330 <I2C_RequestMemoryRead+0xc0>)
 80042a2:	9300      	str	r3, [sp, #0]
 80042a4:	2300      	movs	r3, #0
 80042a6:	f000 fa41 	bl	800472c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042ac:	6a39      	ldr	r1, [r7, #32]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	0018      	movs	r0, r3
 80042b2:	f000 f8b9 	bl	8004428 <I2C_WaitOnTXISFlagUntilTimeout>
 80042b6:	1e03      	subs	r3, r0, #0
 80042b8:	d001      	beq.n	80042be <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e033      	b.n	8004326 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80042be:	1dbb      	adds	r3, r7, #6
 80042c0:	881b      	ldrh	r3, [r3, #0]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d107      	bne.n	80042d6 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80042c6:	2308      	movs	r3, #8
 80042c8:	18fb      	adds	r3, r7, r3
 80042ca:	881b      	ldrh	r3, [r3, #0]
 80042cc:	b2da      	uxtb	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	629a      	str	r2, [r3, #40]	@ 0x28
 80042d4:	e019      	b.n	800430a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80042d6:	2308      	movs	r3, #8
 80042d8:	18fb      	adds	r3, r7, r3
 80042da:	881b      	ldrh	r3, [r3, #0]
 80042dc:	0a1b      	lsrs	r3, r3, #8
 80042de:	b29b      	uxth	r3, r3
 80042e0:	b2da      	uxtb	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042ea:	6a39      	ldr	r1, [r7, #32]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	0018      	movs	r0, r3
 80042f0:	f000 f89a 	bl	8004428 <I2C_WaitOnTXISFlagUntilTimeout>
 80042f4:	1e03      	subs	r3, r0, #0
 80042f6:	d001      	beq.n	80042fc <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e014      	b.n	8004326 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80042fc:	2308      	movs	r3, #8
 80042fe:	18fb      	adds	r3, r7, r3
 8004300:	881b      	ldrh	r3, [r3, #0]
 8004302:	b2da      	uxtb	r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800430a:	6a3a      	ldr	r2, [r7, #32]
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004310:	9300      	str	r3, [sp, #0]
 8004312:	0013      	movs	r3, r2
 8004314:	2200      	movs	r2, #0
 8004316:	2140      	movs	r1, #64	@ 0x40
 8004318:	f000 f82e 	bl	8004378 <I2C_WaitOnFlagUntilTimeout>
 800431c:	1e03      	subs	r3, r0, #0
 800431e:	d001      	beq.n	8004324 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e000      	b.n	8004326 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	0018      	movs	r0, r3
 8004328:	46bd      	mov	sp, r7
 800432a:	b004      	add	sp, #16
 800432c:	bdb0      	pop	{r4, r5, r7, pc}
 800432e:	46c0      	nop			@ (mov r8, r8)
 8004330:	80002000 	.word	0x80002000

08004334 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	2202      	movs	r2, #2
 8004344:	4013      	ands	r3, r2
 8004346:	2b02      	cmp	r3, #2
 8004348:	d103      	bne.n	8004352 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2200      	movs	r2, #0
 8004350:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	2201      	movs	r2, #1
 800435a:	4013      	ands	r3, r2
 800435c:	2b01      	cmp	r3, #1
 800435e:	d007      	beq.n	8004370 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	699a      	ldr	r2, [r3, #24]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2101      	movs	r1, #1
 800436c:	430a      	orrs	r2, r1
 800436e:	619a      	str	r2, [r3, #24]
  }
}
 8004370:	46c0      	nop			@ (mov r8, r8)
 8004372:	46bd      	mov	sp, r7
 8004374:	b002      	add	sp, #8
 8004376:	bd80      	pop	{r7, pc}

08004378 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	603b      	str	r3, [r7, #0]
 8004384:	1dfb      	adds	r3, r7, #7
 8004386:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004388:	e03a      	b.n	8004400 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800438a:	69ba      	ldr	r2, [r7, #24]
 800438c:	6839      	ldr	r1, [r7, #0]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	0018      	movs	r0, r3
 8004392:	f000 f8d3 	bl	800453c <I2C_IsErrorOccurred>
 8004396:	1e03      	subs	r3, r0, #0
 8004398:	d001      	beq.n	800439e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e040      	b.n	8004420 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	3301      	adds	r3, #1
 80043a2:	d02d      	beq.n	8004400 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043a4:	f7ff f87e 	bl	80034a4 <HAL_GetTick>
 80043a8:	0002      	movs	r2, r0
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	683a      	ldr	r2, [r7, #0]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d302      	bcc.n	80043ba <I2C_WaitOnFlagUntilTimeout+0x42>
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d122      	bne.n	8004400 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	699b      	ldr	r3, [r3, #24]
 80043c0:	68ba      	ldr	r2, [r7, #8]
 80043c2:	4013      	ands	r3, r2
 80043c4:	68ba      	ldr	r2, [r7, #8]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	425a      	negs	r2, r3
 80043ca:	4153      	adcs	r3, r2
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	001a      	movs	r2, r3
 80043d0:	1dfb      	adds	r3, r7, #7
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d113      	bne.n	8004400 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043dc:	2220      	movs	r2, #32
 80043de:	431a      	orrs	r2, r3
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2241      	movs	r2, #65	@ 0x41
 80043e8:	2120      	movs	r1, #32
 80043ea:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2242      	movs	r2, #66	@ 0x42
 80043f0:	2100      	movs	r1, #0
 80043f2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2240      	movs	r2, #64	@ 0x40
 80043f8:	2100      	movs	r1, #0
 80043fa:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e00f      	b.n	8004420 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	68ba      	ldr	r2, [r7, #8]
 8004408:	4013      	ands	r3, r2
 800440a:	68ba      	ldr	r2, [r7, #8]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	425a      	negs	r2, r3
 8004410:	4153      	adcs	r3, r2
 8004412:	b2db      	uxtb	r3, r3
 8004414:	001a      	movs	r2, r3
 8004416:	1dfb      	adds	r3, r7, #7
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	429a      	cmp	r2, r3
 800441c:	d0b5      	beq.n	800438a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	0018      	movs	r0, r3
 8004422:	46bd      	mov	sp, r7
 8004424:	b004      	add	sp, #16
 8004426:	bd80      	pop	{r7, pc}

08004428 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004434:	e032      	b.n	800449c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	68b9      	ldr	r1, [r7, #8]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	0018      	movs	r0, r3
 800443e:	f000 f87d 	bl	800453c <I2C_IsErrorOccurred>
 8004442:	1e03      	subs	r3, r0, #0
 8004444:	d001      	beq.n	800444a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e030      	b.n	80044ac <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	3301      	adds	r3, #1
 800444e:	d025      	beq.n	800449c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004450:	f7ff f828 	bl	80034a4 <HAL_GetTick>
 8004454:	0002      	movs	r2, r0
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	68ba      	ldr	r2, [r7, #8]
 800445c:	429a      	cmp	r2, r3
 800445e:	d302      	bcc.n	8004466 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d11a      	bne.n	800449c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	699b      	ldr	r3, [r3, #24]
 800446c:	2202      	movs	r2, #2
 800446e:	4013      	ands	r3, r2
 8004470:	2b02      	cmp	r3, #2
 8004472:	d013      	beq.n	800449c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004478:	2220      	movs	r2, #32
 800447a:	431a      	orrs	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2241      	movs	r2, #65	@ 0x41
 8004484:	2120      	movs	r1, #32
 8004486:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2242      	movs	r2, #66	@ 0x42
 800448c:	2100      	movs	r1, #0
 800448e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2240      	movs	r2, #64	@ 0x40
 8004494:	2100      	movs	r1, #0
 8004496:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e007      	b.n	80044ac <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	699b      	ldr	r3, [r3, #24]
 80044a2:	2202      	movs	r2, #2
 80044a4:	4013      	ands	r3, r2
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d1c5      	bne.n	8004436 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	0018      	movs	r0, r3
 80044ae:	46bd      	mov	sp, r7
 80044b0:	b004      	add	sp, #16
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044c0:	e02f      	b.n	8004522 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	68b9      	ldr	r1, [r7, #8]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	0018      	movs	r0, r3
 80044ca:	f000 f837 	bl	800453c <I2C_IsErrorOccurred>
 80044ce:	1e03      	subs	r3, r0, #0
 80044d0:	d001      	beq.n	80044d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e02d      	b.n	8004532 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044d6:	f7fe ffe5 	bl	80034a4 <HAL_GetTick>
 80044da:	0002      	movs	r2, r0
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	68ba      	ldr	r2, [r7, #8]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d302      	bcc.n	80044ec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d11a      	bne.n	8004522 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	2220      	movs	r2, #32
 80044f4:	4013      	ands	r3, r2
 80044f6:	2b20      	cmp	r3, #32
 80044f8:	d013      	beq.n	8004522 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044fe:	2220      	movs	r2, #32
 8004500:	431a      	orrs	r2, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2241      	movs	r2, #65	@ 0x41
 800450a:	2120      	movs	r1, #32
 800450c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2242      	movs	r2, #66	@ 0x42
 8004512:	2100      	movs	r1, #0
 8004514:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2240      	movs	r2, #64	@ 0x40
 800451a:	2100      	movs	r1, #0
 800451c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e007      	b.n	8004532 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	2220      	movs	r2, #32
 800452a:	4013      	ands	r3, r2
 800452c:	2b20      	cmp	r3, #32
 800452e:	d1c8      	bne.n	80044c2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004530:	2300      	movs	r3, #0
}
 8004532:	0018      	movs	r0, r3
 8004534:	46bd      	mov	sp, r7
 8004536:	b004      	add	sp, #16
 8004538:	bd80      	pop	{r7, pc}
	...

0800453c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b08a      	sub	sp, #40	@ 0x28
 8004540:	af00      	add	r7, sp, #0
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004548:	2327      	movs	r3, #39	@ 0x27
 800454a:	18fb      	adds	r3, r7, r3
 800454c:	2200      	movs	r2, #0
 800454e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004558:	2300      	movs	r3, #0
 800455a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	2210      	movs	r2, #16
 8004564:	4013      	ands	r3, r2
 8004566:	d100      	bne.n	800456a <I2C_IsErrorOccurred+0x2e>
 8004568:	e079      	b.n	800465e <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2210      	movs	r2, #16
 8004570:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004572:	e057      	b.n	8004624 <I2C_IsErrorOccurred+0xe8>
 8004574:	2227      	movs	r2, #39	@ 0x27
 8004576:	18bb      	adds	r3, r7, r2
 8004578:	18ba      	adds	r2, r7, r2
 800457a:	7812      	ldrb	r2, [r2, #0]
 800457c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	3301      	adds	r3, #1
 8004582:	d04f      	beq.n	8004624 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004584:	f7fe ff8e 	bl	80034a4 <HAL_GetTick>
 8004588:	0002      	movs	r2, r0
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	68ba      	ldr	r2, [r7, #8]
 8004590:	429a      	cmp	r2, r3
 8004592:	d302      	bcc.n	800459a <I2C_IsErrorOccurred+0x5e>
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d144      	bne.n	8004624 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	2380      	movs	r3, #128	@ 0x80
 80045a2:	01db      	lsls	r3, r3, #7
 80045a4:	4013      	ands	r3, r2
 80045a6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80045a8:	2013      	movs	r0, #19
 80045aa:	183b      	adds	r3, r7, r0
 80045ac:	68fa      	ldr	r2, [r7, #12]
 80045ae:	2142      	movs	r1, #66	@ 0x42
 80045b0:	5c52      	ldrb	r2, [r2, r1]
 80045b2:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	699a      	ldr	r2, [r3, #24]
 80045ba:	2380      	movs	r3, #128	@ 0x80
 80045bc:	021b      	lsls	r3, r3, #8
 80045be:	401a      	ands	r2, r3
 80045c0:	2380      	movs	r3, #128	@ 0x80
 80045c2:	021b      	lsls	r3, r3, #8
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d126      	bne.n	8004616 <I2C_IsErrorOccurred+0xda>
 80045c8:	697a      	ldr	r2, [r7, #20]
 80045ca:	2380      	movs	r3, #128	@ 0x80
 80045cc:	01db      	lsls	r3, r3, #7
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d021      	beq.n	8004616 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80045d2:	183b      	adds	r3, r7, r0
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	2b20      	cmp	r3, #32
 80045d8:	d01d      	beq.n	8004616 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	685a      	ldr	r2, [r3, #4]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2180      	movs	r1, #128	@ 0x80
 80045e6:	01c9      	lsls	r1, r1, #7
 80045e8:	430a      	orrs	r2, r1
 80045ea:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80045ec:	f7fe ff5a 	bl	80034a4 <HAL_GetTick>
 80045f0:	0003      	movs	r3, r0
 80045f2:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045f4:	e00f      	b.n	8004616 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80045f6:	f7fe ff55 	bl	80034a4 <HAL_GetTick>
 80045fa:	0002      	movs	r2, r0
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	2b19      	cmp	r3, #25
 8004602:	d908      	bls.n	8004616 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004604:	6a3b      	ldr	r3, [r7, #32]
 8004606:	2220      	movs	r2, #32
 8004608:	4313      	orrs	r3, r2
 800460a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800460c:	2327      	movs	r3, #39	@ 0x27
 800460e:	18fb      	adds	r3, r7, r3
 8004610:	2201      	movs	r2, #1
 8004612:	701a      	strb	r2, [r3, #0]

              break;
 8004614:	e006      	b.n	8004624 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	699b      	ldr	r3, [r3, #24]
 800461c:	2220      	movs	r2, #32
 800461e:	4013      	ands	r3, r2
 8004620:	2b20      	cmp	r3, #32
 8004622:	d1e8      	bne.n	80045f6 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	699b      	ldr	r3, [r3, #24]
 800462a:	2220      	movs	r2, #32
 800462c:	4013      	ands	r3, r2
 800462e:	2b20      	cmp	r3, #32
 8004630:	d004      	beq.n	800463c <I2C_IsErrorOccurred+0x100>
 8004632:	2327      	movs	r3, #39	@ 0x27
 8004634:	18fb      	adds	r3, r7, r3
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d09b      	beq.n	8004574 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800463c:	2327      	movs	r3, #39	@ 0x27
 800463e:	18fb      	adds	r3, r7, r3
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d103      	bne.n	800464e <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2220      	movs	r2, #32
 800464c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800464e:	6a3b      	ldr	r3, [r7, #32]
 8004650:	2204      	movs	r2, #4
 8004652:	4313      	orrs	r3, r2
 8004654:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004656:	2327      	movs	r3, #39	@ 0x27
 8004658:	18fb      	adds	r3, r7, r3
 800465a:	2201      	movs	r2, #1
 800465c:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	699b      	ldr	r3, [r3, #24]
 8004664:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004666:	69ba      	ldr	r2, [r7, #24]
 8004668:	2380      	movs	r3, #128	@ 0x80
 800466a:	005b      	lsls	r3, r3, #1
 800466c:	4013      	ands	r3, r2
 800466e:	d00c      	beq.n	800468a <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004670:	6a3b      	ldr	r3, [r7, #32]
 8004672:	2201      	movs	r2, #1
 8004674:	4313      	orrs	r3, r2
 8004676:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2280      	movs	r2, #128	@ 0x80
 800467e:	0052      	lsls	r2, r2, #1
 8004680:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004682:	2327      	movs	r3, #39	@ 0x27
 8004684:	18fb      	adds	r3, r7, r3
 8004686:	2201      	movs	r2, #1
 8004688:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800468a:	69ba      	ldr	r2, [r7, #24]
 800468c:	2380      	movs	r3, #128	@ 0x80
 800468e:	00db      	lsls	r3, r3, #3
 8004690:	4013      	ands	r3, r2
 8004692:	d00c      	beq.n	80046ae <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004694:	6a3b      	ldr	r3, [r7, #32]
 8004696:	2208      	movs	r2, #8
 8004698:	4313      	orrs	r3, r2
 800469a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2280      	movs	r2, #128	@ 0x80
 80046a2:	00d2      	lsls	r2, r2, #3
 80046a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80046a6:	2327      	movs	r3, #39	@ 0x27
 80046a8:	18fb      	adds	r3, r7, r3
 80046aa:	2201      	movs	r2, #1
 80046ac:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80046ae:	69ba      	ldr	r2, [r7, #24]
 80046b0:	2380      	movs	r3, #128	@ 0x80
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	4013      	ands	r3, r2
 80046b6:	d00c      	beq.n	80046d2 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80046b8:	6a3b      	ldr	r3, [r7, #32]
 80046ba:	2202      	movs	r2, #2
 80046bc:	4313      	orrs	r3, r2
 80046be:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2280      	movs	r2, #128	@ 0x80
 80046c6:	0092      	lsls	r2, r2, #2
 80046c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80046ca:	2327      	movs	r3, #39	@ 0x27
 80046cc:	18fb      	adds	r3, r7, r3
 80046ce:	2201      	movs	r2, #1
 80046d0:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80046d2:	2327      	movs	r3, #39	@ 0x27
 80046d4:	18fb      	adds	r3, r7, r3
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d01d      	beq.n	8004718 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	0018      	movs	r0, r3
 80046e0:	f7ff fe28 	bl	8004334 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	685a      	ldr	r2, [r3, #4]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	490e      	ldr	r1, [pc, #56]	@ (8004728 <I2C_IsErrorOccurred+0x1ec>)
 80046f0:	400a      	ands	r2, r1
 80046f2:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80046f8:	6a3b      	ldr	r3, [r7, #32]
 80046fa:	431a      	orrs	r2, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2241      	movs	r2, #65	@ 0x41
 8004704:	2120      	movs	r1, #32
 8004706:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2242      	movs	r2, #66	@ 0x42
 800470c:	2100      	movs	r1, #0
 800470e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2240      	movs	r2, #64	@ 0x40
 8004714:	2100      	movs	r1, #0
 8004716:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8004718:	2327      	movs	r3, #39	@ 0x27
 800471a:	18fb      	adds	r3, r7, r3
 800471c:	781b      	ldrb	r3, [r3, #0]
}
 800471e:	0018      	movs	r0, r3
 8004720:	46bd      	mov	sp, r7
 8004722:	b00a      	add	sp, #40	@ 0x28
 8004724:	bd80      	pop	{r7, pc}
 8004726:	46c0      	nop			@ (mov r8, r8)
 8004728:	fe00e800 	.word	0xfe00e800

0800472c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800472c:	b590      	push	{r4, r7, lr}
 800472e:	b087      	sub	sp, #28
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	0008      	movs	r0, r1
 8004736:	0011      	movs	r1, r2
 8004738:	607b      	str	r3, [r7, #4]
 800473a:	240a      	movs	r4, #10
 800473c:	193b      	adds	r3, r7, r4
 800473e:	1c02      	adds	r2, r0, #0
 8004740:	801a      	strh	r2, [r3, #0]
 8004742:	2009      	movs	r0, #9
 8004744:	183b      	adds	r3, r7, r0
 8004746:	1c0a      	adds	r2, r1, #0
 8004748:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800474a:	193b      	adds	r3, r7, r4
 800474c:	881b      	ldrh	r3, [r3, #0]
 800474e:	059b      	lsls	r3, r3, #22
 8004750:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004752:	183b      	adds	r3, r7, r0
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	0419      	lsls	r1, r3, #16
 8004758:	23ff      	movs	r3, #255	@ 0xff
 800475a:	041b      	lsls	r3, r3, #16
 800475c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800475e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004766:	4313      	orrs	r3, r2
 8004768:	005b      	lsls	r3, r3, #1
 800476a:	085b      	lsrs	r3, r3, #1
 800476c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004776:	0d51      	lsrs	r1, r2, #21
 8004778:	2280      	movs	r2, #128	@ 0x80
 800477a:	00d2      	lsls	r2, r2, #3
 800477c:	400a      	ands	r2, r1
 800477e:	4907      	ldr	r1, [pc, #28]	@ (800479c <I2C_TransferConfig+0x70>)
 8004780:	430a      	orrs	r2, r1
 8004782:	43d2      	mvns	r2, r2
 8004784:	401a      	ands	r2, r3
 8004786:	0011      	movs	r1, r2
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	697a      	ldr	r2, [r7, #20]
 800478e:	430a      	orrs	r2, r1
 8004790:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004792:	46c0      	nop			@ (mov r8, r8)
 8004794:	46bd      	mov	sp, r7
 8004796:	b007      	add	sp, #28
 8004798:	bd90      	pop	{r4, r7, pc}
 800479a:	46c0      	nop			@ (mov r8, r8)
 800479c:	03ff63ff 	.word	0x03ff63ff

080047a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2241      	movs	r2, #65	@ 0x41
 80047ae:	5c9b      	ldrb	r3, [r3, r2]
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	2b20      	cmp	r3, #32
 80047b4:	d138      	bne.n	8004828 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2240      	movs	r2, #64	@ 0x40
 80047ba:	5c9b      	ldrb	r3, [r3, r2]
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d101      	bne.n	80047c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80047c0:	2302      	movs	r3, #2
 80047c2:	e032      	b.n	800482a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2240      	movs	r2, #64	@ 0x40
 80047c8:	2101      	movs	r1, #1
 80047ca:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2241      	movs	r2, #65	@ 0x41
 80047d0:	2124      	movs	r1, #36	@ 0x24
 80047d2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2101      	movs	r1, #1
 80047e0:	438a      	bics	r2, r1
 80047e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4911      	ldr	r1, [pc, #68]	@ (8004834 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80047f0:	400a      	ands	r2, r1
 80047f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	6819      	ldr	r1, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	683a      	ldr	r2, [r7, #0]
 8004800:	430a      	orrs	r2, r1
 8004802:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2101      	movs	r1, #1
 8004810:	430a      	orrs	r2, r1
 8004812:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2241      	movs	r2, #65	@ 0x41
 8004818:	2120      	movs	r1, #32
 800481a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2240      	movs	r2, #64	@ 0x40
 8004820:	2100      	movs	r1, #0
 8004822:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004824:	2300      	movs	r3, #0
 8004826:	e000      	b.n	800482a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004828:	2302      	movs	r3, #2
  }
}
 800482a:	0018      	movs	r0, r3
 800482c:	46bd      	mov	sp, r7
 800482e:	b002      	add	sp, #8
 8004830:	bd80      	pop	{r7, pc}
 8004832:	46c0      	nop			@ (mov r8, r8)
 8004834:	ffffefff 	.word	0xffffefff

08004838 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2241      	movs	r2, #65	@ 0x41
 8004846:	5c9b      	ldrb	r3, [r3, r2]
 8004848:	b2db      	uxtb	r3, r3
 800484a:	2b20      	cmp	r3, #32
 800484c:	d139      	bne.n	80048c2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2240      	movs	r2, #64	@ 0x40
 8004852:	5c9b      	ldrb	r3, [r3, r2]
 8004854:	2b01      	cmp	r3, #1
 8004856:	d101      	bne.n	800485c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004858:	2302      	movs	r3, #2
 800485a:	e033      	b.n	80048c4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2240      	movs	r2, #64	@ 0x40
 8004860:	2101      	movs	r1, #1
 8004862:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2241      	movs	r2, #65	@ 0x41
 8004868:	2124      	movs	r1, #36	@ 0x24
 800486a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2101      	movs	r1, #1
 8004878:	438a      	bics	r2, r1
 800487a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	4a11      	ldr	r2, [pc, #68]	@ (80048cc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004888:	4013      	ands	r3, r2
 800488a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	021b      	lsls	r3, r3, #8
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	4313      	orrs	r3, r2
 8004894:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2101      	movs	r1, #1
 80048aa:	430a      	orrs	r2, r1
 80048ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2241      	movs	r2, #65	@ 0x41
 80048b2:	2120      	movs	r1, #32
 80048b4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2240      	movs	r2, #64	@ 0x40
 80048ba:	2100      	movs	r1, #0
 80048bc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80048be:	2300      	movs	r3, #0
 80048c0:	e000      	b.n	80048c4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80048c2:	2302      	movs	r3, #2
  }
}
 80048c4:	0018      	movs	r0, r3
 80048c6:	46bd      	mov	sp, r7
 80048c8:	b004      	add	sp, #16
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	fffff0ff 	.word	0xfffff0ff

080048d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80048d8:	4b19      	ldr	r3, [pc, #100]	@ (8004940 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a19      	ldr	r2, [pc, #100]	@ (8004944 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80048de:	4013      	ands	r3, r2
 80048e0:	0019      	movs	r1, r3
 80048e2:	4b17      	ldr	r3, [pc, #92]	@ (8004940 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	430a      	orrs	r2, r1
 80048e8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	2380      	movs	r3, #128	@ 0x80
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d11f      	bne.n	8004934 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80048f4:	4b14      	ldr	r3, [pc, #80]	@ (8004948 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	0013      	movs	r3, r2
 80048fa:	005b      	lsls	r3, r3, #1
 80048fc:	189b      	adds	r3, r3, r2
 80048fe:	005b      	lsls	r3, r3, #1
 8004900:	4912      	ldr	r1, [pc, #72]	@ (800494c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004902:	0018      	movs	r0, r3
 8004904:	f7fb fc10 	bl	8000128 <__udivsi3>
 8004908:	0003      	movs	r3, r0
 800490a:	3301      	adds	r3, #1
 800490c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800490e:	e008      	b.n	8004922 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d003      	beq.n	800491e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	3b01      	subs	r3, #1
 800491a:	60fb      	str	r3, [r7, #12]
 800491c:	e001      	b.n	8004922 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e009      	b.n	8004936 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004922:	4b07      	ldr	r3, [pc, #28]	@ (8004940 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004924:	695a      	ldr	r2, [r3, #20]
 8004926:	2380      	movs	r3, #128	@ 0x80
 8004928:	00db      	lsls	r3, r3, #3
 800492a:	401a      	ands	r2, r3
 800492c:	2380      	movs	r3, #128	@ 0x80
 800492e:	00db      	lsls	r3, r3, #3
 8004930:	429a      	cmp	r2, r3
 8004932:	d0ed      	beq.n	8004910 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	0018      	movs	r0, r3
 8004938:	46bd      	mov	sp, r7
 800493a:	b004      	add	sp, #16
 800493c:	bd80      	pop	{r7, pc}
 800493e:	46c0      	nop			@ (mov r8, r8)
 8004940:	40007000 	.word	0x40007000
 8004944:	fffff9ff 	.word	0xfffff9ff
 8004948:	20000014 	.word	0x20000014
 800494c:	000f4240 	.word	0x000f4240

08004950 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b088      	sub	sp, #32
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d101      	bne.n	8004962 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e2fe      	b.n	8004f60 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	2201      	movs	r2, #1
 8004968:	4013      	ands	r3, r2
 800496a:	d100      	bne.n	800496e <HAL_RCC_OscConfig+0x1e>
 800496c:	e07c      	b.n	8004a68 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800496e:	4bc3      	ldr	r3, [pc, #780]	@ (8004c7c <HAL_RCC_OscConfig+0x32c>)
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	2238      	movs	r2, #56	@ 0x38
 8004974:	4013      	ands	r3, r2
 8004976:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004978:	4bc0      	ldr	r3, [pc, #768]	@ (8004c7c <HAL_RCC_OscConfig+0x32c>)
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	2203      	movs	r2, #3
 800497e:	4013      	ands	r3, r2
 8004980:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	2b10      	cmp	r3, #16
 8004986:	d102      	bne.n	800498e <HAL_RCC_OscConfig+0x3e>
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	2b03      	cmp	r3, #3
 800498c:	d002      	beq.n	8004994 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	2b08      	cmp	r3, #8
 8004992:	d10b      	bne.n	80049ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004994:	4bb9      	ldr	r3, [pc, #740]	@ (8004c7c <HAL_RCC_OscConfig+0x32c>)
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	2380      	movs	r3, #128	@ 0x80
 800499a:	029b      	lsls	r3, r3, #10
 800499c:	4013      	ands	r3, r2
 800499e:	d062      	beq.n	8004a66 <HAL_RCC_OscConfig+0x116>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d15e      	bne.n	8004a66 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e2d9      	b.n	8004f60 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685a      	ldr	r2, [r3, #4]
 80049b0:	2380      	movs	r3, #128	@ 0x80
 80049b2:	025b      	lsls	r3, r3, #9
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d107      	bne.n	80049c8 <HAL_RCC_OscConfig+0x78>
 80049b8:	4bb0      	ldr	r3, [pc, #704]	@ (8004c7c <HAL_RCC_OscConfig+0x32c>)
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	4baf      	ldr	r3, [pc, #700]	@ (8004c7c <HAL_RCC_OscConfig+0x32c>)
 80049be:	2180      	movs	r1, #128	@ 0x80
 80049c0:	0249      	lsls	r1, r1, #9
 80049c2:	430a      	orrs	r2, r1
 80049c4:	601a      	str	r2, [r3, #0]
 80049c6:	e020      	b.n	8004a0a <HAL_RCC_OscConfig+0xba>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685a      	ldr	r2, [r3, #4]
 80049cc:	23a0      	movs	r3, #160	@ 0xa0
 80049ce:	02db      	lsls	r3, r3, #11
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d10e      	bne.n	80049f2 <HAL_RCC_OscConfig+0xa2>
 80049d4:	4ba9      	ldr	r3, [pc, #676]	@ (8004c7c <HAL_RCC_OscConfig+0x32c>)
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	4ba8      	ldr	r3, [pc, #672]	@ (8004c7c <HAL_RCC_OscConfig+0x32c>)
 80049da:	2180      	movs	r1, #128	@ 0x80
 80049dc:	02c9      	lsls	r1, r1, #11
 80049de:	430a      	orrs	r2, r1
 80049e0:	601a      	str	r2, [r3, #0]
 80049e2:	4ba6      	ldr	r3, [pc, #664]	@ (8004c7c <HAL_RCC_OscConfig+0x32c>)
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	4ba5      	ldr	r3, [pc, #660]	@ (8004c7c <HAL_RCC_OscConfig+0x32c>)
 80049e8:	2180      	movs	r1, #128	@ 0x80
 80049ea:	0249      	lsls	r1, r1, #9
 80049ec:	430a      	orrs	r2, r1
 80049ee:	601a      	str	r2, [r3, #0]
 80049f0:	e00b      	b.n	8004a0a <HAL_RCC_OscConfig+0xba>
 80049f2:	4ba2      	ldr	r3, [pc, #648]	@ (8004c7c <HAL_RCC_OscConfig+0x32c>)
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	4ba1      	ldr	r3, [pc, #644]	@ (8004c7c <HAL_RCC_OscConfig+0x32c>)
 80049f8:	49a1      	ldr	r1, [pc, #644]	@ (8004c80 <HAL_RCC_OscConfig+0x330>)
 80049fa:	400a      	ands	r2, r1
 80049fc:	601a      	str	r2, [r3, #0]
 80049fe:	4b9f      	ldr	r3, [pc, #636]	@ (8004c7c <HAL_RCC_OscConfig+0x32c>)
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	4b9e      	ldr	r3, [pc, #632]	@ (8004c7c <HAL_RCC_OscConfig+0x32c>)
 8004a04:	499f      	ldr	r1, [pc, #636]	@ (8004c84 <HAL_RCC_OscConfig+0x334>)
 8004a06:	400a      	ands	r2, r1
 8004a08:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d014      	beq.n	8004a3c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a12:	f7fe fd47 	bl	80034a4 <HAL_GetTick>
 8004a16:	0003      	movs	r3, r0
 8004a18:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a1a:	e008      	b.n	8004a2e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a1c:	f7fe fd42 	bl	80034a4 <HAL_GetTick>
 8004a20:	0002      	movs	r2, r0
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	2b64      	cmp	r3, #100	@ 0x64
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e298      	b.n	8004f60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a2e:	4b93      	ldr	r3, [pc, #588]	@ (8004c7c <HAL_RCC_OscConfig+0x32c>)
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	2380      	movs	r3, #128	@ 0x80
 8004a34:	029b      	lsls	r3, r3, #10
 8004a36:	4013      	ands	r3, r2
 8004a38:	d0f0      	beq.n	8004a1c <HAL_RCC_OscConfig+0xcc>
 8004a3a:	e015      	b.n	8004a68 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a3c:	f7fe fd32 	bl	80034a4 <HAL_GetTick>
 8004a40:	0003      	movs	r3, r0
 8004a42:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a44:	e008      	b.n	8004a58 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a46:	f7fe fd2d 	bl	80034a4 <HAL_GetTick>
 8004a4a:	0002      	movs	r2, r0
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	2b64      	cmp	r3, #100	@ 0x64
 8004a52:	d901      	bls.n	8004a58 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e283      	b.n	8004f60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a58:	4b88      	ldr	r3, [pc, #544]	@ (8004c7c <HAL_RCC_OscConfig+0x32c>)
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	2380      	movs	r3, #128	@ 0x80
 8004a5e:	029b      	lsls	r3, r3, #10
 8004a60:	4013      	ands	r3, r2
 8004a62:	d1f0      	bne.n	8004a46 <HAL_RCC_OscConfig+0xf6>
 8004a64:	e000      	b.n	8004a68 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a66:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2202      	movs	r2, #2
 8004a6e:	4013      	ands	r3, r2
 8004a70:	d100      	bne.n	8004a74 <HAL_RCC_OscConfig+0x124>
 8004a72:	e099      	b.n	8004ba8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a74:	4b81      	ldr	r3, [pc, #516]	@ (8004c7c <HAL_RCC_OscConfig+0x32c>)
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	2238      	movs	r2, #56	@ 0x38
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a7e:	4b7f      	ldr	r3, [pc, #508]	@ (8004c7c <HAL_RCC_OscConfig+0x32c>)
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	2203      	movs	r2, #3
 8004a84:	4013      	ands	r3, r2
 8004a86:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	2b10      	cmp	r3, #16
 8004a8c:	d102      	bne.n	8004a94 <HAL_RCC_OscConfig+0x144>
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	d002      	beq.n	8004a9a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d135      	bne.n	8004b06 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a9a:	4b78      	ldr	r3, [pc, #480]	@ (8004c7c <HAL_RCC_OscConfig+0x32c>)
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	2380      	movs	r3, #128	@ 0x80
 8004aa0:	00db      	lsls	r3, r3, #3
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	d005      	beq.n	8004ab2 <HAL_RCC_OscConfig+0x162>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d101      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e256      	b.n	8004f60 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ab2:	4b72      	ldr	r3, [pc, #456]	@ (8004c7c <HAL_RCC_OscConfig+0x32c>)
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	4a74      	ldr	r2, [pc, #464]	@ (8004c88 <HAL_RCC_OscConfig+0x338>)
 8004ab8:	4013      	ands	r3, r2
 8004aba:	0019      	movs	r1, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	695b      	ldr	r3, [r3, #20]
 8004ac0:	021a      	lsls	r2, r3, #8
 8004ac2:	4b6e      	ldr	r3, [pc, #440]	@ (8004c7c <HAL_RCC_OscConfig+0x32c>)
 8004ac4:	430a      	orrs	r2, r1
 8004ac6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d112      	bne.n	8004af4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004ace:	4b6b      	ldr	r3, [pc, #428]	@ (8004c7c <HAL_RCC_OscConfig+0x32c>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a6e      	ldr	r2, [pc, #440]	@ (8004c8c <HAL_RCC_OscConfig+0x33c>)
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	0019      	movs	r1, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	691a      	ldr	r2, [r3, #16]
 8004adc:	4b67      	ldr	r3, [pc, #412]	@ (8004c7c <HAL_RCC_OscConfig+0x32c>)
 8004ade:	430a      	orrs	r2, r1
 8004ae0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004ae2:	4b66      	ldr	r3, [pc, #408]	@ (8004c7c <HAL_RCC_OscConfig+0x32c>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	0adb      	lsrs	r3, r3, #11
 8004ae8:	2207      	movs	r2, #7
 8004aea:	4013      	ands	r3, r2
 8004aec:	4a68      	ldr	r2, [pc, #416]	@ (8004c90 <HAL_RCC_OscConfig+0x340>)
 8004aee:	40da      	lsrs	r2, r3
 8004af0:	4b68      	ldr	r3, [pc, #416]	@ (8004c94 <HAL_RCC_OscConfig+0x344>)
 8004af2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004af4:	4b68      	ldr	r3, [pc, #416]	@ (8004c98 <HAL_RCC_OscConfig+0x348>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	0018      	movs	r0, r3
 8004afa:	f7fe fc77 	bl	80033ec <HAL_InitTick>
 8004afe:	1e03      	subs	r3, r0, #0
 8004b00:	d051      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e22c      	b.n	8004f60 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d030      	beq.n	8004b70 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004b0e:	4b5b      	ldr	r3, [pc, #364]	@ (8004c7c <HAL_RCC_OscConfig+0x32c>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a5e      	ldr	r2, [pc, #376]	@ (8004c8c <HAL_RCC_OscConfig+0x33c>)
 8004b14:	4013      	ands	r3, r2
 8004b16:	0019      	movs	r1, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	691a      	ldr	r2, [r3, #16]
 8004b1c:	4b57      	ldr	r3, [pc, #348]	@ (8004c7c <HAL_RCC_OscConfig+0x32c>)
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004b22:	4b56      	ldr	r3, [pc, #344]	@ (8004c7c <HAL_RCC_OscConfig+0x32c>)
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	4b55      	ldr	r3, [pc, #340]	@ (8004c7c <HAL_RCC_OscConfig+0x32c>)
 8004b28:	2180      	movs	r1, #128	@ 0x80
 8004b2a:	0049      	lsls	r1, r1, #1
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b30:	f7fe fcb8 	bl	80034a4 <HAL_GetTick>
 8004b34:	0003      	movs	r3, r0
 8004b36:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b38:	e008      	b.n	8004b4c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b3a:	f7fe fcb3 	bl	80034a4 <HAL_GetTick>
 8004b3e:	0002      	movs	r2, r0
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d901      	bls.n	8004b4c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e209      	b.n	8004f60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b4c:	4b4b      	ldr	r3, [pc, #300]	@ (8004c7c <HAL_RCC_OscConfig+0x32c>)
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	2380      	movs	r3, #128	@ 0x80
 8004b52:	00db      	lsls	r3, r3, #3
 8004b54:	4013      	ands	r3, r2
 8004b56:	d0f0      	beq.n	8004b3a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b58:	4b48      	ldr	r3, [pc, #288]	@ (8004c7c <HAL_RCC_OscConfig+0x32c>)
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	4a4a      	ldr	r2, [pc, #296]	@ (8004c88 <HAL_RCC_OscConfig+0x338>)
 8004b5e:	4013      	ands	r3, r2
 8004b60:	0019      	movs	r1, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	695b      	ldr	r3, [r3, #20]
 8004b66:	021a      	lsls	r2, r3, #8
 8004b68:	4b44      	ldr	r3, [pc, #272]	@ (8004c7c <HAL_RCC_OscConfig+0x32c>)
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	605a      	str	r2, [r3, #4]
 8004b6e:	e01b      	b.n	8004ba8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004b70:	4b42      	ldr	r3, [pc, #264]	@ (8004c7c <HAL_RCC_OscConfig+0x32c>)
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	4b41      	ldr	r3, [pc, #260]	@ (8004c7c <HAL_RCC_OscConfig+0x32c>)
 8004b76:	4949      	ldr	r1, [pc, #292]	@ (8004c9c <HAL_RCC_OscConfig+0x34c>)
 8004b78:	400a      	ands	r2, r1
 8004b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b7c:	f7fe fc92 	bl	80034a4 <HAL_GetTick>
 8004b80:	0003      	movs	r3, r0
 8004b82:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b84:	e008      	b.n	8004b98 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b86:	f7fe fc8d 	bl	80034a4 <HAL_GetTick>
 8004b8a:	0002      	movs	r2, r0
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	d901      	bls.n	8004b98 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	e1e3      	b.n	8004f60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b98:	4b38      	ldr	r3, [pc, #224]	@ (8004c7c <HAL_RCC_OscConfig+0x32c>)
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	2380      	movs	r3, #128	@ 0x80
 8004b9e:	00db      	lsls	r3, r3, #3
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	d1f0      	bne.n	8004b86 <HAL_RCC_OscConfig+0x236>
 8004ba4:	e000      	b.n	8004ba8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ba6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2208      	movs	r2, #8
 8004bae:	4013      	ands	r3, r2
 8004bb0:	d047      	beq.n	8004c42 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004bb2:	4b32      	ldr	r3, [pc, #200]	@ (8004c7c <HAL_RCC_OscConfig+0x32c>)
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	2238      	movs	r2, #56	@ 0x38
 8004bb8:	4013      	ands	r3, r2
 8004bba:	2b18      	cmp	r3, #24
 8004bbc:	d10a      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004bbe:	4b2f      	ldr	r3, [pc, #188]	@ (8004c7c <HAL_RCC_OscConfig+0x32c>)
 8004bc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bc2:	2202      	movs	r2, #2
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	d03c      	beq.n	8004c42 <HAL_RCC_OscConfig+0x2f2>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	699b      	ldr	r3, [r3, #24]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d138      	bne.n	8004c42 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e1c5      	b.n	8004f60 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d019      	beq.n	8004c10 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004bdc:	4b27      	ldr	r3, [pc, #156]	@ (8004c7c <HAL_RCC_OscConfig+0x32c>)
 8004bde:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004be0:	4b26      	ldr	r3, [pc, #152]	@ (8004c7c <HAL_RCC_OscConfig+0x32c>)
 8004be2:	2101      	movs	r1, #1
 8004be4:	430a      	orrs	r2, r1
 8004be6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be8:	f7fe fc5c 	bl	80034a4 <HAL_GetTick>
 8004bec:	0003      	movs	r3, r0
 8004bee:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004bf0:	e008      	b.n	8004c04 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bf2:	f7fe fc57 	bl	80034a4 <HAL_GetTick>
 8004bf6:	0002      	movs	r2, r0
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d901      	bls.n	8004c04 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e1ad      	b.n	8004f60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c04:	4b1d      	ldr	r3, [pc, #116]	@ (8004c7c <HAL_RCC_OscConfig+0x32c>)
 8004c06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c08:	2202      	movs	r2, #2
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	d0f1      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x2a2>
 8004c0e:	e018      	b.n	8004c42 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004c10:	4b1a      	ldr	r3, [pc, #104]	@ (8004c7c <HAL_RCC_OscConfig+0x32c>)
 8004c12:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004c14:	4b19      	ldr	r3, [pc, #100]	@ (8004c7c <HAL_RCC_OscConfig+0x32c>)
 8004c16:	2101      	movs	r1, #1
 8004c18:	438a      	bics	r2, r1
 8004c1a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c1c:	f7fe fc42 	bl	80034a4 <HAL_GetTick>
 8004c20:	0003      	movs	r3, r0
 8004c22:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c24:	e008      	b.n	8004c38 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c26:	f7fe fc3d 	bl	80034a4 <HAL_GetTick>
 8004c2a:	0002      	movs	r2, r0
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d901      	bls.n	8004c38 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e193      	b.n	8004f60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c38:	4b10      	ldr	r3, [pc, #64]	@ (8004c7c <HAL_RCC_OscConfig+0x32c>)
 8004c3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c3c:	2202      	movs	r2, #2
 8004c3e:	4013      	ands	r3, r2
 8004c40:	d1f1      	bne.n	8004c26 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2204      	movs	r2, #4
 8004c48:	4013      	ands	r3, r2
 8004c4a:	d100      	bne.n	8004c4e <HAL_RCC_OscConfig+0x2fe>
 8004c4c:	e0c6      	b.n	8004ddc <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c4e:	231f      	movs	r3, #31
 8004c50:	18fb      	adds	r3, r7, r3
 8004c52:	2200      	movs	r2, #0
 8004c54:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004c56:	4b09      	ldr	r3, [pc, #36]	@ (8004c7c <HAL_RCC_OscConfig+0x32c>)
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	2238      	movs	r2, #56	@ 0x38
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	2b20      	cmp	r3, #32
 8004c60:	d11e      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004c62:	4b06      	ldr	r3, [pc, #24]	@ (8004c7c <HAL_RCC_OscConfig+0x32c>)
 8004c64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c66:	2202      	movs	r2, #2
 8004c68:	4013      	ands	r3, r2
 8004c6a:	d100      	bne.n	8004c6e <HAL_RCC_OscConfig+0x31e>
 8004c6c:	e0b6      	b.n	8004ddc <HAL_RCC_OscConfig+0x48c>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d000      	beq.n	8004c78 <HAL_RCC_OscConfig+0x328>
 8004c76:	e0b1      	b.n	8004ddc <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e171      	b.n	8004f60 <HAL_RCC_OscConfig+0x610>
 8004c7c:	40021000 	.word	0x40021000
 8004c80:	fffeffff 	.word	0xfffeffff
 8004c84:	fffbffff 	.word	0xfffbffff
 8004c88:	ffff80ff 	.word	0xffff80ff
 8004c8c:	ffffc7ff 	.word	0xffffc7ff
 8004c90:	00f42400 	.word	0x00f42400
 8004c94:	20000014 	.word	0x20000014
 8004c98:	20000044 	.word	0x20000044
 8004c9c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004ca0:	4bb1      	ldr	r3, [pc, #708]	@ (8004f68 <HAL_RCC_OscConfig+0x618>)
 8004ca2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ca4:	2380      	movs	r3, #128	@ 0x80
 8004ca6:	055b      	lsls	r3, r3, #21
 8004ca8:	4013      	ands	r3, r2
 8004caa:	d101      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x360>
 8004cac:	2301      	movs	r3, #1
 8004cae:	e000      	b.n	8004cb2 <HAL_RCC_OscConfig+0x362>
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d011      	beq.n	8004cda <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004cb6:	4bac      	ldr	r3, [pc, #688]	@ (8004f68 <HAL_RCC_OscConfig+0x618>)
 8004cb8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004cba:	4bab      	ldr	r3, [pc, #684]	@ (8004f68 <HAL_RCC_OscConfig+0x618>)
 8004cbc:	2180      	movs	r1, #128	@ 0x80
 8004cbe:	0549      	lsls	r1, r1, #21
 8004cc0:	430a      	orrs	r2, r1
 8004cc2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004cc4:	4ba8      	ldr	r3, [pc, #672]	@ (8004f68 <HAL_RCC_OscConfig+0x618>)
 8004cc6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004cc8:	2380      	movs	r3, #128	@ 0x80
 8004cca:	055b      	lsls	r3, r3, #21
 8004ccc:	4013      	ands	r3, r2
 8004cce:	60fb      	str	r3, [r7, #12]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004cd2:	231f      	movs	r3, #31
 8004cd4:	18fb      	adds	r3, r7, r3
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cda:	4ba4      	ldr	r3, [pc, #656]	@ (8004f6c <HAL_RCC_OscConfig+0x61c>)
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	2380      	movs	r3, #128	@ 0x80
 8004ce0:	005b      	lsls	r3, r3, #1
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	d11a      	bne.n	8004d1c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ce6:	4ba1      	ldr	r3, [pc, #644]	@ (8004f6c <HAL_RCC_OscConfig+0x61c>)
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	4ba0      	ldr	r3, [pc, #640]	@ (8004f6c <HAL_RCC_OscConfig+0x61c>)
 8004cec:	2180      	movs	r1, #128	@ 0x80
 8004cee:	0049      	lsls	r1, r1, #1
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004cf4:	f7fe fbd6 	bl	80034a4 <HAL_GetTick>
 8004cf8:	0003      	movs	r3, r0
 8004cfa:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cfc:	e008      	b.n	8004d10 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cfe:	f7fe fbd1 	bl	80034a4 <HAL_GetTick>
 8004d02:	0002      	movs	r2, r0
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d901      	bls.n	8004d10 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	e127      	b.n	8004f60 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d10:	4b96      	ldr	r3, [pc, #600]	@ (8004f6c <HAL_RCC_OscConfig+0x61c>)
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	2380      	movs	r3, #128	@ 0x80
 8004d16:	005b      	lsls	r3, r3, #1
 8004d18:	4013      	ands	r3, r2
 8004d1a:	d0f0      	beq.n	8004cfe <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d106      	bne.n	8004d32 <HAL_RCC_OscConfig+0x3e2>
 8004d24:	4b90      	ldr	r3, [pc, #576]	@ (8004f68 <HAL_RCC_OscConfig+0x618>)
 8004d26:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004d28:	4b8f      	ldr	r3, [pc, #572]	@ (8004f68 <HAL_RCC_OscConfig+0x618>)
 8004d2a:	2101      	movs	r1, #1
 8004d2c:	430a      	orrs	r2, r1
 8004d2e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004d30:	e01c      	b.n	8004d6c <HAL_RCC_OscConfig+0x41c>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	2b05      	cmp	r3, #5
 8004d38:	d10c      	bne.n	8004d54 <HAL_RCC_OscConfig+0x404>
 8004d3a:	4b8b      	ldr	r3, [pc, #556]	@ (8004f68 <HAL_RCC_OscConfig+0x618>)
 8004d3c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004d3e:	4b8a      	ldr	r3, [pc, #552]	@ (8004f68 <HAL_RCC_OscConfig+0x618>)
 8004d40:	2104      	movs	r1, #4
 8004d42:	430a      	orrs	r2, r1
 8004d44:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004d46:	4b88      	ldr	r3, [pc, #544]	@ (8004f68 <HAL_RCC_OscConfig+0x618>)
 8004d48:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004d4a:	4b87      	ldr	r3, [pc, #540]	@ (8004f68 <HAL_RCC_OscConfig+0x618>)
 8004d4c:	2101      	movs	r1, #1
 8004d4e:	430a      	orrs	r2, r1
 8004d50:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004d52:	e00b      	b.n	8004d6c <HAL_RCC_OscConfig+0x41c>
 8004d54:	4b84      	ldr	r3, [pc, #528]	@ (8004f68 <HAL_RCC_OscConfig+0x618>)
 8004d56:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004d58:	4b83      	ldr	r3, [pc, #524]	@ (8004f68 <HAL_RCC_OscConfig+0x618>)
 8004d5a:	2101      	movs	r1, #1
 8004d5c:	438a      	bics	r2, r1
 8004d5e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004d60:	4b81      	ldr	r3, [pc, #516]	@ (8004f68 <HAL_RCC_OscConfig+0x618>)
 8004d62:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004d64:	4b80      	ldr	r3, [pc, #512]	@ (8004f68 <HAL_RCC_OscConfig+0x618>)
 8004d66:	2104      	movs	r1, #4
 8004d68:	438a      	bics	r2, r1
 8004d6a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d014      	beq.n	8004d9e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d74:	f7fe fb96 	bl	80034a4 <HAL_GetTick>
 8004d78:	0003      	movs	r3, r0
 8004d7a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d7c:	e009      	b.n	8004d92 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d7e:	f7fe fb91 	bl	80034a4 <HAL_GetTick>
 8004d82:	0002      	movs	r2, r0
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	4a79      	ldr	r2, [pc, #484]	@ (8004f70 <HAL_RCC_OscConfig+0x620>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d901      	bls.n	8004d92 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e0e6      	b.n	8004f60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d92:	4b75      	ldr	r3, [pc, #468]	@ (8004f68 <HAL_RCC_OscConfig+0x618>)
 8004d94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d96:	2202      	movs	r2, #2
 8004d98:	4013      	ands	r3, r2
 8004d9a:	d0f0      	beq.n	8004d7e <HAL_RCC_OscConfig+0x42e>
 8004d9c:	e013      	b.n	8004dc6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d9e:	f7fe fb81 	bl	80034a4 <HAL_GetTick>
 8004da2:	0003      	movs	r3, r0
 8004da4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004da6:	e009      	b.n	8004dbc <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004da8:	f7fe fb7c 	bl	80034a4 <HAL_GetTick>
 8004dac:	0002      	movs	r2, r0
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	4a6f      	ldr	r2, [pc, #444]	@ (8004f70 <HAL_RCC_OscConfig+0x620>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d901      	bls.n	8004dbc <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e0d1      	b.n	8004f60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004dbc:	4b6a      	ldr	r3, [pc, #424]	@ (8004f68 <HAL_RCC_OscConfig+0x618>)
 8004dbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dc0:	2202      	movs	r2, #2
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	d1f0      	bne.n	8004da8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004dc6:	231f      	movs	r3, #31
 8004dc8:	18fb      	adds	r3, r7, r3
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d105      	bne.n	8004ddc <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004dd0:	4b65      	ldr	r3, [pc, #404]	@ (8004f68 <HAL_RCC_OscConfig+0x618>)
 8004dd2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004dd4:	4b64      	ldr	r3, [pc, #400]	@ (8004f68 <HAL_RCC_OscConfig+0x618>)
 8004dd6:	4967      	ldr	r1, [pc, #412]	@ (8004f74 <HAL_RCC_OscConfig+0x624>)
 8004dd8:	400a      	ands	r2, r1
 8004dda:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	69db      	ldr	r3, [r3, #28]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d100      	bne.n	8004de6 <HAL_RCC_OscConfig+0x496>
 8004de4:	e0bb      	b.n	8004f5e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004de6:	4b60      	ldr	r3, [pc, #384]	@ (8004f68 <HAL_RCC_OscConfig+0x618>)
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	2238      	movs	r2, #56	@ 0x38
 8004dec:	4013      	ands	r3, r2
 8004dee:	2b10      	cmp	r3, #16
 8004df0:	d100      	bne.n	8004df4 <HAL_RCC_OscConfig+0x4a4>
 8004df2:	e07b      	b.n	8004eec <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	69db      	ldr	r3, [r3, #28]
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d156      	bne.n	8004eaa <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dfc:	4b5a      	ldr	r3, [pc, #360]	@ (8004f68 <HAL_RCC_OscConfig+0x618>)
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	4b59      	ldr	r3, [pc, #356]	@ (8004f68 <HAL_RCC_OscConfig+0x618>)
 8004e02:	495d      	ldr	r1, [pc, #372]	@ (8004f78 <HAL_RCC_OscConfig+0x628>)
 8004e04:	400a      	ands	r2, r1
 8004e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e08:	f7fe fb4c 	bl	80034a4 <HAL_GetTick>
 8004e0c:	0003      	movs	r3, r0
 8004e0e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e10:	e008      	b.n	8004e24 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e12:	f7fe fb47 	bl	80034a4 <HAL_GetTick>
 8004e16:	0002      	movs	r2, r0
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d901      	bls.n	8004e24 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e09d      	b.n	8004f60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e24:	4b50      	ldr	r3, [pc, #320]	@ (8004f68 <HAL_RCC_OscConfig+0x618>)
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	2380      	movs	r3, #128	@ 0x80
 8004e2a:	049b      	lsls	r3, r3, #18
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	d1f0      	bne.n	8004e12 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e30:	4b4d      	ldr	r3, [pc, #308]	@ (8004f68 <HAL_RCC_OscConfig+0x618>)
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	4a51      	ldr	r2, [pc, #324]	@ (8004f7c <HAL_RCC_OscConfig+0x62c>)
 8004e36:	4013      	ands	r3, r2
 8004e38:	0019      	movs	r1, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a1a      	ldr	r2, [r3, #32]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e42:	431a      	orrs	r2, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e48:	021b      	lsls	r3, r3, #8
 8004e4a:	431a      	orrs	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e50:	431a      	orrs	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e56:	431a      	orrs	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e5c:	431a      	orrs	r2, r3
 8004e5e:	4b42      	ldr	r3, [pc, #264]	@ (8004f68 <HAL_RCC_OscConfig+0x618>)
 8004e60:	430a      	orrs	r2, r1
 8004e62:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e64:	4b40      	ldr	r3, [pc, #256]	@ (8004f68 <HAL_RCC_OscConfig+0x618>)
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	4b3f      	ldr	r3, [pc, #252]	@ (8004f68 <HAL_RCC_OscConfig+0x618>)
 8004e6a:	2180      	movs	r1, #128	@ 0x80
 8004e6c:	0449      	lsls	r1, r1, #17
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004e72:	4b3d      	ldr	r3, [pc, #244]	@ (8004f68 <HAL_RCC_OscConfig+0x618>)
 8004e74:	68da      	ldr	r2, [r3, #12]
 8004e76:	4b3c      	ldr	r3, [pc, #240]	@ (8004f68 <HAL_RCC_OscConfig+0x618>)
 8004e78:	2180      	movs	r1, #128	@ 0x80
 8004e7a:	0549      	lsls	r1, r1, #21
 8004e7c:	430a      	orrs	r2, r1
 8004e7e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e80:	f7fe fb10 	bl	80034a4 <HAL_GetTick>
 8004e84:	0003      	movs	r3, r0
 8004e86:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e88:	e008      	b.n	8004e9c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e8a:	f7fe fb0b 	bl	80034a4 <HAL_GetTick>
 8004e8e:	0002      	movs	r2, r0
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d901      	bls.n	8004e9c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e061      	b.n	8004f60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e9c:	4b32      	ldr	r3, [pc, #200]	@ (8004f68 <HAL_RCC_OscConfig+0x618>)
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	2380      	movs	r3, #128	@ 0x80
 8004ea2:	049b      	lsls	r3, r3, #18
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	d0f0      	beq.n	8004e8a <HAL_RCC_OscConfig+0x53a>
 8004ea8:	e059      	b.n	8004f5e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eaa:	4b2f      	ldr	r3, [pc, #188]	@ (8004f68 <HAL_RCC_OscConfig+0x618>)
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	4b2e      	ldr	r3, [pc, #184]	@ (8004f68 <HAL_RCC_OscConfig+0x618>)
 8004eb0:	4931      	ldr	r1, [pc, #196]	@ (8004f78 <HAL_RCC_OscConfig+0x628>)
 8004eb2:	400a      	ands	r2, r1
 8004eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb6:	f7fe faf5 	bl	80034a4 <HAL_GetTick>
 8004eba:	0003      	movs	r3, r0
 8004ebc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ebe:	e008      	b.n	8004ed2 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ec0:	f7fe faf0 	bl	80034a4 <HAL_GetTick>
 8004ec4:	0002      	movs	r2, r0
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d901      	bls.n	8004ed2 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e046      	b.n	8004f60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ed2:	4b25      	ldr	r3, [pc, #148]	@ (8004f68 <HAL_RCC_OscConfig+0x618>)
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	2380      	movs	r3, #128	@ 0x80
 8004ed8:	049b      	lsls	r3, r3, #18
 8004eda:	4013      	ands	r3, r2
 8004edc:	d1f0      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004ede:	4b22      	ldr	r3, [pc, #136]	@ (8004f68 <HAL_RCC_OscConfig+0x618>)
 8004ee0:	68da      	ldr	r2, [r3, #12]
 8004ee2:	4b21      	ldr	r3, [pc, #132]	@ (8004f68 <HAL_RCC_OscConfig+0x618>)
 8004ee4:	4926      	ldr	r1, [pc, #152]	@ (8004f80 <HAL_RCC_OscConfig+0x630>)
 8004ee6:	400a      	ands	r2, r1
 8004ee8:	60da      	str	r2, [r3, #12]
 8004eea:	e038      	b.n	8004f5e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	69db      	ldr	r3, [r3, #28]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d101      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e033      	b.n	8004f60 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004ef8:	4b1b      	ldr	r3, [pc, #108]	@ (8004f68 <HAL_RCC_OscConfig+0x618>)
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	2203      	movs	r2, #3
 8004f02:	401a      	ands	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a1b      	ldr	r3, [r3, #32]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d126      	bne.n	8004f5a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	2270      	movs	r2, #112	@ 0x70
 8004f10:	401a      	ands	r2, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d11f      	bne.n	8004f5a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f1a:	697a      	ldr	r2, [r7, #20]
 8004f1c:	23fe      	movs	r3, #254	@ 0xfe
 8004f1e:	01db      	lsls	r3, r3, #7
 8004f20:	401a      	ands	r2, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f26:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d116      	bne.n	8004f5a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004f2c:	697a      	ldr	r2, [r7, #20]
 8004f2e:	23f8      	movs	r3, #248	@ 0xf8
 8004f30:	039b      	lsls	r3, r3, #14
 8004f32:	401a      	ands	r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d10e      	bne.n	8004f5a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004f3c:	697a      	ldr	r2, [r7, #20]
 8004f3e:	23e0      	movs	r3, #224	@ 0xe0
 8004f40:	051b      	lsls	r3, r3, #20
 8004f42:	401a      	ands	r2, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d106      	bne.n	8004f5a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	0f5b      	lsrs	r3, r3, #29
 8004f50:	075a      	lsls	r2, r3, #29
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d001      	beq.n	8004f5e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e000      	b.n	8004f60 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8004f5e:	2300      	movs	r3, #0
}
 8004f60:	0018      	movs	r0, r3
 8004f62:	46bd      	mov	sp, r7
 8004f64:	b008      	add	sp, #32
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	40021000 	.word	0x40021000
 8004f6c:	40007000 	.word	0x40007000
 8004f70:	00001388 	.word	0x00001388
 8004f74:	efffffff 	.word	0xefffffff
 8004f78:	feffffff 	.word	0xfeffffff
 8004f7c:	11c1808c 	.word	0x11c1808c
 8004f80:	eefefffc 	.word	0xeefefffc

08004f84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d101      	bne.n	8004f98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e0e9      	b.n	800516c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f98:	4b76      	ldr	r3, [pc, #472]	@ (8005174 <HAL_RCC_ClockConfig+0x1f0>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2207      	movs	r2, #7
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	683a      	ldr	r2, [r7, #0]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d91e      	bls.n	8004fe4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fa6:	4b73      	ldr	r3, [pc, #460]	@ (8005174 <HAL_RCC_ClockConfig+0x1f0>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2207      	movs	r2, #7
 8004fac:	4393      	bics	r3, r2
 8004fae:	0019      	movs	r1, r3
 8004fb0:	4b70      	ldr	r3, [pc, #448]	@ (8005174 <HAL_RCC_ClockConfig+0x1f0>)
 8004fb2:	683a      	ldr	r2, [r7, #0]
 8004fb4:	430a      	orrs	r2, r1
 8004fb6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004fb8:	f7fe fa74 	bl	80034a4 <HAL_GetTick>
 8004fbc:	0003      	movs	r3, r0
 8004fbe:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004fc0:	e009      	b.n	8004fd6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fc2:	f7fe fa6f 	bl	80034a4 <HAL_GetTick>
 8004fc6:	0002      	movs	r2, r0
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	4a6a      	ldr	r2, [pc, #424]	@ (8005178 <HAL_RCC_ClockConfig+0x1f4>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d901      	bls.n	8004fd6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e0ca      	b.n	800516c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004fd6:	4b67      	ldr	r3, [pc, #412]	@ (8005174 <HAL_RCC_ClockConfig+0x1f0>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2207      	movs	r2, #7
 8004fdc:	4013      	ands	r3, r2
 8004fde:	683a      	ldr	r2, [r7, #0]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d1ee      	bne.n	8004fc2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2202      	movs	r2, #2
 8004fea:	4013      	ands	r3, r2
 8004fec:	d015      	beq.n	800501a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2204      	movs	r2, #4
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	d006      	beq.n	8005006 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004ff8:	4b60      	ldr	r3, [pc, #384]	@ (800517c <HAL_RCC_ClockConfig+0x1f8>)
 8004ffa:	689a      	ldr	r2, [r3, #8]
 8004ffc:	4b5f      	ldr	r3, [pc, #380]	@ (800517c <HAL_RCC_ClockConfig+0x1f8>)
 8004ffe:	21e0      	movs	r1, #224	@ 0xe0
 8005000:	01c9      	lsls	r1, r1, #7
 8005002:	430a      	orrs	r2, r1
 8005004:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005006:	4b5d      	ldr	r3, [pc, #372]	@ (800517c <HAL_RCC_ClockConfig+0x1f8>)
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	4a5d      	ldr	r2, [pc, #372]	@ (8005180 <HAL_RCC_ClockConfig+0x1fc>)
 800500c:	4013      	ands	r3, r2
 800500e:	0019      	movs	r1, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	689a      	ldr	r2, [r3, #8]
 8005014:	4b59      	ldr	r3, [pc, #356]	@ (800517c <HAL_RCC_ClockConfig+0x1f8>)
 8005016:	430a      	orrs	r2, r1
 8005018:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2201      	movs	r2, #1
 8005020:	4013      	ands	r3, r2
 8005022:	d057      	beq.n	80050d4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	2b01      	cmp	r3, #1
 800502a:	d107      	bne.n	800503c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800502c:	4b53      	ldr	r3, [pc, #332]	@ (800517c <HAL_RCC_ClockConfig+0x1f8>)
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	2380      	movs	r3, #128	@ 0x80
 8005032:	029b      	lsls	r3, r3, #10
 8005034:	4013      	ands	r3, r2
 8005036:	d12b      	bne.n	8005090 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e097      	b.n	800516c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	2b02      	cmp	r3, #2
 8005042:	d107      	bne.n	8005054 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005044:	4b4d      	ldr	r3, [pc, #308]	@ (800517c <HAL_RCC_ClockConfig+0x1f8>)
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	2380      	movs	r3, #128	@ 0x80
 800504a:	049b      	lsls	r3, r3, #18
 800504c:	4013      	ands	r3, r2
 800504e:	d11f      	bne.n	8005090 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e08b      	b.n	800516c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d107      	bne.n	800506c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800505c:	4b47      	ldr	r3, [pc, #284]	@ (800517c <HAL_RCC_ClockConfig+0x1f8>)
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	2380      	movs	r3, #128	@ 0x80
 8005062:	00db      	lsls	r3, r3, #3
 8005064:	4013      	ands	r3, r2
 8005066:	d113      	bne.n	8005090 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e07f      	b.n	800516c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	2b03      	cmp	r3, #3
 8005072:	d106      	bne.n	8005082 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005074:	4b41      	ldr	r3, [pc, #260]	@ (800517c <HAL_RCC_ClockConfig+0x1f8>)
 8005076:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005078:	2202      	movs	r2, #2
 800507a:	4013      	ands	r3, r2
 800507c:	d108      	bne.n	8005090 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e074      	b.n	800516c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005082:	4b3e      	ldr	r3, [pc, #248]	@ (800517c <HAL_RCC_ClockConfig+0x1f8>)
 8005084:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005086:	2202      	movs	r2, #2
 8005088:	4013      	ands	r3, r2
 800508a:	d101      	bne.n	8005090 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e06d      	b.n	800516c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005090:	4b3a      	ldr	r3, [pc, #232]	@ (800517c <HAL_RCC_ClockConfig+0x1f8>)
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	2207      	movs	r2, #7
 8005096:	4393      	bics	r3, r2
 8005098:	0019      	movs	r1, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685a      	ldr	r2, [r3, #4]
 800509e:	4b37      	ldr	r3, [pc, #220]	@ (800517c <HAL_RCC_ClockConfig+0x1f8>)
 80050a0:	430a      	orrs	r2, r1
 80050a2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050a4:	f7fe f9fe 	bl	80034a4 <HAL_GetTick>
 80050a8:	0003      	movs	r3, r0
 80050aa:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ac:	e009      	b.n	80050c2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050ae:	f7fe f9f9 	bl	80034a4 <HAL_GetTick>
 80050b2:	0002      	movs	r2, r0
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	4a2f      	ldr	r2, [pc, #188]	@ (8005178 <HAL_RCC_ClockConfig+0x1f4>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d901      	bls.n	80050c2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e054      	b.n	800516c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050c2:	4b2e      	ldr	r3, [pc, #184]	@ (800517c <HAL_RCC_ClockConfig+0x1f8>)
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	2238      	movs	r2, #56	@ 0x38
 80050c8:	401a      	ands	r2, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	00db      	lsls	r3, r3, #3
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d1ec      	bne.n	80050ae <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050d4:	4b27      	ldr	r3, [pc, #156]	@ (8005174 <HAL_RCC_ClockConfig+0x1f0>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	2207      	movs	r2, #7
 80050da:	4013      	ands	r3, r2
 80050dc:	683a      	ldr	r2, [r7, #0]
 80050de:	429a      	cmp	r2, r3
 80050e0:	d21e      	bcs.n	8005120 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050e2:	4b24      	ldr	r3, [pc, #144]	@ (8005174 <HAL_RCC_ClockConfig+0x1f0>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	2207      	movs	r2, #7
 80050e8:	4393      	bics	r3, r2
 80050ea:	0019      	movs	r1, r3
 80050ec:	4b21      	ldr	r3, [pc, #132]	@ (8005174 <HAL_RCC_ClockConfig+0x1f0>)
 80050ee:	683a      	ldr	r2, [r7, #0]
 80050f0:	430a      	orrs	r2, r1
 80050f2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80050f4:	f7fe f9d6 	bl	80034a4 <HAL_GetTick>
 80050f8:	0003      	movs	r3, r0
 80050fa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80050fc:	e009      	b.n	8005112 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050fe:	f7fe f9d1 	bl	80034a4 <HAL_GetTick>
 8005102:	0002      	movs	r2, r0
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	4a1b      	ldr	r2, [pc, #108]	@ (8005178 <HAL_RCC_ClockConfig+0x1f4>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d901      	bls.n	8005112 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	e02c      	b.n	800516c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005112:	4b18      	ldr	r3, [pc, #96]	@ (8005174 <HAL_RCC_ClockConfig+0x1f0>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2207      	movs	r2, #7
 8005118:	4013      	ands	r3, r2
 800511a:	683a      	ldr	r2, [r7, #0]
 800511c:	429a      	cmp	r2, r3
 800511e:	d1ee      	bne.n	80050fe <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2204      	movs	r2, #4
 8005126:	4013      	ands	r3, r2
 8005128:	d009      	beq.n	800513e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800512a:	4b14      	ldr	r3, [pc, #80]	@ (800517c <HAL_RCC_ClockConfig+0x1f8>)
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	4a15      	ldr	r2, [pc, #84]	@ (8005184 <HAL_RCC_ClockConfig+0x200>)
 8005130:	4013      	ands	r3, r2
 8005132:	0019      	movs	r1, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	68da      	ldr	r2, [r3, #12]
 8005138:	4b10      	ldr	r3, [pc, #64]	@ (800517c <HAL_RCC_ClockConfig+0x1f8>)
 800513a:	430a      	orrs	r2, r1
 800513c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800513e:	f000 f829 	bl	8005194 <HAL_RCC_GetSysClockFreq>
 8005142:	0001      	movs	r1, r0
 8005144:	4b0d      	ldr	r3, [pc, #52]	@ (800517c <HAL_RCC_ClockConfig+0x1f8>)
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	0a1b      	lsrs	r3, r3, #8
 800514a:	220f      	movs	r2, #15
 800514c:	401a      	ands	r2, r3
 800514e:	4b0e      	ldr	r3, [pc, #56]	@ (8005188 <HAL_RCC_ClockConfig+0x204>)
 8005150:	0092      	lsls	r2, r2, #2
 8005152:	58d3      	ldr	r3, [r2, r3]
 8005154:	221f      	movs	r2, #31
 8005156:	4013      	ands	r3, r2
 8005158:	000a      	movs	r2, r1
 800515a:	40da      	lsrs	r2, r3
 800515c:	4b0b      	ldr	r3, [pc, #44]	@ (800518c <HAL_RCC_ClockConfig+0x208>)
 800515e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005160:	4b0b      	ldr	r3, [pc, #44]	@ (8005190 <HAL_RCC_ClockConfig+0x20c>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	0018      	movs	r0, r3
 8005166:	f7fe f941 	bl	80033ec <HAL_InitTick>
 800516a:	0003      	movs	r3, r0
}
 800516c:	0018      	movs	r0, r3
 800516e:	46bd      	mov	sp, r7
 8005170:	b004      	add	sp, #16
 8005172:	bd80      	pop	{r7, pc}
 8005174:	40022000 	.word	0x40022000
 8005178:	00001388 	.word	0x00001388
 800517c:	40021000 	.word	0x40021000
 8005180:	fffff0ff 	.word	0xfffff0ff
 8005184:	ffff8fff 	.word	0xffff8fff
 8005188:	080073c8 	.word	0x080073c8
 800518c:	20000014 	.word	0x20000014
 8005190:	20000044 	.word	0x20000044

08005194 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b086      	sub	sp, #24
 8005198:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800519a:	4b3c      	ldr	r3, [pc, #240]	@ (800528c <HAL_RCC_GetSysClockFreq+0xf8>)
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	2238      	movs	r2, #56	@ 0x38
 80051a0:	4013      	ands	r3, r2
 80051a2:	d10f      	bne.n	80051c4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80051a4:	4b39      	ldr	r3, [pc, #228]	@ (800528c <HAL_RCC_GetSysClockFreq+0xf8>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	0adb      	lsrs	r3, r3, #11
 80051aa:	2207      	movs	r2, #7
 80051ac:	4013      	ands	r3, r2
 80051ae:	2201      	movs	r2, #1
 80051b0:	409a      	lsls	r2, r3
 80051b2:	0013      	movs	r3, r2
 80051b4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80051b6:	6839      	ldr	r1, [r7, #0]
 80051b8:	4835      	ldr	r0, [pc, #212]	@ (8005290 <HAL_RCC_GetSysClockFreq+0xfc>)
 80051ba:	f7fa ffb5 	bl	8000128 <__udivsi3>
 80051be:	0003      	movs	r3, r0
 80051c0:	613b      	str	r3, [r7, #16]
 80051c2:	e05d      	b.n	8005280 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80051c4:	4b31      	ldr	r3, [pc, #196]	@ (800528c <HAL_RCC_GetSysClockFreq+0xf8>)
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	2238      	movs	r2, #56	@ 0x38
 80051ca:	4013      	ands	r3, r2
 80051cc:	2b08      	cmp	r3, #8
 80051ce:	d102      	bne.n	80051d6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80051d0:	4b30      	ldr	r3, [pc, #192]	@ (8005294 <HAL_RCC_GetSysClockFreq+0x100>)
 80051d2:	613b      	str	r3, [r7, #16]
 80051d4:	e054      	b.n	8005280 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051d6:	4b2d      	ldr	r3, [pc, #180]	@ (800528c <HAL_RCC_GetSysClockFreq+0xf8>)
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	2238      	movs	r2, #56	@ 0x38
 80051dc:	4013      	ands	r3, r2
 80051de:	2b10      	cmp	r3, #16
 80051e0:	d138      	bne.n	8005254 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80051e2:	4b2a      	ldr	r3, [pc, #168]	@ (800528c <HAL_RCC_GetSysClockFreq+0xf8>)
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	2203      	movs	r2, #3
 80051e8:	4013      	ands	r3, r2
 80051ea:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80051ec:	4b27      	ldr	r3, [pc, #156]	@ (800528c <HAL_RCC_GetSysClockFreq+0xf8>)
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	091b      	lsrs	r3, r3, #4
 80051f2:	2207      	movs	r2, #7
 80051f4:	4013      	ands	r3, r2
 80051f6:	3301      	adds	r3, #1
 80051f8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2b03      	cmp	r3, #3
 80051fe:	d10d      	bne.n	800521c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005200:	68b9      	ldr	r1, [r7, #8]
 8005202:	4824      	ldr	r0, [pc, #144]	@ (8005294 <HAL_RCC_GetSysClockFreq+0x100>)
 8005204:	f7fa ff90 	bl	8000128 <__udivsi3>
 8005208:	0003      	movs	r3, r0
 800520a:	0019      	movs	r1, r3
 800520c:	4b1f      	ldr	r3, [pc, #124]	@ (800528c <HAL_RCC_GetSysClockFreq+0xf8>)
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	0a1b      	lsrs	r3, r3, #8
 8005212:	227f      	movs	r2, #127	@ 0x7f
 8005214:	4013      	ands	r3, r2
 8005216:	434b      	muls	r3, r1
 8005218:	617b      	str	r3, [r7, #20]
        break;
 800521a:	e00d      	b.n	8005238 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800521c:	68b9      	ldr	r1, [r7, #8]
 800521e:	481c      	ldr	r0, [pc, #112]	@ (8005290 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005220:	f7fa ff82 	bl	8000128 <__udivsi3>
 8005224:	0003      	movs	r3, r0
 8005226:	0019      	movs	r1, r3
 8005228:	4b18      	ldr	r3, [pc, #96]	@ (800528c <HAL_RCC_GetSysClockFreq+0xf8>)
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	0a1b      	lsrs	r3, r3, #8
 800522e:	227f      	movs	r2, #127	@ 0x7f
 8005230:	4013      	ands	r3, r2
 8005232:	434b      	muls	r3, r1
 8005234:	617b      	str	r3, [r7, #20]
        break;
 8005236:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005238:	4b14      	ldr	r3, [pc, #80]	@ (800528c <HAL_RCC_GetSysClockFreq+0xf8>)
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	0f5b      	lsrs	r3, r3, #29
 800523e:	2207      	movs	r2, #7
 8005240:	4013      	ands	r3, r2
 8005242:	3301      	adds	r3, #1
 8005244:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005246:	6879      	ldr	r1, [r7, #4]
 8005248:	6978      	ldr	r0, [r7, #20]
 800524a:	f7fa ff6d 	bl	8000128 <__udivsi3>
 800524e:	0003      	movs	r3, r0
 8005250:	613b      	str	r3, [r7, #16]
 8005252:	e015      	b.n	8005280 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005254:	4b0d      	ldr	r3, [pc, #52]	@ (800528c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	2238      	movs	r2, #56	@ 0x38
 800525a:	4013      	ands	r3, r2
 800525c:	2b20      	cmp	r3, #32
 800525e:	d103      	bne.n	8005268 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005260:	2380      	movs	r3, #128	@ 0x80
 8005262:	021b      	lsls	r3, r3, #8
 8005264:	613b      	str	r3, [r7, #16]
 8005266:	e00b      	b.n	8005280 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005268:	4b08      	ldr	r3, [pc, #32]	@ (800528c <HAL_RCC_GetSysClockFreq+0xf8>)
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	2238      	movs	r2, #56	@ 0x38
 800526e:	4013      	ands	r3, r2
 8005270:	2b18      	cmp	r3, #24
 8005272:	d103      	bne.n	800527c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005274:	23fa      	movs	r3, #250	@ 0xfa
 8005276:	01db      	lsls	r3, r3, #7
 8005278:	613b      	str	r3, [r7, #16]
 800527a:	e001      	b.n	8005280 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800527c:	2300      	movs	r3, #0
 800527e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005280:	693b      	ldr	r3, [r7, #16]
}
 8005282:	0018      	movs	r0, r3
 8005284:	46bd      	mov	sp, r7
 8005286:	b006      	add	sp, #24
 8005288:	bd80      	pop	{r7, pc}
 800528a:	46c0      	nop			@ (mov r8, r8)
 800528c:	40021000 	.word	0x40021000
 8005290:	00f42400 	.word	0x00f42400
 8005294:	007a1200 	.word	0x007a1200

08005298 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b086      	sub	sp, #24
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80052a0:	2313      	movs	r3, #19
 80052a2:	18fb      	adds	r3, r7, r3
 80052a4:	2200      	movs	r2, #0
 80052a6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80052a8:	2312      	movs	r3, #18
 80052aa:	18fb      	adds	r3, r7, r3
 80052ac:	2200      	movs	r2, #0
 80052ae:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	2380      	movs	r3, #128	@ 0x80
 80052b6:	029b      	lsls	r3, r3, #10
 80052b8:	4013      	ands	r3, r2
 80052ba:	d100      	bne.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x26>
 80052bc:	e0a3      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052be:	2011      	movs	r0, #17
 80052c0:	183b      	adds	r3, r7, r0
 80052c2:	2200      	movs	r2, #0
 80052c4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052c6:	4ba5      	ldr	r3, [pc, #660]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80052c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80052ca:	2380      	movs	r3, #128	@ 0x80
 80052cc:	055b      	lsls	r3, r3, #21
 80052ce:	4013      	ands	r3, r2
 80052d0:	d110      	bne.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052d2:	4ba2      	ldr	r3, [pc, #648]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80052d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80052d6:	4ba1      	ldr	r3, [pc, #644]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80052d8:	2180      	movs	r1, #128	@ 0x80
 80052da:	0549      	lsls	r1, r1, #21
 80052dc:	430a      	orrs	r2, r1
 80052de:	63da      	str	r2, [r3, #60]	@ 0x3c
 80052e0:	4b9e      	ldr	r3, [pc, #632]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80052e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80052e4:	2380      	movs	r3, #128	@ 0x80
 80052e6:	055b      	lsls	r3, r3, #21
 80052e8:	4013      	ands	r3, r2
 80052ea:	60bb      	str	r3, [r7, #8]
 80052ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052ee:	183b      	adds	r3, r7, r0
 80052f0:	2201      	movs	r2, #1
 80052f2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052f4:	4b9a      	ldr	r3, [pc, #616]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	4b99      	ldr	r3, [pc, #612]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80052fa:	2180      	movs	r1, #128	@ 0x80
 80052fc:	0049      	lsls	r1, r1, #1
 80052fe:	430a      	orrs	r2, r1
 8005300:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005302:	f7fe f8cf 	bl	80034a4 <HAL_GetTick>
 8005306:	0003      	movs	r3, r0
 8005308:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800530a:	e00b      	b.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800530c:	f7fe f8ca 	bl	80034a4 <HAL_GetTick>
 8005310:	0002      	movs	r2, r0
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	2b02      	cmp	r3, #2
 8005318:	d904      	bls.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800531a:	2313      	movs	r3, #19
 800531c:	18fb      	adds	r3, r7, r3
 800531e:	2203      	movs	r2, #3
 8005320:	701a      	strb	r2, [r3, #0]
        break;
 8005322:	e005      	b.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005324:	4b8e      	ldr	r3, [pc, #568]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	2380      	movs	r3, #128	@ 0x80
 800532a:	005b      	lsls	r3, r3, #1
 800532c:	4013      	ands	r3, r2
 800532e:	d0ed      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005330:	2313      	movs	r3, #19
 8005332:	18fb      	adds	r3, r7, r3
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d154      	bne.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800533a:	4b88      	ldr	r3, [pc, #544]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800533c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800533e:	23c0      	movs	r3, #192	@ 0xc0
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	4013      	ands	r3, r2
 8005344:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d019      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005350:	697a      	ldr	r2, [r7, #20]
 8005352:	429a      	cmp	r2, r3
 8005354:	d014      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005356:	4b81      	ldr	r3, [pc, #516]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005358:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800535a:	4a82      	ldr	r2, [pc, #520]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800535c:	4013      	ands	r3, r2
 800535e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005360:	4b7e      	ldr	r3, [pc, #504]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005362:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005364:	4b7d      	ldr	r3, [pc, #500]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005366:	2180      	movs	r1, #128	@ 0x80
 8005368:	0249      	lsls	r1, r1, #9
 800536a:	430a      	orrs	r2, r1
 800536c:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800536e:	4b7b      	ldr	r3, [pc, #492]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005370:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005372:	4b7a      	ldr	r3, [pc, #488]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005374:	497c      	ldr	r1, [pc, #496]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8005376:	400a      	ands	r2, r1
 8005378:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800537a:	4b78      	ldr	r3, [pc, #480]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800537c:	697a      	ldr	r2, [r7, #20]
 800537e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	2201      	movs	r2, #1
 8005384:	4013      	ands	r3, r2
 8005386:	d016      	beq.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005388:	f7fe f88c 	bl	80034a4 <HAL_GetTick>
 800538c:	0003      	movs	r3, r0
 800538e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005390:	e00c      	b.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005392:	f7fe f887 	bl	80034a4 <HAL_GetTick>
 8005396:	0002      	movs	r2, r0
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	4a73      	ldr	r2, [pc, #460]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d904      	bls.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80053a2:	2313      	movs	r3, #19
 80053a4:	18fb      	adds	r3, r7, r3
 80053a6:	2203      	movs	r2, #3
 80053a8:	701a      	strb	r2, [r3, #0]
            break;
 80053aa:	e004      	b.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053ac:	4b6b      	ldr	r3, [pc, #428]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80053ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053b0:	2202      	movs	r2, #2
 80053b2:	4013      	ands	r3, r2
 80053b4:	d0ed      	beq.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80053b6:	2313      	movs	r3, #19
 80053b8:	18fb      	adds	r3, r7, r3
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d10a      	bne.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053c0:	4b66      	ldr	r3, [pc, #408]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80053c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053c4:	4a67      	ldr	r2, [pc, #412]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80053c6:	4013      	ands	r3, r2
 80053c8:	0019      	movs	r1, r3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80053ce:	4b63      	ldr	r3, [pc, #396]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80053d0:	430a      	orrs	r2, r1
 80053d2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80053d4:	e00c      	b.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80053d6:	2312      	movs	r3, #18
 80053d8:	18fb      	adds	r3, r7, r3
 80053da:	2213      	movs	r2, #19
 80053dc:	18ba      	adds	r2, r7, r2
 80053de:	7812      	ldrb	r2, [r2, #0]
 80053e0:	701a      	strb	r2, [r3, #0]
 80053e2:	e005      	b.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053e4:	2312      	movs	r3, #18
 80053e6:	18fb      	adds	r3, r7, r3
 80053e8:	2213      	movs	r2, #19
 80053ea:	18ba      	adds	r2, r7, r2
 80053ec:	7812      	ldrb	r2, [r2, #0]
 80053ee:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80053f0:	2311      	movs	r3, #17
 80053f2:	18fb      	adds	r3, r7, r3
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d105      	bne.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053fa:	4b58      	ldr	r3, [pc, #352]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80053fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80053fe:	4b57      	ldr	r3, [pc, #348]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005400:	495b      	ldr	r1, [pc, #364]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005402:	400a      	ands	r2, r1
 8005404:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2201      	movs	r2, #1
 800540c:	4013      	ands	r3, r2
 800540e:	d009      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005410:	4b52      	ldr	r3, [pc, #328]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005412:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005414:	2203      	movs	r2, #3
 8005416:	4393      	bics	r3, r2
 8005418:	0019      	movs	r1, r3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	685a      	ldr	r2, [r3, #4]
 800541e:	4b4f      	ldr	r3, [pc, #316]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005420:	430a      	orrs	r2, r1
 8005422:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2210      	movs	r2, #16
 800542a:	4013      	ands	r3, r2
 800542c:	d009      	beq.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800542e:	4b4b      	ldr	r3, [pc, #300]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005430:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005432:	4a50      	ldr	r2, [pc, #320]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8005434:	4013      	ands	r3, r2
 8005436:	0019      	movs	r1, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	689a      	ldr	r2, [r3, #8]
 800543c:	4b47      	ldr	r3, [pc, #284]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800543e:	430a      	orrs	r2, r1
 8005440:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	2380      	movs	r3, #128	@ 0x80
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	4013      	ands	r3, r2
 800544c:	d009      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800544e:	4b43      	ldr	r3, [pc, #268]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005452:	4a49      	ldr	r2, [pc, #292]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005454:	4013      	ands	r3, r2
 8005456:	0019      	movs	r1, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	695a      	ldr	r2, [r3, #20]
 800545c:	4b3f      	ldr	r3, [pc, #252]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800545e:	430a      	orrs	r2, r1
 8005460:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	2380      	movs	r3, #128	@ 0x80
 8005468:	00db      	lsls	r3, r3, #3
 800546a:	4013      	ands	r3, r2
 800546c:	d009      	beq.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800546e:	4b3b      	ldr	r3, [pc, #236]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005470:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005472:	4a42      	ldr	r2, [pc, #264]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005474:	4013      	ands	r3, r2
 8005476:	0019      	movs	r1, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	699a      	ldr	r2, [r3, #24]
 800547c:	4b37      	ldr	r3, [pc, #220]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800547e:	430a      	orrs	r2, r1
 8005480:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	2220      	movs	r2, #32
 8005488:	4013      	ands	r3, r2
 800548a:	d009      	beq.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800548c:	4b33      	ldr	r3, [pc, #204]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800548e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005490:	4a3b      	ldr	r2, [pc, #236]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005492:	4013      	ands	r3, r2
 8005494:	0019      	movs	r1, r3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	68da      	ldr	r2, [r3, #12]
 800549a:	4b30      	ldr	r3, [pc, #192]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800549c:	430a      	orrs	r2, r1
 800549e:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	2380      	movs	r3, #128	@ 0x80
 80054a6:	01db      	lsls	r3, r3, #7
 80054a8:	4013      	ands	r3, r2
 80054aa:	d015      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80054ac:	4b2b      	ldr	r3, [pc, #172]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80054ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	0899      	lsrs	r1, r3, #2
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	69da      	ldr	r2, [r3, #28]
 80054b8:	4b28      	ldr	r3, [pc, #160]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80054ba:	430a      	orrs	r2, r1
 80054bc:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	69da      	ldr	r2, [r3, #28]
 80054c2:	2380      	movs	r3, #128	@ 0x80
 80054c4:	05db      	lsls	r3, r3, #23
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d106      	bne.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80054ca:	4b24      	ldr	r3, [pc, #144]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80054cc:	68da      	ldr	r2, [r3, #12]
 80054ce:	4b23      	ldr	r3, [pc, #140]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80054d0:	2180      	movs	r1, #128	@ 0x80
 80054d2:	0249      	lsls	r1, r1, #9
 80054d4:	430a      	orrs	r2, r1
 80054d6:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	2380      	movs	r3, #128	@ 0x80
 80054de:	039b      	lsls	r3, r3, #14
 80054e0:	4013      	ands	r3, r2
 80054e2:	d016      	beq.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80054e4:	4b1d      	ldr	r3, [pc, #116]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80054e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054e8:	4a26      	ldr	r2, [pc, #152]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80054ea:	4013      	ands	r3, r2
 80054ec:	0019      	movs	r1, r3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a1a      	ldr	r2, [r3, #32]
 80054f2:	4b1a      	ldr	r3, [pc, #104]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80054f4:	430a      	orrs	r2, r1
 80054f6:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6a1a      	ldr	r2, [r3, #32]
 80054fc:	2380      	movs	r3, #128	@ 0x80
 80054fe:	03db      	lsls	r3, r3, #15
 8005500:	429a      	cmp	r2, r3
 8005502:	d106      	bne.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005504:	4b15      	ldr	r3, [pc, #84]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005506:	68da      	ldr	r2, [r3, #12]
 8005508:	4b14      	ldr	r3, [pc, #80]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800550a:	2180      	movs	r1, #128	@ 0x80
 800550c:	0449      	lsls	r1, r1, #17
 800550e:	430a      	orrs	r2, r1
 8005510:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	2380      	movs	r3, #128	@ 0x80
 8005518:	011b      	lsls	r3, r3, #4
 800551a:	4013      	ands	r3, r2
 800551c:	d016      	beq.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800551e:	4b0f      	ldr	r3, [pc, #60]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005520:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005522:	4a19      	ldr	r2, [pc, #100]	@ (8005588 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005524:	4013      	ands	r3, r2
 8005526:	0019      	movs	r1, r3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	691a      	ldr	r2, [r3, #16]
 800552c:	4b0b      	ldr	r3, [pc, #44]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800552e:	430a      	orrs	r2, r1
 8005530:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	691a      	ldr	r2, [r3, #16]
 8005536:	2380      	movs	r3, #128	@ 0x80
 8005538:	01db      	lsls	r3, r3, #7
 800553a:	429a      	cmp	r2, r3
 800553c:	d106      	bne.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800553e:	4b07      	ldr	r3, [pc, #28]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005540:	68da      	ldr	r2, [r3, #12]
 8005542:	4b06      	ldr	r3, [pc, #24]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005544:	2180      	movs	r1, #128	@ 0x80
 8005546:	0249      	lsls	r1, r1, #9
 8005548:	430a      	orrs	r2, r1
 800554a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800554c:	2312      	movs	r3, #18
 800554e:	18fb      	adds	r3, r7, r3
 8005550:	781b      	ldrb	r3, [r3, #0]
}
 8005552:	0018      	movs	r0, r3
 8005554:	46bd      	mov	sp, r7
 8005556:	b006      	add	sp, #24
 8005558:	bd80      	pop	{r7, pc}
 800555a:	46c0      	nop			@ (mov r8, r8)
 800555c:	40021000 	.word	0x40021000
 8005560:	40007000 	.word	0x40007000
 8005564:	fffffcff 	.word	0xfffffcff
 8005568:	fffeffff 	.word	0xfffeffff
 800556c:	00001388 	.word	0x00001388
 8005570:	efffffff 	.word	0xefffffff
 8005574:	fffff3ff 	.word	0xfffff3ff
 8005578:	fff3ffff 	.word	0xfff3ffff
 800557c:	ffcfffff 	.word	0xffcfffff
 8005580:	ffffcfff 	.word	0xffffcfff
 8005584:	ffbfffff 	.word	0xffbfffff
 8005588:	ffff3fff 	.word	0xffff3fff

0800558c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d101      	bne.n	800559e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e0a8      	b.n	80056f0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d109      	bne.n	80055ba <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	685a      	ldr	r2, [r3, #4]
 80055aa:	2382      	movs	r3, #130	@ 0x82
 80055ac:	005b      	lsls	r3, r3, #1
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d009      	beq.n	80055c6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	61da      	str	r2, [r3, #28]
 80055b8:	e005      	b.n	80055c6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	225d      	movs	r2, #93	@ 0x5d
 80055d0:	5c9b      	ldrb	r3, [r3, r2]
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d107      	bne.n	80055e8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	225c      	movs	r2, #92	@ 0x5c
 80055dc:	2100      	movs	r1, #0
 80055de:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	0018      	movs	r0, r3
 80055e4:	f7fd f860 	bl	80026a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	225d      	movs	r2, #93	@ 0x5d
 80055ec:	2102      	movs	r1, #2
 80055ee:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2140      	movs	r1, #64	@ 0x40
 80055fc:	438a      	bics	r2, r1
 80055fe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	68da      	ldr	r2, [r3, #12]
 8005604:	23e0      	movs	r3, #224	@ 0xe0
 8005606:	00db      	lsls	r3, r3, #3
 8005608:	429a      	cmp	r2, r3
 800560a:	d902      	bls.n	8005612 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800560c:	2300      	movs	r3, #0
 800560e:	60fb      	str	r3, [r7, #12]
 8005610:	e002      	b.n	8005618 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005612:	2380      	movs	r3, #128	@ 0x80
 8005614:	015b      	lsls	r3, r3, #5
 8005616:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	68da      	ldr	r2, [r3, #12]
 800561c:	23f0      	movs	r3, #240	@ 0xf0
 800561e:	011b      	lsls	r3, r3, #4
 8005620:	429a      	cmp	r2, r3
 8005622:	d008      	beq.n	8005636 <HAL_SPI_Init+0xaa>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	68da      	ldr	r2, [r3, #12]
 8005628:	23e0      	movs	r3, #224	@ 0xe0
 800562a:	00db      	lsls	r3, r3, #3
 800562c:	429a      	cmp	r2, r3
 800562e:	d002      	beq.n	8005636 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	685a      	ldr	r2, [r3, #4]
 800563a:	2382      	movs	r3, #130	@ 0x82
 800563c:	005b      	lsls	r3, r3, #1
 800563e:	401a      	ands	r2, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6899      	ldr	r1, [r3, #8]
 8005644:	2384      	movs	r3, #132	@ 0x84
 8005646:	021b      	lsls	r3, r3, #8
 8005648:	400b      	ands	r3, r1
 800564a:	431a      	orrs	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	691b      	ldr	r3, [r3, #16]
 8005650:	2102      	movs	r1, #2
 8005652:	400b      	ands	r3, r1
 8005654:	431a      	orrs	r2, r3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	695b      	ldr	r3, [r3, #20]
 800565a:	2101      	movs	r1, #1
 800565c:	400b      	ands	r3, r1
 800565e:	431a      	orrs	r2, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6999      	ldr	r1, [r3, #24]
 8005664:	2380      	movs	r3, #128	@ 0x80
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	400b      	ands	r3, r1
 800566a:	431a      	orrs	r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	69db      	ldr	r3, [r3, #28]
 8005670:	2138      	movs	r1, #56	@ 0x38
 8005672:	400b      	ands	r3, r1
 8005674:	431a      	orrs	r2, r3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a1b      	ldr	r3, [r3, #32]
 800567a:	2180      	movs	r1, #128	@ 0x80
 800567c:	400b      	ands	r3, r1
 800567e:	431a      	orrs	r2, r3
 8005680:	0011      	movs	r1, r2
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005686:	2380      	movs	r3, #128	@ 0x80
 8005688:	019b      	lsls	r3, r3, #6
 800568a:	401a      	ands	r2, r3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	430a      	orrs	r2, r1
 8005692:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	699b      	ldr	r3, [r3, #24]
 8005698:	0c1b      	lsrs	r3, r3, #16
 800569a:	2204      	movs	r2, #4
 800569c:	401a      	ands	r2, r3
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056a2:	2110      	movs	r1, #16
 80056a4:	400b      	ands	r3, r1
 80056a6:	431a      	orrs	r2, r3
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056ac:	2108      	movs	r1, #8
 80056ae:	400b      	ands	r3, r1
 80056b0:	431a      	orrs	r2, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	68d9      	ldr	r1, [r3, #12]
 80056b6:	23f0      	movs	r3, #240	@ 0xf0
 80056b8:	011b      	lsls	r3, r3, #4
 80056ba:	400b      	ands	r3, r1
 80056bc:	431a      	orrs	r2, r3
 80056be:	0011      	movs	r1, r2
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	2380      	movs	r3, #128	@ 0x80
 80056c4:	015b      	lsls	r3, r3, #5
 80056c6:	401a      	ands	r2, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	430a      	orrs	r2, r1
 80056ce:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	69da      	ldr	r2, [r3, #28]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4907      	ldr	r1, [pc, #28]	@ (80056f8 <HAL_SPI_Init+0x16c>)
 80056dc:	400a      	ands	r2, r1
 80056de:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	225d      	movs	r2, #93	@ 0x5d
 80056ea:	2101      	movs	r1, #1
 80056ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80056ee:	2300      	movs	r3, #0
}
 80056f0:	0018      	movs	r0, r3
 80056f2:	46bd      	mov	sp, r7
 80056f4:	b004      	add	sp, #16
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	fffff7ff 	.word	0xfffff7ff

080056fc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b088      	sub	sp, #32
 8005700:	af00      	add	r7, sp, #0
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	603b      	str	r3, [r7, #0]
 8005708:	1dbb      	adds	r3, r7, #6
 800570a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800570c:	231f      	movs	r3, #31
 800570e:	18fb      	adds	r3, r7, r3
 8005710:	2200      	movs	r2, #0
 8005712:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	225c      	movs	r2, #92	@ 0x5c
 8005718:	5c9b      	ldrb	r3, [r3, r2]
 800571a:	2b01      	cmp	r3, #1
 800571c:	d101      	bne.n	8005722 <HAL_SPI_Transmit+0x26>
 800571e:	2302      	movs	r3, #2
 8005720:	e147      	b.n	80059b2 <HAL_SPI_Transmit+0x2b6>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	225c      	movs	r2, #92	@ 0x5c
 8005726:	2101      	movs	r1, #1
 8005728:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800572a:	f7fd febb 	bl	80034a4 <HAL_GetTick>
 800572e:	0003      	movs	r3, r0
 8005730:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005732:	2316      	movs	r3, #22
 8005734:	18fb      	adds	r3, r7, r3
 8005736:	1dba      	adds	r2, r7, #6
 8005738:	8812      	ldrh	r2, [r2, #0]
 800573a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	225d      	movs	r2, #93	@ 0x5d
 8005740:	5c9b      	ldrb	r3, [r3, r2]
 8005742:	b2db      	uxtb	r3, r3
 8005744:	2b01      	cmp	r3, #1
 8005746:	d004      	beq.n	8005752 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8005748:	231f      	movs	r3, #31
 800574a:	18fb      	adds	r3, r7, r3
 800574c:	2202      	movs	r2, #2
 800574e:	701a      	strb	r2, [r3, #0]
    goto error;
 8005750:	e128      	b.n	80059a4 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d003      	beq.n	8005760 <HAL_SPI_Transmit+0x64>
 8005758:	1dbb      	adds	r3, r7, #6
 800575a:	881b      	ldrh	r3, [r3, #0]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d104      	bne.n	800576a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8005760:	231f      	movs	r3, #31
 8005762:	18fb      	adds	r3, r7, r3
 8005764:	2201      	movs	r2, #1
 8005766:	701a      	strb	r2, [r3, #0]
    goto error;
 8005768:	e11c      	b.n	80059a4 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	225d      	movs	r2, #93	@ 0x5d
 800576e:	2103      	movs	r1, #3
 8005770:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2200      	movs	r2, #0
 8005776:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	68ba      	ldr	r2, [r7, #8]
 800577c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	1dba      	adds	r2, r7, #6
 8005782:	8812      	ldrh	r2, [r2, #0]
 8005784:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	1dba      	adds	r2, r7, #6
 800578a:	8812      	ldrh	r2, [r2, #0]
 800578c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2200      	movs	r2, #0
 8005792:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2244      	movs	r2, #68	@ 0x44
 8005798:	2100      	movs	r1, #0
 800579a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2246      	movs	r2, #70	@ 0x46
 80057a0:	2100      	movs	r1, #0
 80057a2:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2200      	movs	r2, #0
 80057a8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2200      	movs	r2, #0
 80057ae:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	689a      	ldr	r2, [r3, #8]
 80057b4:	2380      	movs	r3, #128	@ 0x80
 80057b6:	021b      	lsls	r3, r3, #8
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d110      	bne.n	80057de <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2140      	movs	r1, #64	@ 0x40
 80057c8:	438a      	bics	r2, r1
 80057ca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	2180      	movs	r1, #128	@ 0x80
 80057d8:	01c9      	lsls	r1, r1, #7
 80057da:	430a      	orrs	r2, r1
 80057dc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2240      	movs	r2, #64	@ 0x40
 80057e6:	4013      	ands	r3, r2
 80057e8:	2b40      	cmp	r3, #64	@ 0x40
 80057ea:	d007      	beq.n	80057fc <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	2140      	movs	r1, #64	@ 0x40
 80057f8:	430a      	orrs	r2, r1
 80057fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	68da      	ldr	r2, [r3, #12]
 8005800:	23e0      	movs	r3, #224	@ 0xe0
 8005802:	00db      	lsls	r3, r3, #3
 8005804:	429a      	cmp	r2, r3
 8005806:	d952      	bls.n	80058ae <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d004      	beq.n	800581a <HAL_SPI_Transmit+0x11e>
 8005810:	2316      	movs	r3, #22
 8005812:	18fb      	adds	r3, r7, r3
 8005814:	881b      	ldrh	r3, [r3, #0]
 8005816:	2b01      	cmp	r3, #1
 8005818:	d143      	bne.n	80058a2 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800581e:	881a      	ldrh	r2, [r3, #0]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800582a:	1c9a      	adds	r2, r3, #2
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005834:	b29b      	uxth	r3, r3
 8005836:	3b01      	subs	r3, #1
 8005838:	b29a      	uxth	r2, r3
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800583e:	e030      	b.n	80058a2 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	2202      	movs	r2, #2
 8005848:	4013      	ands	r3, r2
 800584a:	2b02      	cmp	r3, #2
 800584c:	d112      	bne.n	8005874 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005852:	881a      	ldrh	r2, [r3, #0]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800585e:	1c9a      	adds	r2, r3, #2
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005868:	b29b      	uxth	r3, r3
 800586a:	3b01      	subs	r3, #1
 800586c:	b29a      	uxth	r2, r3
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005872:	e016      	b.n	80058a2 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005874:	f7fd fe16 	bl	80034a4 <HAL_GetTick>
 8005878:	0002      	movs	r2, r0
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	683a      	ldr	r2, [r7, #0]
 8005880:	429a      	cmp	r2, r3
 8005882:	d802      	bhi.n	800588a <HAL_SPI_Transmit+0x18e>
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	3301      	adds	r3, #1
 8005888:	d102      	bne.n	8005890 <HAL_SPI_Transmit+0x194>
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d108      	bne.n	80058a2 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8005890:	231f      	movs	r3, #31
 8005892:	18fb      	adds	r3, r7, r3
 8005894:	2203      	movs	r2, #3
 8005896:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	225d      	movs	r2, #93	@ 0x5d
 800589c:	2101      	movs	r1, #1
 800589e:	5499      	strb	r1, [r3, r2]
          goto error;
 80058a0:	e080      	b.n	80059a4 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d1c9      	bne.n	8005840 <HAL_SPI_Transmit+0x144>
 80058ac:	e053      	b.n	8005956 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d004      	beq.n	80058c0 <HAL_SPI_Transmit+0x1c4>
 80058b6:	2316      	movs	r3, #22
 80058b8:	18fb      	adds	r3, r7, r3
 80058ba:	881b      	ldrh	r3, [r3, #0]
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d145      	bne.n	800594c <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	330c      	adds	r3, #12
 80058ca:	7812      	ldrb	r2, [r2, #0]
 80058cc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058d2:	1c5a      	adds	r2, r3, #1
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058dc:	b29b      	uxth	r3, r3
 80058de:	3b01      	subs	r3, #1
 80058e0:	b29a      	uxth	r2, r3
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80058e6:	e031      	b.n	800594c <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	2202      	movs	r2, #2
 80058f0:	4013      	ands	r3, r2
 80058f2:	2b02      	cmp	r3, #2
 80058f4:	d113      	bne.n	800591e <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	330c      	adds	r3, #12
 8005900:	7812      	ldrb	r2, [r2, #0]
 8005902:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005908:	1c5a      	adds	r2, r3, #1
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005912:	b29b      	uxth	r3, r3
 8005914:	3b01      	subs	r3, #1
 8005916:	b29a      	uxth	r2, r3
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800591c:	e016      	b.n	800594c <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800591e:	f7fd fdc1 	bl	80034a4 <HAL_GetTick>
 8005922:	0002      	movs	r2, r0
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	683a      	ldr	r2, [r7, #0]
 800592a:	429a      	cmp	r2, r3
 800592c:	d802      	bhi.n	8005934 <HAL_SPI_Transmit+0x238>
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	3301      	adds	r3, #1
 8005932:	d102      	bne.n	800593a <HAL_SPI_Transmit+0x23e>
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d108      	bne.n	800594c <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 800593a:	231f      	movs	r3, #31
 800593c:	18fb      	adds	r3, r7, r3
 800593e:	2203      	movs	r2, #3
 8005940:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	225d      	movs	r2, #93	@ 0x5d
 8005946:	2101      	movs	r1, #1
 8005948:	5499      	strb	r1, [r3, r2]
          goto error;
 800594a:	e02b      	b.n	80059a4 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005950:	b29b      	uxth	r3, r3
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1c8      	bne.n	80058e8 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005956:	69ba      	ldr	r2, [r7, #24]
 8005958:	6839      	ldr	r1, [r7, #0]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	0018      	movs	r0, r3
 800595e:	f000 fcef 	bl	8006340 <SPI_EndRxTxTransaction>
 8005962:	1e03      	subs	r3, r0, #0
 8005964:	d002      	beq.n	800596c <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2220      	movs	r2, #32
 800596a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d10a      	bne.n	800598a <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005974:	2300      	movs	r3, #0
 8005976:	613b      	str	r3, [r7, #16]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	613b      	str	r3, [r7, #16]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	613b      	str	r3, [r7, #16]
 8005988:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800598e:	2b00      	cmp	r3, #0
 8005990:	d004      	beq.n	800599c <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8005992:	231f      	movs	r3, #31
 8005994:	18fb      	adds	r3, r7, r3
 8005996:	2201      	movs	r2, #1
 8005998:	701a      	strb	r2, [r3, #0]
 800599a:	e003      	b.n	80059a4 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	225d      	movs	r2, #93	@ 0x5d
 80059a0:	2101      	movs	r1, #1
 80059a2:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	225c      	movs	r2, #92	@ 0x5c
 80059a8:	2100      	movs	r1, #0
 80059aa:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80059ac:	231f      	movs	r3, #31
 80059ae:	18fb      	adds	r3, r7, r3
 80059b0:	781b      	ldrb	r3, [r3, #0]
}
 80059b2:	0018      	movs	r0, r3
 80059b4:	46bd      	mov	sp, r7
 80059b6:	b008      	add	sp, #32
 80059b8:	bd80      	pop	{r7, pc}
	...

080059bc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059bc:	b590      	push	{r4, r7, lr}
 80059be:	b089      	sub	sp, #36	@ 0x24
 80059c0:	af02      	add	r7, sp, #8
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	603b      	str	r3, [r7, #0]
 80059c8:	1dbb      	adds	r3, r7, #6
 80059ca:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80059cc:	2117      	movs	r1, #23
 80059ce:	187b      	adds	r3, r7, r1
 80059d0:	2200      	movs	r2, #0
 80059d2:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	225d      	movs	r2, #93	@ 0x5d
 80059d8:	5c9b      	ldrb	r3, [r3, r2]
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d003      	beq.n	80059e8 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 80059e0:	187b      	adds	r3, r7, r1
 80059e2:	2202      	movs	r2, #2
 80059e4:	701a      	strb	r2, [r3, #0]
    goto error;
 80059e6:	e12b      	b.n	8005c40 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	685a      	ldr	r2, [r3, #4]
 80059ec:	2382      	movs	r3, #130	@ 0x82
 80059ee:	005b      	lsls	r3, r3, #1
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d113      	bne.n	8005a1c <HAL_SPI_Receive+0x60>
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d10f      	bne.n	8005a1c <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	225d      	movs	r2, #93	@ 0x5d
 8005a00:	2104      	movs	r1, #4
 8005a02:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005a04:	1dbb      	adds	r3, r7, #6
 8005a06:	881c      	ldrh	r4, [r3, #0]
 8005a08:	68ba      	ldr	r2, [r7, #8]
 8005a0a:	68b9      	ldr	r1, [r7, #8]
 8005a0c:	68f8      	ldr	r0, [r7, #12]
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	9300      	str	r3, [sp, #0]
 8005a12:	0023      	movs	r3, r4
 8005a14:	f000 f924 	bl	8005c60 <HAL_SPI_TransmitReceive>
 8005a18:	0003      	movs	r3, r0
 8005a1a:	e118      	b.n	8005c4e <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	225c      	movs	r2, #92	@ 0x5c
 8005a20:	5c9b      	ldrb	r3, [r3, r2]
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d101      	bne.n	8005a2a <HAL_SPI_Receive+0x6e>
 8005a26:	2302      	movs	r3, #2
 8005a28:	e111      	b.n	8005c4e <HAL_SPI_Receive+0x292>
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	225c      	movs	r2, #92	@ 0x5c
 8005a2e:	2101      	movs	r1, #1
 8005a30:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a32:	f7fd fd37 	bl	80034a4 <HAL_GetTick>
 8005a36:	0003      	movs	r3, r0
 8005a38:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d003      	beq.n	8005a48 <HAL_SPI_Receive+0x8c>
 8005a40:	1dbb      	adds	r3, r7, #6
 8005a42:	881b      	ldrh	r3, [r3, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d104      	bne.n	8005a52 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8005a48:	2317      	movs	r3, #23
 8005a4a:	18fb      	adds	r3, r7, r3
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	701a      	strb	r2, [r3, #0]
    goto error;
 8005a50:	e0f6      	b.n	8005c40 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	225d      	movs	r2, #93	@ 0x5d
 8005a56:	2104      	movs	r1, #4
 8005a58:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	68ba      	ldr	r2, [r7, #8]
 8005a64:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	1dba      	adds	r2, r7, #6
 8005a6a:	2144      	movs	r1, #68	@ 0x44
 8005a6c:	8812      	ldrh	r2, [r2, #0]
 8005a6e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	1dba      	adds	r2, r7, #6
 8005a74:	2146      	movs	r1, #70	@ 0x46
 8005a76:	8812      	ldrh	r2, [r2, #0]
 8005a78:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2200      	movs	r2, #0
 8005a84:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2200      	movs	r2, #0
 8005a96:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	68da      	ldr	r2, [r3, #12]
 8005a9c:	23e0      	movs	r3, #224	@ 0xe0
 8005a9e:	00db      	lsls	r3, r3, #3
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d908      	bls.n	8005ab6 <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	685a      	ldr	r2, [r3, #4]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	496a      	ldr	r1, [pc, #424]	@ (8005c58 <HAL_SPI_Receive+0x29c>)
 8005ab0:	400a      	ands	r2, r1
 8005ab2:	605a      	str	r2, [r3, #4]
 8005ab4:	e008      	b.n	8005ac8 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	685a      	ldr	r2, [r3, #4]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2180      	movs	r1, #128	@ 0x80
 8005ac2:	0149      	lsls	r1, r1, #5
 8005ac4:	430a      	orrs	r2, r1
 8005ac6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	689a      	ldr	r2, [r3, #8]
 8005acc:	2380      	movs	r3, #128	@ 0x80
 8005ace:	021b      	lsls	r3, r3, #8
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d10f      	bne.n	8005af4 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2140      	movs	r1, #64	@ 0x40
 8005ae0:	438a      	bics	r2, r1
 8005ae2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	495b      	ldr	r1, [pc, #364]	@ (8005c5c <HAL_SPI_Receive+0x2a0>)
 8005af0:	400a      	ands	r2, r1
 8005af2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2240      	movs	r2, #64	@ 0x40
 8005afc:	4013      	ands	r3, r2
 8005afe:	2b40      	cmp	r3, #64	@ 0x40
 8005b00:	d007      	beq.n	8005b12 <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2140      	movs	r1, #64	@ 0x40
 8005b0e:	430a      	orrs	r2, r1
 8005b10:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	68da      	ldr	r2, [r3, #12]
 8005b16:	23e0      	movs	r3, #224	@ 0xe0
 8005b18:	00db      	lsls	r3, r3, #3
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d900      	bls.n	8005b20 <HAL_SPI_Receive+0x164>
 8005b1e:	e071      	b.n	8005c04 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005b20:	e035      	b.n	8005b8e <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d117      	bne.n	8005b60 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	330c      	adds	r3, #12
 8005b36:	001a      	movs	r2, r3
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b3c:	7812      	ldrb	r2, [r2, #0]
 8005b3e:	b2d2      	uxtb	r2, r2
 8005b40:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b46:	1c5a      	adds	r2, r3, #1
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2246      	movs	r2, #70	@ 0x46
 8005b50:	5a9b      	ldrh	r3, [r3, r2]
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	3b01      	subs	r3, #1
 8005b56:	b299      	uxth	r1, r3
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2246      	movs	r2, #70	@ 0x46
 8005b5c:	5299      	strh	r1, [r3, r2]
 8005b5e:	e016      	b.n	8005b8e <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b60:	f7fd fca0 	bl	80034a4 <HAL_GetTick>
 8005b64:	0002      	movs	r2, r0
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	683a      	ldr	r2, [r7, #0]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d802      	bhi.n	8005b76 <HAL_SPI_Receive+0x1ba>
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	3301      	adds	r3, #1
 8005b74:	d102      	bne.n	8005b7c <HAL_SPI_Receive+0x1c0>
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d108      	bne.n	8005b8e <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8005b7c:	2317      	movs	r3, #23
 8005b7e:	18fb      	adds	r3, r7, r3
 8005b80:	2203      	movs	r2, #3
 8005b82:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	225d      	movs	r2, #93	@ 0x5d
 8005b88:	2101      	movs	r1, #1
 8005b8a:	5499      	strb	r1, [r3, r2]
          goto error;
 8005b8c:	e058      	b.n	8005c40 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2246      	movs	r2, #70	@ 0x46
 8005b92:	5a9b      	ldrh	r3, [r3, r2]
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d1c3      	bne.n	8005b22 <HAL_SPI_Receive+0x166>
 8005b9a:	e039      	b.n	8005c10 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d115      	bne.n	8005bd6 <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68da      	ldr	r2, [r3, #12]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bb4:	b292      	uxth	r2, r2
 8005bb6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bbc:	1c9a      	adds	r2, r3, #2
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2246      	movs	r2, #70	@ 0x46
 8005bc6:	5a9b      	ldrh	r3, [r3, r2]
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	3b01      	subs	r3, #1
 8005bcc:	b299      	uxth	r1, r3
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2246      	movs	r2, #70	@ 0x46
 8005bd2:	5299      	strh	r1, [r3, r2]
 8005bd4:	e016      	b.n	8005c04 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bd6:	f7fd fc65 	bl	80034a4 <HAL_GetTick>
 8005bda:	0002      	movs	r2, r0
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	1ad3      	subs	r3, r2, r3
 8005be0:	683a      	ldr	r2, [r7, #0]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d802      	bhi.n	8005bec <HAL_SPI_Receive+0x230>
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	3301      	adds	r3, #1
 8005bea:	d102      	bne.n	8005bf2 <HAL_SPI_Receive+0x236>
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d108      	bne.n	8005c04 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 8005bf2:	2317      	movs	r3, #23
 8005bf4:	18fb      	adds	r3, r7, r3
 8005bf6:	2203      	movs	r2, #3
 8005bf8:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	225d      	movs	r2, #93	@ 0x5d
 8005bfe:	2101      	movs	r1, #1
 8005c00:	5499      	strb	r1, [r3, r2]
          goto error;
 8005c02:	e01d      	b.n	8005c40 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2246      	movs	r2, #70	@ 0x46
 8005c08:	5a9b      	ldrh	r3, [r3, r2]
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d1c5      	bne.n	8005b9c <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c10:	693a      	ldr	r2, [r7, #16]
 8005c12:	6839      	ldr	r1, [r7, #0]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	0018      	movs	r0, r3
 8005c18:	f000 fb34 	bl	8006284 <SPI_EndRxTransaction>
 8005c1c:	1e03      	subs	r3, r0, #0
 8005c1e:	d002      	beq.n	8005c26 <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2220      	movs	r2, #32
 8005c24:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d004      	beq.n	8005c38 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 8005c2e:	2317      	movs	r3, #23
 8005c30:	18fb      	adds	r3, r7, r3
 8005c32:	2201      	movs	r2, #1
 8005c34:	701a      	strb	r2, [r3, #0]
 8005c36:	e003      	b.n	8005c40 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	225d      	movs	r2, #93	@ 0x5d
 8005c3c:	2101      	movs	r1, #1
 8005c3e:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	225c      	movs	r2, #92	@ 0x5c
 8005c44:	2100      	movs	r1, #0
 8005c46:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005c48:	2317      	movs	r3, #23
 8005c4a:	18fb      	adds	r3, r7, r3
 8005c4c:	781b      	ldrb	r3, [r3, #0]
}
 8005c4e:	0018      	movs	r0, r3
 8005c50:	46bd      	mov	sp, r7
 8005c52:	b007      	add	sp, #28
 8005c54:	bd90      	pop	{r4, r7, pc}
 8005c56:	46c0      	nop			@ (mov r8, r8)
 8005c58:	ffffefff 	.word	0xffffefff
 8005c5c:	ffffbfff 	.word	0xffffbfff

08005c60 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b08a      	sub	sp, #40	@ 0x28
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	607a      	str	r2, [r7, #4]
 8005c6c:	001a      	movs	r2, r3
 8005c6e:	1cbb      	adds	r3, r7, #2
 8005c70:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005c72:	2301      	movs	r3, #1
 8005c74:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005c76:	2323      	movs	r3, #35	@ 0x23
 8005c78:	18fb      	adds	r3, r7, r3
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	225c      	movs	r2, #92	@ 0x5c
 8005c82:	5c9b      	ldrb	r3, [r3, r2]
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d101      	bne.n	8005c8c <HAL_SPI_TransmitReceive+0x2c>
 8005c88:	2302      	movs	r3, #2
 8005c8a:	e1c4      	b.n	8006016 <HAL_SPI_TransmitReceive+0x3b6>
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	225c      	movs	r2, #92	@ 0x5c
 8005c90:	2101      	movs	r1, #1
 8005c92:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c94:	f7fd fc06 	bl	80034a4 <HAL_GetTick>
 8005c98:	0003      	movs	r3, r0
 8005c9a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005c9c:	201b      	movs	r0, #27
 8005c9e:	183b      	adds	r3, r7, r0
 8005ca0:	68fa      	ldr	r2, [r7, #12]
 8005ca2:	215d      	movs	r1, #93	@ 0x5d
 8005ca4:	5c52      	ldrb	r2, [r2, r1]
 8005ca6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005cae:	2312      	movs	r3, #18
 8005cb0:	18fb      	adds	r3, r7, r3
 8005cb2:	1cba      	adds	r2, r7, #2
 8005cb4:	8812      	ldrh	r2, [r2, #0]
 8005cb6:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005cb8:	183b      	adds	r3, r7, r0
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d011      	beq.n	8005ce4 <HAL_SPI_TransmitReceive+0x84>
 8005cc0:	697a      	ldr	r2, [r7, #20]
 8005cc2:	2382      	movs	r3, #130	@ 0x82
 8005cc4:	005b      	lsls	r3, r3, #1
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d107      	bne.n	8005cda <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d103      	bne.n	8005cda <HAL_SPI_TransmitReceive+0x7a>
 8005cd2:	183b      	adds	r3, r7, r0
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	2b04      	cmp	r3, #4
 8005cd8:	d004      	beq.n	8005ce4 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8005cda:	2323      	movs	r3, #35	@ 0x23
 8005cdc:	18fb      	adds	r3, r7, r3
 8005cde:	2202      	movs	r2, #2
 8005ce0:	701a      	strb	r2, [r3, #0]
    goto error;
 8005ce2:	e191      	b.n	8006008 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d006      	beq.n	8005cf8 <HAL_SPI_TransmitReceive+0x98>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d003      	beq.n	8005cf8 <HAL_SPI_TransmitReceive+0x98>
 8005cf0:	1cbb      	adds	r3, r7, #2
 8005cf2:	881b      	ldrh	r3, [r3, #0]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d104      	bne.n	8005d02 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8005cf8:	2323      	movs	r3, #35	@ 0x23
 8005cfa:	18fb      	adds	r3, r7, r3
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	701a      	strb	r2, [r3, #0]
    goto error;
 8005d00:	e182      	b.n	8006008 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	225d      	movs	r2, #93	@ 0x5d
 8005d06:	5c9b      	ldrb	r3, [r3, r2]
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	2b04      	cmp	r3, #4
 8005d0c:	d003      	beq.n	8005d16 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	225d      	movs	r2, #93	@ 0x5d
 8005d12:	2105      	movs	r1, #5
 8005d14:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	1cba      	adds	r2, r7, #2
 8005d26:	2146      	movs	r1, #70	@ 0x46
 8005d28:	8812      	ldrh	r2, [r2, #0]
 8005d2a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	1cba      	adds	r2, r7, #2
 8005d30:	2144      	movs	r1, #68	@ 0x44
 8005d32:	8812      	ldrh	r2, [r2, #0]
 8005d34:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	68ba      	ldr	r2, [r7, #8]
 8005d3a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	1cba      	adds	r2, r7, #2
 8005d40:	8812      	ldrh	r2, [r2, #0]
 8005d42:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	1cba      	adds	r2, r7, #2
 8005d48:	8812      	ldrh	r2, [r2, #0]
 8005d4a:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2200      	movs	r2, #0
 8005d56:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	68da      	ldr	r2, [r3, #12]
 8005d5c:	23e0      	movs	r3, #224	@ 0xe0
 8005d5e:	00db      	lsls	r3, r3, #3
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d908      	bls.n	8005d76 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	685a      	ldr	r2, [r3, #4]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	49ac      	ldr	r1, [pc, #688]	@ (8006020 <HAL_SPI_TransmitReceive+0x3c0>)
 8005d70:	400a      	ands	r2, r1
 8005d72:	605a      	str	r2, [r3, #4]
 8005d74:	e008      	b.n	8005d88 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	685a      	ldr	r2, [r3, #4]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	2180      	movs	r1, #128	@ 0x80
 8005d82:	0149      	lsls	r1, r1, #5
 8005d84:	430a      	orrs	r2, r1
 8005d86:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	2240      	movs	r2, #64	@ 0x40
 8005d90:	4013      	ands	r3, r2
 8005d92:	2b40      	cmp	r3, #64	@ 0x40
 8005d94:	d007      	beq.n	8005da6 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	2140      	movs	r1, #64	@ 0x40
 8005da2:	430a      	orrs	r2, r1
 8005da4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	68da      	ldr	r2, [r3, #12]
 8005daa:	23e0      	movs	r3, #224	@ 0xe0
 8005dac:	00db      	lsls	r3, r3, #3
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d800      	bhi.n	8005db4 <HAL_SPI_TransmitReceive+0x154>
 8005db2:	e083      	b.n	8005ebc <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d005      	beq.n	8005dc8 <HAL_SPI_TransmitReceive+0x168>
 8005dbc:	2312      	movs	r3, #18
 8005dbe:	18fb      	adds	r3, r7, r3
 8005dc0:	881b      	ldrh	r3, [r3, #0]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d000      	beq.n	8005dc8 <HAL_SPI_TransmitReceive+0x168>
 8005dc6:	e06d      	b.n	8005ea4 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dcc:	881a      	ldrh	r2, [r3, #0]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dd8:	1c9a      	adds	r2, r3, #2
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	3b01      	subs	r3, #1
 8005de6:	b29a      	uxth	r2, r3
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005dec:	e05a      	b.n	8005ea4 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	2202      	movs	r2, #2
 8005df6:	4013      	ands	r3, r2
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	d11b      	bne.n	8005e34 <HAL_SPI_TransmitReceive+0x1d4>
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d016      	beq.n	8005e34 <HAL_SPI_TransmitReceive+0x1d4>
 8005e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d113      	bne.n	8005e34 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e10:	881a      	ldrh	r2, [r3, #0]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e1c:	1c9a      	adds	r2, r3, #2
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	3b01      	subs	r3, #1
 8005e2a:	b29a      	uxth	r2, r3
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005e30:	2300      	movs	r3, #0
 8005e32:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d11c      	bne.n	8005e7c <HAL_SPI_TransmitReceive+0x21c>
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2246      	movs	r2, #70	@ 0x46
 8005e46:	5a9b      	ldrh	r3, [r3, r2]
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d016      	beq.n	8005e7c <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	68da      	ldr	r2, [r3, #12]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e58:	b292      	uxth	r2, r2
 8005e5a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e60:	1c9a      	adds	r2, r3, #2
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2246      	movs	r2, #70	@ 0x46
 8005e6a:	5a9b      	ldrh	r3, [r3, r2]
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	3b01      	subs	r3, #1
 8005e70:	b299      	uxth	r1, r3
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2246      	movs	r2, #70	@ 0x46
 8005e76:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005e7c:	f7fd fb12 	bl	80034a4 <HAL_GetTick>
 8005e80:	0002      	movs	r2, r0
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d80b      	bhi.n	8005ea4 <HAL_SPI_TransmitReceive+0x244>
 8005e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e8e:	3301      	adds	r3, #1
 8005e90:	d008      	beq.n	8005ea4 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8005e92:	2323      	movs	r3, #35	@ 0x23
 8005e94:	18fb      	adds	r3, r7, r3
 8005e96:	2203      	movs	r2, #3
 8005e98:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	225d      	movs	r2, #93	@ 0x5d
 8005e9e:	2101      	movs	r1, #1
 8005ea0:	5499      	strb	r1, [r3, r2]
        goto error;
 8005ea2:	e0b1      	b.n	8006008 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d19f      	bne.n	8005dee <HAL_SPI_TransmitReceive+0x18e>
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2246      	movs	r2, #70	@ 0x46
 8005eb2:	5a9b      	ldrh	r3, [r3, r2]
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d199      	bne.n	8005dee <HAL_SPI_TransmitReceive+0x18e>
 8005eba:	e089      	b.n	8005fd0 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d005      	beq.n	8005ed0 <HAL_SPI_TransmitReceive+0x270>
 8005ec4:	2312      	movs	r3, #18
 8005ec6:	18fb      	adds	r3, r7, r3
 8005ec8:	881b      	ldrh	r3, [r3, #0]
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d000      	beq.n	8005ed0 <HAL_SPI_TransmitReceive+0x270>
 8005ece:	e074      	b.n	8005fba <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	330c      	adds	r3, #12
 8005eda:	7812      	ldrb	r2, [r2, #0]
 8005edc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ee2:	1c5a      	adds	r2, r3, #1
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	b29a      	uxth	r2, r3
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ef6:	e060      	b.n	8005fba <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	2202      	movs	r2, #2
 8005f00:	4013      	ands	r3, r2
 8005f02:	2b02      	cmp	r3, #2
 8005f04:	d11c      	bne.n	8005f40 <HAL_SPI_TransmitReceive+0x2e0>
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d017      	beq.n	8005f40 <HAL_SPI_TransmitReceive+0x2e0>
 8005f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d114      	bne.n	8005f40 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	330c      	adds	r3, #12
 8005f20:	7812      	ldrb	r2, [r2, #0]
 8005f22:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f28:	1c5a      	adds	r2, r3, #1
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	3b01      	subs	r3, #1
 8005f36:	b29a      	uxth	r2, r3
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	2201      	movs	r2, #1
 8005f48:	4013      	ands	r3, r2
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d11e      	bne.n	8005f8c <HAL_SPI_TransmitReceive+0x32c>
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2246      	movs	r2, #70	@ 0x46
 8005f52:	5a9b      	ldrh	r3, [r3, r2]
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d018      	beq.n	8005f8c <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	330c      	adds	r3, #12
 8005f60:	001a      	movs	r2, r3
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f66:	7812      	ldrb	r2, [r2, #0]
 8005f68:	b2d2      	uxtb	r2, r2
 8005f6a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f70:	1c5a      	adds	r2, r3, #1
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2246      	movs	r2, #70	@ 0x46
 8005f7a:	5a9b      	ldrh	r3, [r3, r2]
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	3b01      	subs	r3, #1
 8005f80:	b299      	uxth	r1, r3
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2246      	movs	r2, #70	@ 0x46
 8005f86:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005f8c:	f7fd fa8a 	bl	80034a4 <HAL_GetTick>
 8005f90:	0002      	movs	r2, r0
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	1ad3      	subs	r3, r2, r3
 8005f96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d802      	bhi.n	8005fa2 <HAL_SPI_TransmitReceive+0x342>
 8005f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	d102      	bne.n	8005fa8 <HAL_SPI_TransmitReceive+0x348>
 8005fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d108      	bne.n	8005fba <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8005fa8:	2323      	movs	r3, #35	@ 0x23
 8005faa:	18fb      	adds	r3, r7, r3
 8005fac:	2203      	movs	r2, #3
 8005fae:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	225d      	movs	r2, #93	@ 0x5d
 8005fb4:	2101      	movs	r1, #1
 8005fb6:	5499      	strb	r1, [r3, r2]
        goto error;
 8005fb8:	e026      	b.n	8006008 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d199      	bne.n	8005ef8 <HAL_SPI_TransmitReceive+0x298>
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2246      	movs	r2, #70	@ 0x46
 8005fc8:	5a9b      	ldrh	r3, [r3, r2]
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d193      	bne.n	8005ef8 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005fd0:	69fa      	ldr	r2, [r7, #28]
 8005fd2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	0018      	movs	r0, r3
 8005fd8:	f000 f9b2 	bl	8006340 <SPI_EndRxTxTransaction>
 8005fdc:	1e03      	subs	r3, r0, #0
 8005fde:	d006      	beq.n	8005fee <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8005fe0:	2323      	movs	r3, #35	@ 0x23
 8005fe2:	18fb      	adds	r3, r7, r3
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2220      	movs	r2, #32
 8005fec:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d004      	beq.n	8006000 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8005ff6:	2323      	movs	r3, #35	@ 0x23
 8005ff8:	18fb      	adds	r3, r7, r3
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	701a      	strb	r2, [r3, #0]
 8005ffe:	e003      	b.n	8006008 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	225d      	movs	r2, #93	@ 0x5d
 8006004:	2101      	movs	r1, #1
 8006006:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	225c      	movs	r2, #92	@ 0x5c
 800600c:	2100      	movs	r1, #0
 800600e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006010:	2323      	movs	r3, #35	@ 0x23
 8006012:	18fb      	adds	r3, r7, r3
 8006014:	781b      	ldrb	r3, [r3, #0]
}
 8006016:	0018      	movs	r0, r3
 8006018:	46bd      	mov	sp, r7
 800601a:	b00a      	add	sp, #40	@ 0x28
 800601c:	bd80      	pop	{r7, pc}
 800601e:	46c0      	nop			@ (mov r8, r8)
 8006020:	ffffefff 	.word	0xffffefff

08006024 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b088      	sub	sp, #32
 8006028:	af00      	add	r7, sp, #0
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	603b      	str	r3, [r7, #0]
 8006030:	1dfb      	adds	r3, r7, #7
 8006032:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006034:	f7fd fa36 	bl	80034a4 <HAL_GetTick>
 8006038:	0002      	movs	r2, r0
 800603a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800603c:	1a9b      	subs	r3, r3, r2
 800603e:	683a      	ldr	r2, [r7, #0]
 8006040:	18d3      	adds	r3, r2, r3
 8006042:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006044:	f7fd fa2e 	bl	80034a4 <HAL_GetTick>
 8006048:	0003      	movs	r3, r0
 800604a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800604c:	4b3a      	ldr	r3, [pc, #232]	@ (8006138 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	015b      	lsls	r3, r3, #5
 8006052:	0d1b      	lsrs	r3, r3, #20
 8006054:	69fa      	ldr	r2, [r7, #28]
 8006056:	4353      	muls	r3, r2
 8006058:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800605a:	e058      	b.n	800610e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	3301      	adds	r3, #1
 8006060:	d055      	beq.n	800610e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006062:	f7fd fa1f 	bl	80034a4 <HAL_GetTick>
 8006066:	0002      	movs	r2, r0
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	1ad3      	subs	r3, r2, r3
 800606c:	69fa      	ldr	r2, [r7, #28]
 800606e:	429a      	cmp	r2, r3
 8006070:	d902      	bls.n	8006078 <SPI_WaitFlagStateUntilTimeout+0x54>
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d142      	bne.n	80060fe <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	685a      	ldr	r2, [r3, #4]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	21e0      	movs	r1, #224	@ 0xe0
 8006084:	438a      	bics	r2, r1
 8006086:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	685a      	ldr	r2, [r3, #4]
 800608c:	2382      	movs	r3, #130	@ 0x82
 800608e:	005b      	lsls	r3, r3, #1
 8006090:	429a      	cmp	r2, r3
 8006092:	d113      	bne.n	80060bc <SPI_WaitFlagStateUntilTimeout+0x98>
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	689a      	ldr	r2, [r3, #8]
 8006098:	2380      	movs	r3, #128	@ 0x80
 800609a:	021b      	lsls	r3, r3, #8
 800609c:	429a      	cmp	r2, r3
 800609e:	d005      	beq.n	80060ac <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	689a      	ldr	r2, [r3, #8]
 80060a4:	2380      	movs	r3, #128	@ 0x80
 80060a6:	00db      	lsls	r3, r3, #3
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d107      	bne.n	80060bc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	2140      	movs	r1, #64	@ 0x40
 80060b8:	438a      	bics	r2, r1
 80060ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80060c0:	2380      	movs	r3, #128	@ 0x80
 80060c2:	019b      	lsls	r3, r3, #6
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d110      	bne.n	80060ea <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	491a      	ldr	r1, [pc, #104]	@ (800613c <SPI_WaitFlagStateUntilTimeout+0x118>)
 80060d4:	400a      	ands	r2, r1
 80060d6:	601a      	str	r2, [r3, #0]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2180      	movs	r1, #128	@ 0x80
 80060e4:	0189      	lsls	r1, r1, #6
 80060e6:	430a      	orrs	r2, r1
 80060e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	225d      	movs	r2, #93	@ 0x5d
 80060ee:	2101      	movs	r1, #1
 80060f0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	225c      	movs	r2, #92	@ 0x5c
 80060f6:	2100      	movs	r1, #0
 80060f8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80060fa:	2303      	movs	r3, #3
 80060fc:	e017      	b.n	800612e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d101      	bne.n	8006108 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8006104:	2300      	movs	r3, #0
 8006106:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	3b01      	subs	r3, #1
 800610c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	68ba      	ldr	r2, [r7, #8]
 8006116:	4013      	ands	r3, r2
 8006118:	68ba      	ldr	r2, [r7, #8]
 800611a:	1ad3      	subs	r3, r2, r3
 800611c:	425a      	negs	r2, r3
 800611e:	4153      	adcs	r3, r2
 8006120:	b2db      	uxtb	r3, r3
 8006122:	001a      	movs	r2, r3
 8006124:	1dfb      	adds	r3, r7, #7
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	429a      	cmp	r2, r3
 800612a:	d197      	bne.n	800605c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800612c:	2300      	movs	r3, #0
}
 800612e:	0018      	movs	r0, r3
 8006130:	46bd      	mov	sp, r7
 8006132:	b008      	add	sp, #32
 8006134:	bd80      	pop	{r7, pc}
 8006136:	46c0      	nop			@ (mov r8, r8)
 8006138:	20000014 	.word	0x20000014
 800613c:	ffffdfff 	.word	0xffffdfff

08006140 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b08a      	sub	sp, #40	@ 0x28
 8006144:	af00      	add	r7, sp, #0
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	607a      	str	r2, [r7, #4]
 800614c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800614e:	2317      	movs	r3, #23
 8006150:	18fb      	adds	r3, r7, r3
 8006152:	2200      	movs	r2, #0
 8006154:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006156:	f7fd f9a5 	bl	80034a4 <HAL_GetTick>
 800615a:	0002      	movs	r2, r0
 800615c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800615e:	1a9b      	subs	r3, r3, r2
 8006160:	683a      	ldr	r2, [r7, #0]
 8006162:	18d3      	adds	r3, r2, r3
 8006164:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006166:	f7fd f99d 	bl	80034a4 <HAL_GetTick>
 800616a:	0003      	movs	r3, r0
 800616c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	330c      	adds	r3, #12
 8006174:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006176:	4b41      	ldr	r3, [pc, #260]	@ (800627c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	0013      	movs	r3, r2
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	189b      	adds	r3, r3, r2
 8006180:	00da      	lsls	r2, r3, #3
 8006182:	1ad3      	subs	r3, r2, r3
 8006184:	0d1b      	lsrs	r3, r3, #20
 8006186:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006188:	4353      	muls	r3, r2
 800618a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800618c:	e068      	b.n	8006260 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800618e:	68ba      	ldr	r2, [r7, #8]
 8006190:	23c0      	movs	r3, #192	@ 0xc0
 8006192:	00db      	lsls	r3, r3, #3
 8006194:	429a      	cmp	r2, r3
 8006196:	d10a      	bne.n	80061ae <SPI_WaitFifoStateUntilTimeout+0x6e>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d107      	bne.n	80061ae <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	b2da      	uxtb	r2, r3
 80061a4:	2117      	movs	r1, #23
 80061a6:	187b      	adds	r3, r7, r1
 80061a8:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80061aa:	187b      	adds	r3, r7, r1
 80061ac:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	3301      	adds	r3, #1
 80061b2:	d055      	beq.n	8006260 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80061b4:	f7fd f976 	bl	80034a4 <HAL_GetTick>
 80061b8:	0002      	movs	r2, r0
 80061ba:	6a3b      	ldr	r3, [r7, #32]
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d902      	bls.n	80061ca <SPI_WaitFifoStateUntilTimeout+0x8a>
 80061c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d142      	bne.n	8006250 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	685a      	ldr	r2, [r3, #4]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	21e0      	movs	r1, #224	@ 0xe0
 80061d6:	438a      	bics	r2, r1
 80061d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	685a      	ldr	r2, [r3, #4]
 80061de:	2382      	movs	r3, #130	@ 0x82
 80061e0:	005b      	lsls	r3, r3, #1
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d113      	bne.n	800620e <SPI_WaitFifoStateUntilTimeout+0xce>
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	689a      	ldr	r2, [r3, #8]
 80061ea:	2380      	movs	r3, #128	@ 0x80
 80061ec:	021b      	lsls	r3, r3, #8
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d005      	beq.n	80061fe <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	689a      	ldr	r2, [r3, #8]
 80061f6:	2380      	movs	r3, #128	@ 0x80
 80061f8:	00db      	lsls	r3, r3, #3
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d107      	bne.n	800620e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	2140      	movs	r1, #64	@ 0x40
 800620a:	438a      	bics	r2, r1
 800620c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006212:	2380      	movs	r3, #128	@ 0x80
 8006214:	019b      	lsls	r3, r3, #6
 8006216:	429a      	cmp	r2, r3
 8006218:	d110      	bne.n	800623c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4916      	ldr	r1, [pc, #88]	@ (8006280 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8006226:	400a      	ands	r2, r1
 8006228:	601a      	str	r2, [r3, #0]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	2180      	movs	r1, #128	@ 0x80
 8006236:	0189      	lsls	r1, r1, #6
 8006238:	430a      	orrs	r2, r1
 800623a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	225d      	movs	r2, #93	@ 0x5d
 8006240:	2101      	movs	r1, #1
 8006242:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	225c      	movs	r2, #92	@ 0x5c
 8006248:	2100      	movs	r1, #0
 800624a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800624c:	2303      	movs	r3, #3
 800624e:	e010      	b.n	8006272 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d101      	bne.n	800625a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8006256:	2300      	movs	r3, #0
 8006258:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	3b01      	subs	r3, #1
 800625e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	68ba      	ldr	r2, [r7, #8]
 8006268:	4013      	ands	r3, r2
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	429a      	cmp	r2, r3
 800626e:	d18e      	bne.n	800618e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	0018      	movs	r0, r3
 8006274:	46bd      	mov	sp, r7
 8006276:	b00a      	add	sp, #40	@ 0x28
 8006278:	bd80      	pop	{r7, pc}
 800627a:	46c0      	nop			@ (mov r8, r8)
 800627c:	20000014 	.word	0x20000014
 8006280:	ffffdfff 	.word	0xffffdfff

08006284 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b086      	sub	sp, #24
 8006288:	af02      	add	r7, sp, #8
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	60b9      	str	r1, [r7, #8]
 800628e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	685a      	ldr	r2, [r3, #4]
 8006294:	2382      	movs	r3, #130	@ 0x82
 8006296:	005b      	lsls	r3, r3, #1
 8006298:	429a      	cmp	r2, r3
 800629a:	d113      	bne.n	80062c4 <SPI_EndRxTransaction+0x40>
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	689a      	ldr	r2, [r3, #8]
 80062a0:	2380      	movs	r3, #128	@ 0x80
 80062a2:	021b      	lsls	r3, r3, #8
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d005      	beq.n	80062b4 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	689a      	ldr	r2, [r3, #8]
 80062ac:	2380      	movs	r3, #128	@ 0x80
 80062ae:	00db      	lsls	r3, r3, #3
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d107      	bne.n	80062c4 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2140      	movs	r1, #64	@ 0x40
 80062c0:	438a      	bics	r2, r1
 80062c2:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80062c4:	68ba      	ldr	r2, [r7, #8]
 80062c6:	68f8      	ldr	r0, [r7, #12]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	9300      	str	r3, [sp, #0]
 80062cc:	0013      	movs	r3, r2
 80062ce:	2200      	movs	r2, #0
 80062d0:	2180      	movs	r1, #128	@ 0x80
 80062d2:	f7ff fea7 	bl	8006024 <SPI_WaitFlagStateUntilTimeout>
 80062d6:	1e03      	subs	r3, r0, #0
 80062d8:	d007      	beq.n	80062ea <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062de:	2220      	movs	r2, #32
 80062e0:	431a      	orrs	r2, r3
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80062e6:	2303      	movs	r3, #3
 80062e8:	e026      	b.n	8006338 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	685a      	ldr	r2, [r3, #4]
 80062ee:	2382      	movs	r3, #130	@ 0x82
 80062f0:	005b      	lsls	r3, r3, #1
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d11f      	bne.n	8006336 <SPI_EndRxTransaction+0xb2>
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	689a      	ldr	r2, [r3, #8]
 80062fa:	2380      	movs	r3, #128	@ 0x80
 80062fc:	021b      	lsls	r3, r3, #8
 80062fe:	429a      	cmp	r2, r3
 8006300:	d005      	beq.n	800630e <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	689a      	ldr	r2, [r3, #8]
 8006306:	2380      	movs	r3, #128	@ 0x80
 8006308:	00db      	lsls	r3, r3, #3
 800630a:	429a      	cmp	r2, r3
 800630c:	d113      	bne.n	8006336 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800630e:	68ba      	ldr	r2, [r7, #8]
 8006310:	23c0      	movs	r3, #192	@ 0xc0
 8006312:	00d9      	lsls	r1, r3, #3
 8006314:	68f8      	ldr	r0, [r7, #12]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	9300      	str	r3, [sp, #0]
 800631a:	0013      	movs	r3, r2
 800631c:	2200      	movs	r2, #0
 800631e:	f7ff ff0f 	bl	8006140 <SPI_WaitFifoStateUntilTimeout>
 8006322:	1e03      	subs	r3, r0, #0
 8006324:	d007      	beq.n	8006336 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800632a:	2220      	movs	r2, #32
 800632c:	431a      	orrs	r2, r3
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8006332:	2303      	movs	r3, #3
 8006334:	e000      	b.n	8006338 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8006336:	2300      	movs	r3, #0
}
 8006338:	0018      	movs	r0, r3
 800633a:	46bd      	mov	sp, r7
 800633c:	b004      	add	sp, #16
 800633e:	bd80      	pop	{r7, pc}

08006340 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b086      	sub	sp, #24
 8006344:	af02      	add	r7, sp, #8
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	60b9      	str	r1, [r7, #8]
 800634a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800634c:	68ba      	ldr	r2, [r7, #8]
 800634e:	23c0      	movs	r3, #192	@ 0xc0
 8006350:	0159      	lsls	r1, r3, #5
 8006352:	68f8      	ldr	r0, [r7, #12]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	9300      	str	r3, [sp, #0]
 8006358:	0013      	movs	r3, r2
 800635a:	2200      	movs	r2, #0
 800635c:	f7ff fef0 	bl	8006140 <SPI_WaitFifoStateUntilTimeout>
 8006360:	1e03      	subs	r3, r0, #0
 8006362:	d007      	beq.n	8006374 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006368:	2220      	movs	r2, #32
 800636a:	431a      	orrs	r2, r3
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006370:	2303      	movs	r3, #3
 8006372:	e027      	b.n	80063c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006374:	68ba      	ldr	r2, [r7, #8]
 8006376:	68f8      	ldr	r0, [r7, #12]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	9300      	str	r3, [sp, #0]
 800637c:	0013      	movs	r3, r2
 800637e:	2200      	movs	r2, #0
 8006380:	2180      	movs	r1, #128	@ 0x80
 8006382:	f7ff fe4f 	bl	8006024 <SPI_WaitFlagStateUntilTimeout>
 8006386:	1e03      	subs	r3, r0, #0
 8006388:	d007      	beq.n	800639a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800638e:	2220      	movs	r2, #32
 8006390:	431a      	orrs	r2, r3
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006396:	2303      	movs	r3, #3
 8006398:	e014      	b.n	80063c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800639a:	68ba      	ldr	r2, [r7, #8]
 800639c:	23c0      	movs	r3, #192	@ 0xc0
 800639e:	00d9      	lsls	r1, r3, #3
 80063a0:	68f8      	ldr	r0, [r7, #12]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	9300      	str	r3, [sp, #0]
 80063a6:	0013      	movs	r3, r2
 80063a8:	2200      	movs	r2, #0
 80063aa:	f7ff fec9 	bl	8006140 <SPI_WaitFifoStateUntilTimeout>
 80063ae:	1e03      	subs	r3, r0, #0
 80063b0:	d007      	beq.n	80063c2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063b6:	2220      	movs	r2, #32
 80063b8:	431a      	orrs	r2, r3
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80063be:	2303      	movs	r3, #3
 80063c0:	e000      	b.n	80063c4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80063c2:	2300      	movs	r3, #0
}
 80063c4:	0018      	movs	r0, r3
 80063c6:	46bd      	mov	sp, r7
 80063c8:	b004      	add	sp, #16
 80063ca:	bd80      	pop	{r7, pc}

080063cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b082      	sub	sp, #8
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d101      	bne.n	80063de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e04a      	b.n	8006474 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	223d      	movs	r2, #61	@ 0x3d
 80063e2:	5c9b      	ldrb	r3, [r3, r2]
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d107      	bne.n	80063fa <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	223c      	movs	r2, #60	@ 0x3c
 80063ee:	2100      	movs	r1, #0
 80063f0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	0018      	movs	r0, r3
 80063f6:	f7fc f9a1 	bl	800273c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	223d      	movs	r2, #61	@ 0x3d
 80063fe:	2102      	movs	r1, #2
 8006400:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	3304      	adds	r3, #4
 800640a:	0019      	movs	r1, r3
 800640c:	0010      	movs	r0, r2
 800640e:	f000 f957 	bl	80066c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2248      	movs	r2, #72	@ 0x48
 8006416:	2101      	movs	r1, #1
 8006418:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	223e      	movs	r2, #62	@ 0x3e
 800641e:	2101      	movs	r1, #1
 8006420:	5499      	strb	r1, [r3, r2]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	223f      	movs	r2, #63	@ 0x3f
 8006426:	2101      	movs	r1, #1
 8006428:	5499      	strb	r1, [r3, r2]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2240      	movs	r2, #64	@ 0x40
 800642e:	2101      	movs	r1, #1
 8006430:	5499      	strb	r1, [r3, r2]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2241      	movs	r2, #65	@ 0x41
 8006436:	2101      	movs	r1, #1
 8006438:	5499      	strb	r1, [r3, r2]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2242      	movs	r2, #66	@ 0x42
 800643e:	2101      	movs	r1, #1
 8006440:	5499      	strb	r1, [r3, r2]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2243      	movs	r2, #67	@ 0x43
 8006446:	2101      	movs	r1, #1
 8006448:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2244      	movs	r2, #68	@ 0x44
 800644e:	2101      	movs	r1, #1
 8006450:	5499      	strb	r1, [r3, r2]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2245      	movs	r2, #69	@ 0x45
 8006456:	2101      	movs	r1, #1
 8006458:	5499      	strb	r1, [r3, r2]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2246      	movs	r2, #70	@ 0x46
 800645e:	2101      	movs	r1, #1
 8006460:	5499      	strb	r1, [r3, r2]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2247      	movs	r2, #71	@ 0x47
 8006466:	2101      	movs	r1, #1
 8006468:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	223d      	movs	r2, #61	@ 0x3d
 800646e:	2101      	movs	r1, #1
 8006470:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006472:	2300      	movs	r3, #0
}
 8006474:	0018      	movs	r0, r3
 8006476:	46bd      	mov	sp, r7
 8006478:	b002      	add	sp, #8
 800647a:	bd80      	pop	{r7, pc}

0800647c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	223d      	movs	r2, #61	@ 0x3d
 8006488:	5c9b      	ldrb	r3, [r3, r2]
 800648a:	b2db      	uxtb	r3, r3
 800648c:	2b01      	cmp	r3, #1
 800648e:	d001      	beq.n	8006494 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	e035      	b.n	8006500 <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	223d      	movs	r2, #61	@ 0x3d
 8006498:	2102      	movs	r1, #2
 800649a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a19      	ldr	r2, [pc, #100]	@ (8006508 <HAL_TIM_Base_Start+0x8c>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d00a      	beq.n	80064bc <HAL_TIM_Base_Start+0x40>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	2380      	movs	r3, #128	@ 0x80
 80064ac:	05db      	lsls	r3, r3, #23
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d004      	beq.n	80064bc <HAL_TIM_Base_Start+0x40>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a15      	ldr	r2, [pc, #84]	@ (800650c <HAL_TIM_Base_Start+0x90>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d116      	bne.n	80064ea <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	4a13      	ldr	r2, [pc, #76]	@ (8006510 <HAL_TIM_Base_Start+0x94>)
 80064c4:	4013      	ands	r3, r2
 80064c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2b06      	cmp	r3, #6
 80064cc:	d016      	beq.n	80064fc <HAL_TIM_Base_Start+0x80>
 80064ce:	68fa      	ldr	r2, [r7, #12]
 80064d0:	2380      	movs	r3, #128	@ 0x80
 80064d2:	025b      	lsls	r3, r3, #9
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d011      	beq.n	80064fc <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	2101      	movs	r1, #1
 80064e4:	430a      	orrs	r2, r1
 80064e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064e8:	e008      	b.n	80064fc <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	2101      	movs	r1, #1
 80064f6:	430a      	orrs	r2, r1
 80064f8:	601a      	str	r2, [r3, #0]
 80064fa:	e000      	b.n	80064fe <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064fc:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80064fe:	2300      	movs	r3, #0
}
 8006500:	0018      	movs	r0, r3
 8006502:	46bd      	mov	sp, r7
 8006504:	b004      	add	sp, #16
 8006506:	bd80      	pop	{r7, pc}
 8006508:	40012c00 	.word	0x40012c00
 800650c:	40000400 	.word	0x40000400
 8006510:	00010007 	.word	0x00010007

08006514 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b084      	sub	sp, #16
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800651e:	230f      	movs	r3, #15
 8006520:	18fb      	adds	r3, r7, r3
 8006522:	2200      	movs	r2, #0
 8006524:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	223c      	movs	r2, #60	@ 0x3c
 800652a:	5c9b      	ldrb	r3, [r3, r2]
 800652c:	2b01      	cmp	r3, #1
 800652e:	d101      	bne.n	8006534 <HAL_TIM_ConfigClockSource+0x20>
 8006530:	2302      	movs	r3, #2
 8006532:	e0bc      	b.n	80066ae <HAL_TIM_ConfigClockSource+0x19a>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	223c      	movs	r2, #60	@ 0x3c
 8006538:	2101      	movs	r1, #1
 800653a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	223d      	movs	r2, #61	@ 0x3d
 8006540:	2102      	movs	r1, #2
 8006542:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	4a5a      	ldr	r2, [pc, #360]	@ (80066b8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8006550:	4013      	ands	r3, r2
 8006552:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	4a59      	ldr	r2, [pc, #356]	@ (80066bc <HAL_TIM_ConfigClockSource+0x1a8>)
 8006558:	4013      	ands	r3, r2
 800655a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	68ba      	ldr	r2, [r7, #8]
 8006562:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	2280      	movs	r2, #128	@ 0x80
 800656a:	0192      	lsls	r2, r2, #6
 800656c:	4293      	cmp	r3, r2
 800656e:	d040      	beq.n	80065f2 <HAL_TIM_ConfigClockSource+0xde>
 8006570:	2280      	movs	r2, #128	@ 0x80
 8006572:	0192      	lsls	r2, r2, #6
 8006574:	4293      	cmp	r3, r2
 8006576:	d900      	bls.n	800657a <HAL_TIM_ConfigClockSource+0x66>
 8006578:	e088      	b.n	800668c <HAL_TIM_ConfigClockSource+0x178>
 800657a:	2280      	movs	r2, #128	@ 0x80
 800657c:	0152      	lsls	r2, r2, #5
 800657e:	4293      	cmp	r3, r2
 8006580:	d100      	bne.n	8006584 <HAL_TIM_ConfigClockSource+0x70>
 8006582:	e088      	b.n	8006696 <HAL_TIM_ConfigClockSource+0x182>
 8006584:	2280      	movs	r2, #128	@ 0x80
 8006586:	0152      	lsls	r2, r2, #5
 8006588:	4293      	cmp	r3, r2
 800658a:	d900      	bls.n	800658e <HAL_TIM_ConfigClockSource+0x7a>
 800658c:	e07e      	b.n	800668c <HAL_TIM_ConfigClockSource+0x178>
 800658e:	2b70      	cmp	r3, #112	@ 0x70
 8006590:	d018      	beq.n	80065c4 <HAL_TIM_ConfigClockSource+0xb0>
 8006592:	d900      	bls.n	8006596 <HAL_TIM_ConfigClockSource+0x82>
 8006594:	e07a      	b.n	800668c <HAL_TIM_ConfigClockSource+0x178>
 8006596:	2b60      	cmp	r3, #96	@ 0x60
 8006598:	d04f      	beq.n	800663a <HAL_TIM_ConfigClockSource+0x126>
 800659a:	d900      	bls.n	800659e <HAL_TIM_ConfigClockSource+0x8a>
 800659c:	e076      	b.n	800668c <HAL_TIM_ConfigClockSource+0x178>
 800659e:	2b50      	cmp	r3, #80	@ 0x50
 80065a0:	d03b      	beq.n	800661a <HAL_TIM_ConfigClockSource+0x106>
 80065a2:	d900      	bls.n	80065a6 <HAL_TIM_ConfigClockSource+0x92>
 80065a4:	e072      	b.n	800668c <HAL_TIM_ConfigClockSource+0x178>
 80065a6:	2b40      	cmp	r3, #64	@ 0x40
 80065a8:	d057      	beq.n	800665a <HAL_TIM_ConfigClockSource+0x146>
 80065aa:	d900      	bls.n	80065ae <HAL_TIM_ConfigClockSource+0x9a>
 80065ac:	e06e      	b.n	800668c <HAL_TIM_ConfigClockSource+0x178>
 80065ae:	2b30      	cmp	r3, #48	@ 0x30
 80065b0:	d063      	beq.n	800667a <HAL_TIM_ConfigClockSource+0x166>
 80065b2:	d86b      	bhi.n	800668c <HAL_TIM_ConfigClockSource+0x178>
 80065b4:	2b20      	cmp	r3, #32
 80065b6:	d060      	beq.n	800667a <HAL_TIM_ConfigClockSource+0x166>
 80065b8:	d868      	bhi.n	800668c <HAL_TIM_ConfigClockSource+0x178>
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d05d      	beq.n	800667a <HAL_TIM_ConfigClockSource+0x166>
 80065be:	2b10      	cmp	r3, #16
 80065c0:	d05b      	beq.n	800667a <HAL_TIM_ConfigClockSource+0x166>
 80065c2:	e063      	b.n	800668c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80065d4:	f000 f974 	bl	80068c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	2277      	movs	r2, #119	@ 0x77
 80065e4:	4313      	orrs	r3, r2
 80065e6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	68ba      	ldr	r2, [r7, #8]
 80065ee:	609a      	str	r2, [r3, #8]
      break;
 80065f0:	e052      	b.n	8006698 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006602:	f000 f95d 	bl	80068c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	689a      	ldr	r2, [r3, #8]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	2180      	movs	r1, #128	@ 0x80
 8006612:	01c9      	lsls	r1, r1, #7
 8006614:	430a      	orrs	r2, r1
 8006616:	609a      	str	r2, [r3, #8]
      break;
 8006618:	e03e      	b.n	8006698 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006626:	001a      	movs	r2, r3
 8006628:	f000 f8ce 	bl	80067c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	2150      	movs	r1, #80	@ 0x50
 8006632:	0018      	movs	r0, r3
 8006634:	f000 f928 	bl	8006888 <TIM_ITRx_SetConfig>
      break;
 8006638:	e02e      	b.n	8006698 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006646:	001a      	movs	r2, r3
 8006648:	f000 f8ec 	bl	8006824 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	2160      	movs	r1, #96	@ 0x60
 8006652:	0018      	movs	r0, r3
 8006654:	f000 f918 	bl	8006888 <TIM_ITRx_SetConfig>
      break;
 8006658:	e01e      	b.n	8006698 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006666:	001a      	movs	r2, r3
 8006668:	f000 f8ae 	bl	80067c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2140      	movs	r1, #64	@ 0x40
 8006672:	0018      	movs	r0, r3
 8006674:	f000 f908 	bl	8006888 <TIM_ITRx_SetConfig>
      break;
 8006678:	e00e      	b.n	8006698 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	0019      	movs	r1, r3
 8006684:	0010      	movs	r0, r2
 8006686:	f000 f8ff 	bl	8006888 <TIM_ITRx_SetConfig>
      break;
 800668a:	e005      	b.n	8006698 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800668c:	230f      	movs	r3, #15
 800668e:	18fb      	adds	r3, r7, r3
 8006690:	2201      	movs	r2, #1
 8006692:	701a      	strb	r2, [r3, #0]
      break;
 8006694:	e000      	b.n	8006698 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8006696:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	223d      	movs	r2, #61	@ 0x3d
 800669c:	2101      	movs	r1, #1
 800669e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	223c      	movs	r2, #60	@ 0x3c
 80066a4:	2100      	movs	r1, #0
 80066a6:	5499      	strb	r1, [r3, r2]

  return status;
 80066a8:	230f      	movs	r3, #15
 80066aa:	18fb      	adds	r3, r7, r3
 80066ac:	781b      	ldrb	r3, [r3, #0]
}
 80066ae:	0018      	movs	r0, r3
 80066b0:	46bd      	mov	sp, r7
 80066b2:	b004      	add	sp, #16
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	46c0      	nop			@ (mov r8, r8)
 80066b8:	ffceff88 	.word	0xffceff88
 80066bc:	ffff00ff 	.word	0xffff00ff

080066c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4a37      	ldr	r2, [pc, #220]	@ (80067b0 <TIM_Base_SetConfig+0xf0>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d008      	beq.n	80066ea <TIM_Base_SetConfig+0x2a>
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	2380      	movs	r3, #128	@ 0x80
 80066dc:	05db      	lsls	r3, r3, #23
 80066de:	429a      	cmp	r2, r3
 80066e0:	d003      	beq.n	80066ea <TIM_Base_SetConfig+0x2a>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	4a33      	ldr	r2, [pc, #204]	@ (80067b4 <TIM_Base_SetConfig+0xf4>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d108      	bne.n	80066fc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2270      	movs	r2, #112	@ 0x70
 80066ee:	4393      	bics	r3, r2
 80066f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	68fa      	ldr	r2, [r7, #12]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	4a2c      	ldr	r2, [pc, #176]	@ (80067b0 <TIM_Base_SetConfig+0xf0>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d014      	beq.n	800672e <TIM_Base_SetConfig+0x6e>
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	2380      	movs	r3, #128	@ 0x80
 8006708:	05db      	lsls	r3, r3, #23
 800670a:	429a      	cmp	r2, r3
 800670c:	d00f      	beq.n	800672e <TIM_Base_SetConfig+0x6e>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a28      	ldr	r2, [pc, #160]	@ (80067b4 <TIM_Base_SetConfig+0xf4>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d00b      	beq.n	800672e <TIM_Base_SetConfig+0x6e>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4a27      	ldr	r2, [pc, #156]	@ (80067b8 <TIM_Base_SetConfig+0xf8>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d007      	beq.n	800672e <TIM_Base_SetConfig+0x6e>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4a26      	ldr	r2, [pc, #152]	@ (80067bc <TIM_Base_SetConfig+0xfc>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d003      	beq.n	800672e <TIM_Base_SetConfig+0x6e>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	4a25      	ldr	r2, [pc, #148]	@ (80067c0 <TIM_Base_SetConfig+0x100>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d108      	bne.n	8006740 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	4a24      	ldr	r2, [pc, #144]	@ (80067c4 <TIM_Base_SetConfig+0x104>)
 8006732:	4013      	ands	r3, r2
 8006734:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	68fa      	ldr	r2, [r7, #12]
 800673c:	4313      	orrs	r3, r2
 800673e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2280      	movs	r2, #128	@ 0x80
 8006744:	4393      	bics	r3, r2
 8006746:	001a      	movs	r2, r3
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	695b      	ldr	r3, [r3, #20]
 800674c:	4313      	orrs	r3, r2
 800674e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	689a      	ldr	r2, [r3, #8]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4a11      	ldr	r2, [pc, #68]	@ (80067b0 <TIM_Base_SetConfig+0xf0>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d007      	beq.n	800677e <TIM_Base_SetConfig+0xbe>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4a12      	ldr	r2, [pc, #72]	@ (80067bc <TIM_Base_SetConfig+0xfc>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d003      	beq.n	800677e <TIM_Base_SetConfig+0xbe>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	4a11      	ldr	r2, [pc, #68]	@ (80067c0 <TIM_Base_SetConfig+0x100>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d103      	bne.n	8006786 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	691a      	ldr	r2, [r3, #16]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2201      	movs	r2, #1
 800678a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	691b      	ldr	r3, [r3, #16]
 8006790:	2201      	movs	r2, #1
 8006792:	4013      	ands	r3, r2
 8006794:	2b01      	cmp	r3, #1
 8006796:	d106      	bne.n	80067a6 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	691b      	ldr	r3, [r3, #16]
 800679c:	2201      	movs	r2, #1
 800679e:	4393      	bics	r3, r2
 80067a0:	001a      	movs	r2, r3
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	611a      	str	r2, [r3, #16]
  }
}
 80067a6:	46c0      	nop			@ (mov r8, r8)
 80067a8:	46bd      	mov	sp, r7
 80067aa:	b004      	add	sp, #16
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	46c0      	nop			@ (mov r8, r8)
 80067b0:	40012c00 	.word	0x40012c00
 80067b4:	40000400 	.word	0x40000400
 80067b8:	40002000 	.word	0x40002000
 80067bc:	40014400 	.word	0x40014400
 80067c0:	40014800 	.word	0x40014800
 80067c4:	fffffcff 	.word	0xfffffcff

080067c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b086      	sub	sp, #24
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	60b9      	str	r1, [r7, #8]
 80067d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	6a1b      	ldr	r3, [r3, #32]
 80067d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6a1b      	ldr	r3, [r3, #32]
 80067de:	2201      	movs	r2, #1
 80067e0:	4393      	bics	r3, r2
 80067e2:	001a      	movs	r2, r3
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	699b      	ldr	r3, [r3, #24]
 80067ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	22f0      	movs	r2, #240	@ 0xf0
 80067f2:	4393      	bics	r3, r2
 80067f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	011b      	lsls	r3, r3, #4
 80067fa:	693a      	ldr	r2, [r7, #16]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	220a      	movs	r2, #10
 8006804:	4393      	bics	r3, r2
 8006806:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006808:	697a      	ldr	r2, [r7, #20]
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	4313      	orrs	r3, r2
 800680e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	693a      	ldr	r2, [r7, #16]
 8006814:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	697a      	ldr	r2, [r7, #20]
 800681a:	621a      	str	r2, [r3, #32]
}
 800681c:	46c0      	nop			@ (mov r8, r8)
 800681e:	46bd      	mov	sp, r7
 8006820:	b006      	add	sp, #24
 8006822:	bd80      	pop	{r7, pc}

08006824 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b086      	sub	sp, #24
 8006828:	af00      	add	r7, sp, #0
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	6a1b      	ldr	r3, [r3, #32]
 8006834:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	6a1b      	ldr	r3, [r3, #32]
 800683a:	2210      	movs	r2, #16
 800683c:	4393      	bics	r3, r2
 800683e:	001a      	movs	r2, r3
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	699b      	ldr	r3, [r3, #24]
 8006848:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	4a0d      	ldr	r2, [pc, #52]	@ (8006884 <TIM_TI2_ConfigInputStage+0x60>)
 800684e:	4013      	ands	r3, r2
 8006850:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	031b      	lsls	r3, r3, #12
 8006856:	693a      	ldr	r2, [r7, #16]
 8006858:	4313      	orrs	r3, r2
 800685a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	22a0      	movs	r2, #160	@ 0xa0
 8006860:	4393      	bics	r3, r2
 8006862:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	011b      	lsls	r3, r3, #4
 8006868:	697a      	ldr	r2, [r7, #20]
 800686a:	4313      	orrs	r3, r2
 800686c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	693a      	ldr	r2, [r7, #16]
 8006872:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	697a      	ldr	r2, [r7, #20]
 8006878:	621a      	str	r2, [r3, #32]
}
 800687a:	46c0      	nop			@ (mov r8, r8)
 800687c:	46bd      	mov	sp, r7
 800687e:	b006      	add	sp, #24
 8006880:	bd80      	pop	{r7, pc}
 8006882:	46c0      	nop			@ (mov r8, r8)
 8006884:	ffff0fff 	.word	0xffff0fff

08006888 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	4a08      	ldr	r2, [pc, #32]	@ (80068bc <TIM_ITRx_SetConfig+0x34>)
 800689c:	4013      	ands	r3, r2
 800689e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80068a0:	683a      	ldr	r2, [r7, #0]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	2207      	movs	r2, #7
 80068a8:	4313      	orrs	r3, r2
 80068aa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	68fa      	ldr	r2, [r7, #12]
 80068b0:	609a      	str	r2, [r3, #8]
}
 80068b2:	46c0      	nop			@ (mov r8, r8)
 80068b4:	46bd      	mov	sp, r7
 80068b6:	b004      	add	sp, #16
 80068b8:	bd80      	pop	{r7, pc}
 80068ba:	46c0      	nop			@ (mov r8, r8)
 80068bc:	ffcfff8f 	.word	0xffcfff8f

080068c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b086      	sub	sp, #24
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	60b9      	str	r1, [r7, #8]
 80068ca:	607a      	str	r2, [r7, #4]
 80068cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	4a09      	ldr	r2, [pc, #36]	@ (80068fc <TIM_ETR_SetConfig+0x3c>)
 80068d8:	4013      	ands	r3, r2
 80068da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	021a      	lsls	r2, r3, #8
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	431a      	orrs	r2, r3
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	4313      	orrs	r3, r2
 80068e8:	697a      	ldr	r2, [r7, #20]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	697a      	ldr	r2, [r7, #20]
 80068f2:	609a      	str	r2, [r3, #8]
}
 80068f4:	46c0      	nop			@ (mov r8, r8)
 80068f6:	46bd      	mov	sp, r7
 80068f8:	b006      	add	sp, #24
 80068fa:	bd80      	pop	{r7, pc}
 80068fc:	ffff00ff 	.word	0xffff00ff

08006900 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b084      	sub	sp, #16
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	223c      	movs	r2, #60	@ 0x3c
 800690e:	5c9b      	ldrb	r3, [r3, r2]
 8006910:	2b01      	cmp	r3, #1
 8006912:	d101      	bne.n	8006918 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006914:	2302      	movs	r3, #2
 8006916:	e050      	b.n	80069ba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	223c      	movs	r2, #60	@ 0x3c
 800691c:	2101      	movs	r1, #1
 800691e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	223d      	movs	r2, #61	@ 0x3d
 8006924:	2102      	movs	r1, #2
 8006926:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a21      	ldr	r2, [pc, #132]	@ (80069c4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d108      	bne.n	8006954 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	4a20      	ldr	r2, [pc, #128]	@ (80069c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006946:	4013      	ands	r3, r2
 8006948:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	68fa      	ldr	r2, [r7, #12]
 8006950:	4313      	orrs	r3, r2
 8006952:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2270      	movs	r2, #112	@ 0x70
 8006958:	4393      	bics	r3, r2
 800695a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	68fa      	ldr	r2, [r7, #12]
 8006962:	4313      	orrs	r3, r2
 8006964:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	68fa      	ldr	r2, [r7, #12]
 800696c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a14      	ldr	r2, [pc, #80]	@ (80069c4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d00a      	beq.n	800698e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	2380      	movs	r3, #128	@ 0x80
 800697e:	05db      	lsls	r3, r3, #23
 8006980:	429a      	cmp	r2, r3
 8006982:	d004      	beq.n	800698e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a10      	ldr	r2, [pc, #64]	@ (80069cc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d10c      	bne.n	80069a8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	2280      	movs	r2, #128	@ 0x80
 8006992:	4393      	bics	r3, r2
 8006994:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	68ba      	ldr	r2, [r7, #8]
 800699c:	4313      	orrs	r3, r2
 800699e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	68ba      	ldr	r2, [r7, #8]
 80069a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	223d      	movs	r2, #61	@ 0x3d
 80069ac:	2101      	movs	r1, #1
 80069ae:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	223c      	movs	r2, #60	@ 0x3c
 80069b4:	2100      	movs	r1, #0
 80069b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80069b8:	2300      	movs	r3, #0
}
 80069ba:	0018      	movs	r0, r3
 80069bc:	46bd      	mov	sp, r7
 80069be:	b004      	add	sp, #16
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	46c0      	nop			@ (mov r8, r8)
 80069c4:	40012c00 	.word	0x40012c00
 80069c8:	ff0fffff 	.word	0xff0fffff
 80069cc:	40000400 	.word	0x40000400

080069d0 <siprintf>:
 80069d0:	b40e      	push	{r1, r2, r3}
 80069d2:	b500      	push	{lr}
 80069d4:	490b      	ldr	r1, [pc, #44]	@ (8006a04 <siprintf+0x34>)
 80069d6:	b09c      	sub	sp, #112	@ 0x70
 80069d8:	ab1d      	add	r3, sp, #116	@ 0x74
 80069da:	9002      	str	r0, [sp, #8]
 80069dc:	9006      	str	r0, [sp, #24]
 80069de:	9107      	str	r1, [sp, #28]
 80069e0:	9104      	str	r1, [sp, #16]
 80069e2:	4809      	ldr	r0, [pc, #36]	@ (8006a08 <siprintf+0x38>)
 80069e4:	4909      	ldr	r1, [pc, #36]	@ (8006a0c <siprintf+0x3c>)
 80069e6:	cb04      	ldmia	r3!, {r2}
 80069e8:	9105      	str	r1, [sp, #20]
 80069ea:	6800      	ldr	r0, [r0, #0]
 80069ec:	a902      	add	r1, sp, #8
 80069ee:	9301      	str	r3, [sp, #4]
 80069f0:	f000 f9a8 	bl	8006d44 <_svfiprintf_r>
 80069f4:	2200      	movs	r2, #0
 80069f6:	9b02      	ldr	r3, [sp, #8]
 80069f8:	701a      	strb	r2, [r3, #0]
 80069fa:	b01c      	add	sp, #112	@ 0x70
 80069fc:	bc08      	pop	{r3}
 80069fe:	b003      	add	sp, #12
 8006a00:	4718      	bx	r3
 8006a02:	46c0      	nop			@ (mov r8, r8)
 8006a04:	7fffffff 	.word	0x7fffffff
 8006a08:	2000004c 	.word	0x2000004c
 8006a0c:	ffff0208 	.word	0xffff0208

08006a10 <memset>:
 8006a10:	0003      	movs	r3, r0
 8006a12:	1882      	adds	r2, r0, r2
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d100      	bne.n	8006a1a <memset+0xa>
 8006a18:	4770      	bx	lr
 8006a1a:	7019      	strb	r1, [r3, #0]
 8006a1c:	3301      	adds	r3, #1
 8006a1e:	e7f9      	b.n	8006a14 <memset+0x4>

08006a20 <__errno>:
 8006a20:	4b01      	ldr	r3, [pc, #4]	@ (8006a28 <__errno+0x8>)
 8006a22:	6818      	ldr	r0, [r3, #0]
 8006a24:	4770      	bx	lr
 8006a26:	46c0      	nop			@ (mov r8, r8)
 8006a28:	2000004c 	.word	0x2000004c

08006a2c <__libc_init_array>:
 8006a2c:	b570      	push	{r4, r5, r6, lr}
 8006a2e:	2600      	movs	r6, #0
 8006a30:	4c0c      	ldr	r4, [pc, #48]	@ (8006a64 <__libc_init_array+0x38>)
 8006a32:	4d0d      	ldr	r5, [pc, #52]	@ (8006a68 <__libc_init_array+0x3c>)
 8006a34:	1b64      	subs	r4, r4, r5
 8006a36:	10a4      	asrs	r4, r4, #2
 8006a38:	42a6      	cmp	r6, r4
 8006a3a:	d109      	bne.n	8006a50 <__libc_init_array+0x24>
 8006a3c:	2600      	movs	r6, #0
 8006a3e:	f000 fc65 	bl	800730c <_init>
 8006a42:	4c0a      	ldr	r4, [pc, #40]	@ (8006a6c <__libc_init_array+0x40>)
 8006a44:	4d0a      	ldr	r5, [pc, #40]	@ (8006a70 <__libc_init_array+0x44>)
 8006a46:	1b64      	subs	r4, r4, r5
 8006a48:	10a4      	asrs	r4, r4, #2
 8006a4a:	42a6      	cmp	r6, r4
 8006a4c:	d105      	bne.n	8006a5a <__libc_init_array+0x2e>
 8006a4e:	bd70      	pop	{r4, r5, r6, pc}
 8006a50:	00b3      	lsls	r3, r6, #2
 8006a52:	58eb      	ldr	r3, [r5, r3]
 8006a54:	4798      	blx	r3
 8006a56:	3601      	adds	r6, #1
 8006a58:	e7ee      	b.n	8006a38 <__libc_init_array+0xc>
 8006a5a:	00b3      	lsls	r3, r6, #2
 8006a5c:	58eb      	ldr	r3, [r5, r3]
 8006a5e:	4798      	blx	r3
 8006a60:	3601      	adds	r6, #1
 8006a62:	e7f2      	b.n	8006a4a <__libc_init_array+0x1e>
 8006a64:	0800743c 	.word	0x0800743c
 8006a68:	0800743c 	.word	0x0800743c
 8006a6c:	08007440 	.word	0x08007440
 8006a70:	0800743c 	.word	0x0800743c

08006a74 <__retarget_lock_acquire_recursive>:
 8006a74:	4770      	bx	lr

08006a76 <__retarget_lock_release_recursive>:
 8006a76:	4770      	bx	lr

08006a78 <memcpy>:
 8006a78:	2300      	movs	r3, #0
 8006a7a:	b510      	push	{r4, lr}
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d100      	bne.n	8006a82 <memcpy+0xa>
 8006a80:	bd10      	pop	{r4, pc}
 8006a82:	5ccc      	ldrb	r4, [r1, r3]
 8006a84:	54c4      	strb	r4, [r0, r3]
 8006a86:	3301      	adds	r3, #1
 8006a88:	e7f8      	b.n	8006a7c <memcpy+0x4>
	...

08006a8c <_free_r>:
 8006a8c:	b570      	push	{r4, r5, r6, lr}
 8006a8e:	0005      	movs	r5, r0
 8006a90:	1e0c      	subs	r4, r1, #0
 8006a92:	d010      	beq.n	8006ab6 <_free_r+0x2a>
 8006a94:	3c04      	subs	r4, #4
 8006a96:	6823      	ldr	r3, [r4, #0]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	da00      	bge.n	8006a9e <_free_r+0x12>
 8006a9c:	18e4      	adds	r4, r4, r3
 8006a9e:	0028      	movs	r0, r5
 8006aa0:	f000 f8e0 	bl	8006c64 <__malloc_lock>
 8006aa4:	4a1d      	ldr	r2, [pc, #116]	@ (8006b1c <_free_r+0x90>)
 8006aa6:	6813      	ldr	r3, [r2, #0]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d105      	bne.n	8006ab8 <_free_r+0x2c>
 8006aac:	6063      	str	r3, [r4, #4]
 8006aae:	6014      	str	r4, [r2, #0]
 8006ab0:	0028      	movs	r0, r5
 8006ab2:	f000 f8df 	bl	8006c74 <__malloc_unlock>
 8006ab6:	bd70      	pop	{r4, r5, r6, pc}
 8006ab8:	42a3      	cmp	r3, r4
 8006aba:	d908      	bls.n	8006ace <_free_r+0x42>
 8006abc:	6820      	ldr	r0, [r4, #0]
 8006abe:	1821      	adds	r1, r4, r0
 8006ac0:	428b      	cmp	r3, r1
 8006ac2:	d1f3      	bne.n	8006aac <_free_r+0x20>
 8006ac4:	6819      	ldr	r1, [r3, #0]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	1809      	adds	r1, r1, r0
 8006aca:	6021      	str	r1, [r4, #0]
 8006acc:	e7ee      	b.n	8006aac <_free_r+0x20>
 8006ace:	001a      	movs	r2, r3
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d001      	beq.n	8006ada <_free_r+0x4e>
 8006ad6:	42a3      	cmp	r3, r4
 8006ad8:	d9f9      	bls.n	8006ace <_free_r+0x42>
 8006ada:	6811      	ldr	r1, [r2, #0]
 8006adc:	1850      	adds	r0, r2, r1
 8006ade:	42a0      	cmp	r0, r4
 8006ae0:	d10b      	bne.n	8006afa <_free_r+0x6e>
 8006ae2:	6820      	ldr	r0, [r4, #0]
 8006ae4:	1809      	adds	r1, r1, r0
 8006ae6:	1850      	adds	r0, r2, r1
 8006ae8:	6011      	str	r1, [r2, #0]
 8006aea:	4283      	cmp	r3, r0
 8006aec:	d1e0      	bne.n	8006ab0 <_free_r+0x24>
 8006aee:	6818      	ldr	r0, [r3, #0]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	1841      	adds	r1, r0, r1
 8006af4:	6011      	str	r1, [r2, #0]
 8006af6:	6053      	str	r3, [r2, #4]
 8006af8:	e7da      	b.n	8006ab0 <_free_r+0x24>
 8006afa:	42a0      	cmp	r0, r4
 8006afc:	d902      	bls.n	8006b04 <_free_r+0x78>
 8006afe:	230c      	movs	r3, #12
 8006b00:	602b      	str	r3, [r5, #0]
 8006b02:	e7d5      	b.n	8006ab0 <_free_r+0x24>
 8006b04:	6820      	ldr	r0, [r4, #0]
 8006b06:	1821      	adds	r1, r4, r0
 8006b08:	428b      	cmp	r3, r1
 8006b0a:	d103      	bne.n	8006b14 <_free_r+0x88>
 8006b0c:	6819      	ldr	r1, [r3, #0]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	1809      	adds	r1, r1, r0
 8006b12:	6021      	str	r1, [r4, #0]
 8006b14:	6063      	str	r3, [r4, #4]
 8006b16:	6054      	str	r4, [r2, #4]
 8006b18:	e7ca      	b.n	8006ab0 <_free_r+0x24>
 8006b1a:	46c0      	nop			@ (mov r8, r8)
 8006b1c:	20000364 	.word	0x20000364

08006b20 <sbrk_aligned>:
 8006b20:	b570      	push	{r4, r5, r6, lr}
 8006b22:	4e0f      	ldr	r6, [pc, #60]	@ (8006b60 <sbrk_aligned+0x40>)
 8006b24:	000d      	movs	r5, r1
 8006b26:	6831      	ldr	r1, [r6, #0]
 8006b28:	0004      	movs	r4, r0
 8006b2a:	2900      	cmp	r1, #0
 8006b2c:	d102      	bne.n	8006b34 <sbrk_aligned+0x14>
 8006b2e:	f000 fb99 	bl	8007264 <_sbrk_r>
 8006b32:	6030      	str	r0, [r6, #0]
 8006b34:	0029      	movs	r1, r5
 8006b36:	0020      	movs	r0, r4
 8006b38:	f000 fb94 	bl	8007264 <_sbrk_r>
 8006b3c:	1c43      	adds	r3, r0, #1
 8006b3e:	d103      	bne.n	8006b48 <sbrk_aligned+0x28>
 8006b40:	2501      	movs	r5, #1
 8006b42:	426d      	negs	r5, r5
 8006b44:	0028      	movs	r0, r5
 8006b46:	bd70      	pop	{r4, r5, r6, pc}
 8006b48:	2303      	movs	r3, #3
 8006b4a:	1cc5      	adds	r5, r0, #3
 8006b4c:	439d      	bics	r5, r3
 8006b4e:	42a8      	cmp	r0, r5
 8006b50:	d0f8      	beq.n	8006b44 <sbrk_aligned+0x24>
 8006b52:	1a29      	subs	r1, r5, r0
 8006b54:	0020      	movs	r0, r4
 8006b56:	f000 fb85 	bl	8007264 <_sbrk_r>
 8006b5a:	3001      	adds	r0, #1
 8006b5c:	d1f2      	bne.n	8006b44 <sbrk_aligned+0x24>
 8006b5e:	e7ef      	b.n	8006b40 <sbrk_aligned+0x20>
 8006b60:	20000360 	.word	0x20000360

08006b64 <_malloc_r>:
 8006b64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b66:	2203      	movs	r2, #3
 8006b68:	1ccb      	adds	r3, r1, #3
 8006b6a:	4393      	bics	r3, r2
 8006b6c:	3308      	adds	r3, #8
 8006b6e:	0005      	movs	r5, r0
 8006b70:	001f      	movs	r7, r3
 8006b72:	2b0c      	cmp	r3, #12
 8006b74:	d234      	bcs.n	8006be0 <_malloc_r+0x7c>
 8006b76:	270c      	movs	r7, #12
 8006b78:	42b9      	cmp	r1, r7
 8006b7a:	d833      	bhi.n	8006be4 <_malloc_r+0x80>
 8006b7c:	0028      	movs	r0, r5
 8006b7e:	f000 f871 	bl	8006c64 <__malloc_lock>
 8006b82:	4e37      	ldr	r6, [pc, #220]	@ (8006c60 <_malloc_r+0xfc>)
 8006b84:	6833      	ldr	r3, [r6, #0]
 8006b86:	001c      	movs	r4, r3
 8006b88:	2c00      	cmp	r4, #0
 8006b8a:	d12f      	bne.n	8006bec <_malloc_r+0x88>
 8006b8c:	0039      	movs	r1, r7
 8006b8e:	0028      	movs	r0, r5
 8006b90:	f7ff ffc6 	bl	8006b20 <sbrk_aligned>
 8006b94:	0004      	movs	r4, r0
 8006b96:	1c43      	adds	r3, r0, #1
 8006b98:	d15f      	bne.n	8006c5a <_malloc_r+0xf6>
 8006b9a:	6834      	ldr	r4, [r6, #0]
 8006b9c:	9400      	str	r4, [sp, #0]
 8006b9e:	9b00      	ldr	r3, [sp, #0]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d14a      	bne.n	8006c3a <_malloc_r+0xd6>
 8006ba4:	2c00      	cmp	r4, #0
 8006ba6:	d052      	beq.n	8006c4e <_malloc_r+0xea>
 8006ba8:	6823      	ldr	r3, [r4, #0]
 8006baa:	0028      	movs	r0, r5
 8006bac:	18e3      	adds	r3, r4, r3
 8006bae:	9900      	ldr	r1, [sp, #0]
 8006bb0:	9301      	str	r3, [sp, #4]
 8006bb2:	f000 fb57 	bl	8007264 <_sbrk_r>
 8006bb6:	9b01      	ldr	r3, [sp, #4]
 8006bb8:	4283      	cmp	r3, r0
 8006bba:	d148      	bne.n	8006c4e <_malloc_r+0xea>
 8006bbc:	6823      	ldr	r3, [r4, #0]
 8006bbe:	0028      	movs	r0, r5
 8006bc0:	1aff      	subs	r7, r7, r3
 8006bc2:	0039      	movs	r1, r7
 8006bc4:	f7ff ffac 	bl	8006b20 <sbrk_aligned>
 8006bc8:	3001      	adds	r0, #1
 8006bca:	d040      	beq.n	8006c4e <_malloc_r+0xea>
 8006bcc:	6823      	ldr	r3, [r4, #0]
 8006bce:	19db      	adds	r3, r3, r7
 8006bd0:	6023      	str	r3, [r4, #0]
 8006bd2:	6833      	ldr	r3, [r6, #0]
 8006bd4:	685a      	ldr	r2, [r3, #4]
 8006bd6:	2a00      	cmp	r2, #0
 8006bd8:	d133      	bne.n	8006c42 <_malloc_r+0xde>
 8006bda:	9b00      	ldr	r3, [sp, #0]
 8006bdc:	6033      	str	r3, [r6, #0]
 8006bde:	e019      	b.n	8006c14 <_malloc_r+0xb0>
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	dac9      	bge.n	8006b78 <_malloc_r+0x14>
 8006be4:	230c      	movs	r3, #12
 8006be6:	602b      	str	r3, [r5, #0]
 8006be8:	2000      	movs	r0, #0
 8006bea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006bec:	6821      	ldr	r1, [r4, #0]
 8006bee:	1bc9      	subs	r1, r1, r7
 8006bf0:	d420      	bmi.n	8006c34 <_malloc_r+0xd0>
 8006bf2:	290b      	cmp	r1, #11
 8006bf4:	d90a      	bls.n	8006c0c <_malloc_r+0xa8>
 8006bf6:	19e2      	adds	r2, r4, r7
 8006bf8:	6027      	str	r7, [r4, #0]
 8006bfa:	42a3      	cmp	r3, r4
 8006bfc:	d104      	bne.n	8006c08 <_malloc_r+0xa4>
 8006bfe:	6032      	str	r2, [r6, #0]
 8006c00:	6863      	ldr	r3, [r4, #4]
 8006c02:	6011      	str	r1, [r2, #0]
 8006c04:	6053      	str	r3, [r2, #4]
 8006c06:	e005      	b.n	8006c14 <_malloc_r+0xb0>
 8006c08:	605a      	str	r2, [r3, #4]
 8006c0a:	e7f9      	b.n	8006c00 <_malloc_r+0x9c>
 8006c0c:	6862      	ldr	r2, [r4, #4]
 8006c0e:	42a3      	cmp	r3, r4
 8006c10:	d10e      	bne.n	8006c30 <_malloc_r+0xcc>
 8006c12:	6032      	str	r2, [r6, #0]
 8006c14:	0028      	movs	r0, r5
 8006c16:	f000 f82d 	bl	8006c74 <__malloc_unlock>
 8006c1a:	0020      	movs	r0, r4
 8006c1c:	2207      	movs	r2, #7
 8006c1e:	300b      	adds	r0, #11
 8006c20:	1d23      	adds	r3, r4, #4
 8006c22:	4390      	bics	r0, r2
 8006c24:	1ac2      	subs	r2, r0, r3
 8006c26:	4298      	cmp	r0, r3
 8006c28:	d0df      	beq.n	8006bea <_malloc_r+0x86>
 8006c2a:	1a1b      	subs	r3, r3, r0
 8006c2c:	50a3      	str	r3, [r4, r2]
 8006c2e:	e7dc      	b.n	8006bea <_malloc_r+0x86>
 8006c30:	605a      	str	r2, [r3, #4]
 8006c32:	e7ef      	b.n	8006c14 <_malloc_r+0xb0>
 8006c34:	0023      	movs	r3, r4
 8006c36:	6864      	ldr	r4, [r4, #4]
 8006c38:	e7a6      	b.n	8006b88 <_malloc_r+0x24>
 8006c3a:	9c00      	ldr	r4, [sp, #0]
 8006c3c:	6863      	ldr	r3, [r4, #4]
 8006c3e:	9300      	str	r3, [sp, #0]
 8006c40:	e7ad      	b.n	8006b9e <_malloc_r+0x3a>
 8006c42:	001a      	movs	r2, r3
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	42a3      	cmp	r3, r4
 8006c48:	d1fb      	bne.n	8006c42 <_malloc_r+0xde>
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	e7da      	b.n	8006c04 <_malloc_r+0xa0>
 8006c4e:	230c      	movs	r3, #12
 8006c50:	0028      	movs	r0, r5
 8006c52:	602b      	str	r3, [r5, #0]
 8006c54:	f000 f80e 	bl	8006c74 <__malloc_unlock>
 8006c58:	e7c6      	b.n	8006be8 <_malloc_r+0x84>
 8006c5a:	6007      	str	r7, [r0, #0]
 8006c5c:	e7da      	b.n	8006c14 <_malloc_r+0xb0>
 8006c5e:	46c0      	nop			@ (mov r8, r8)
 8006c60:	20000364 	.word	0x20000364

08006c64 <__malloc_lock>:
 8006c64:	b510      	push	{r4, lr}
 8006c66:	4802      	ldr	r0, [pc, #8]	@ (8006c70 <__malloc_lock+0xc>)
 8006c68:	f7ff ff04 	bl	8006a74 <__retarget_lock_acquire_recursive>
 8006c6c:	bd10      	pop	{r4, pc}
 8006c6e:	46c0      	nop			@ (mov r8, r8)
 8006c70:	2000035c 	.word	0x2000035c

08006c74 <__malloc_unlock>:
 8006c74:	b510      	push	{r4, lr}
 8006c76:	4802      	ldr	r0, [pc, #8]	@ (8006c80 <__malloc_unlock+0xc>)
 8006c78:	f7ff fefd 	bl	8006a76 <__retarget_lock_release_recursive>
 8006c7c:	bd10      	pop	{r4, pc}
 8006c7e:	46c0      	nop			@ (mov r8, r8)
 8006c80:	2000035c 	.word	0x2000035c

08006c84 <__ssputs_r>:
 8006c84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c86:	688e      	ldr	r6, [r1, #8]
 8006c88:	b085      	sub	sp, #20
 8006c8a:	001f      	movs	r7, r3
 8006c8c:	000c      	movs	r4, r1
 8006c8e:	680b      	ldr	r3, [r1, #0]
 8006c90:	9002      	str	r0, [sp, #8]
 8006c92:	9203      	str	r2, [sp, #12]
 8006c94:	42be      	cmp	r6, r7
 8006c96:	d830      	bhi.n	8006cfa <__ssputs_r+0x76>
 8006c98:	210c      	movs	r1, #12
 8006c9a:	5e62      	ldrsh	r2, [r4, r1]
 8006c9c:	2190      	movs	r1, #144	@ 0x90
 8006c9e:	00c9      	lsls	r1, r1, #3
 8006ca0:	420a      	tst	r2, r1
 8006ca2:	d028      	beq.n	8006cf6 <__ssputs_r+0x72>
 8006ca4:	2003      	movs	r0, #3
 8006ca6:	6921      	ldr	r1, [r4, #16]
 8006ca8:	1a5b      	subs	r3, r3, r1
 8006caa:	9301      	str	r3, [sp, #4]
 8006cac:	6963      	ldr	r3, [r4, #20]
 8006cae:	4343      	muls	r3, r0
 8006cb0:	9801      	ldr	r0, [sp, #4]
 8006cb2:	0fdd      	lsrs	r5, r3, #31
 8006cb4:	18ed      	adds	r5, r5, r3
 8006cb6:	1c7b      	adds	r3, r7, #1
 8006cb8:	181b      	adds	r3, r3, r0
 8006cba:	106d      	asrs	r5, r5, #1
 8006cbc:	42ab      	cmp	r3, r5
 8006cbe:	d900      	bls.n	8006cc2 <__ssputs_r+0x3e>
 8006cc0:	001d      	movs	r5, r3
 8006cc2:	0552      	lsls	r2, r2, #21
 8006cc4:	d528      	bpl.n	8006d18 <__ssputs_r+0x94>
 8006cc6:	0029      	movs	r1, r5
 8006cc8:	9802      	ldr	r0, [sp, #8]
 8006cca:	f7ff ff4b 	bl	8006b64 <_malloc_r>
 8006cce:	1e06      	subs	r6, r0, #0
 8006cd0:	d02c      	beq.n	8006d2c <__ssputs_r+0xa8>
 8006cd2:	9a01      	ldr	r2, [sp, #4]
 8006cd4:	6921      	ldr	r1, [r4, #16]
 8006cd6:	f7ff fecf 	bl	8006a78 <memcpy>
 8006cda:	89a2      	ldrh	r2, [r4, #12]
 8006cdc:	4b18      	ldr	r3, [pc, #96]	@ (8006d40 <__ssputs_r+0xbc>)
 8006cde:	401a      	ands	r2, r3
 8006ce0:	2380      	movs	r3, #128	@ 0x80
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	81a3      	strh	r3, [r4, #12]
 8006ce6:	9b01      	ldr	r3, [sp, #4]
 8006ce8:	6126      	str	r6, [r4, #16]
 8006cea:	18f6      	adds	r6, r6, r3
 8006cec:	6026      	str	r6, [r4, #0]
 8006cee:	003e      	movs	r6, r7
 8006cf0:	6165      	str	r5, [r4, #20]
 8006cf2:	1aed      	subs	r5, r5, r3
 8006cf4:	60a5      	str	r5, [r4, #8]
 8006cf6:	42be      	cmp	r6, r7
 8006cf8:	d900      	bls.n	8006cfc <__ssputs_r+0x78>
 8006cfa:	003e      	movs	r6, r7
 8006cfc:	0032      	movs	r2, r6
 8006cfe:	9903      	ldr	r1, [sp, #12]
 8006d00:	6820      	ldr	r0, [r4, #0]
 8006d02:	f000 fa9b 	bl	800723c <memmove>
 8006d06:	2000      	movs	r0, #0
 8006d08:	68a3      	ldr	r3, [r4, #8]
 8006d0a:	1b9b      	subs	r3, r3, r6
 8006d0c:	60a3      	str	r3, [r4, #8]
 8006d0e:	6823      	ldr	r3, [r4, #0]
 8006d10:	199b      	adds	r3, r3, r6
 8006d12:	6023      	str	r3, [r4, #0]
 8006d14:	b005      	add	sp, #20
 8006d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d18:	002a      	movs	r2, r5
 8006d1a:	9802      	ldr	r0, [sp, #8]
 8006d1c:	f000 fabf 	bl	800729e <_realloc_r>
 8006d20:	1e06      	subs	r6, r0, #0
 8006d22:	d1e0      	bne.n	8006ce6 <__ssputs_r+0x62>
 8006d24:	6921      	ldr	r1, [r4, #16]
 8006d26:	9802      	ldr	r0, [sp, #8]
 8006d28:	f7ff feb0 	bl	8006a8c <_free_r>
 8006d2c:	230c      	movs	r3, #12
 8006d2e:	2001      	movs	r0, #1
 8006d30:	9a02      	ldr	r2, [sp, #8]
 8006d32:	4240      	negs	r0, r0
 8006d34:	6013      	str	r3, [r2, #0]
 8006d36:	89a2      	ldrh	r2, [r4, #12]
 8006d38:	3334      	adds	r3, #52	@ 0x34
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	81a3      	strh	r3, [r4, #12]
 8006d3e:	e7e9      	b.n	8006d14 <__ssputs_r+0x90>
 8006d40:	fffffb7f 	.word	0xfffffb7f

08006d44 <_svfiprintf_r>:
 8006d44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d46:	b0a1      	sub	sp, #132	@ 0x84
 8006d48:	9003      	str	r0, [sp, #12]
 8006d4a:	001d      	movs	r5, r3
 8006d4c:	898b      	ldrh	r3, [r1, #12]
 8006d4e:	000f      	movs	r7, r1
 8006d50:	0016      	movs	r6, r2
 8006d52:	061b      	lsls	r3, r3, #24
 8006d54:	d511      	bpl.n	8006d7a <_svfiprintf_r+0x36>
 8006d56:	690b      	ldr	r3, [r1, #16]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d10e      	bne.n	8006d7a <_svfiprintf_r+0x36>
 8006d5c:	2140      	movs	r1, #64	@ 0x40
 8006d5e:	f7ff ff01 	bl	8006b64 <_malloc_r>
 8006d62:	6038      	str	r0, [r7, #0]
 8006d64:	6138      	str	r0, [r7, #16]
 8006d66:	2800      	cmp	r0, #0
 8006d68:	d105      	bne.n	8006d76 <_svfiprintf_r+0x32>
 8006d6a:	230c      	movs	r3, #12
 8006d6c:	9a03      	ldr	r2, [sp, #12]
 8006d6e:	6013      	str	r3, [r2, #0]
 8006d70:	2001      	movs	r0, #1
 8006d72:	4240      	negs	r0, r0
 8006d74:	e0cf      	b.n	8006f16 <_svfiprintf_r+0x1d2>
 8006d76:	2340      	movs	r3, #64	@ 0x40
 8006d78:	617b      	str	r3, [r7, #20]
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	ac08      	add	r4, sp, #32
 8006d7e:	6163      	str	r3, [r4, #20]
 8006d80:	3320      	adds	r3, #32
 8006d82:	7663      	strb	r3, [r4, #25]
 8006d84:	3310      	adds	r3, #16
 8006d86:	76a3      	strb	r3, [r4, #26]
 8006d88:	9507      	str	r5, [sp, #28]
 8006d8a:	0035      	movs	r5, r6
 8006d8c:	782b      	ldrb	r3, [r5, #0]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d001      	beq.n	8006d96 <_svfiprintf_r+0x52>
 8006d92:	2b25      	cmp	r3, #37	@ 0x25
 8006d94:	d148      	bne.n	8006e28 <_svfiprintf_r+0xe4>
 8006d96:	1bab      	subs	r3, r5, r6
 8006d98:	9305      	str	r3, [sp, #20]
 8006d9a:	42b5      	cmp	r5, r6
 8006d9c:	d00b      	beq.n	8006db6 <_svfiprintf_r+0x72>
 8006d9e:	0032      	movs	r2, r6
 8006da0:	0039      	movs	r1, r7
 8006da2:	9803      	ldr	r0, [sp, #12]
 8006da4:	f7ff ff6e 	bl	8006c84 <__ssputs_r>
 8006da8:	3001      	adds	r0, #1
 8006daa:	d100      	bne.n	8006dae <_svfiprintf_r+0x6a>
 8006dac:	e0ae      	b.n	8006f0c <_svfiprintf_r+0x1c8>
 8006dae:	6963      	ldr	r3, [r4, #20]
 8006db0:	9a05      	ldr	r2, [sp, #20]
 8006db2:	189b      	adds	r3, r3, r2
 8006db4:	6163      	str	r3, [r4, #20]
 8006db6:	782b      	ldrb	r3, [r5, #0]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d100      	bne.n	8006dbe <_svfiprintf_r+0x7a>
 8006dbc:	e0a6      	b.n	8006f0c <_svfiprintf_r+0x1c8>
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	4252      	negs	r2, r2
 8006dc4:	6062      	str	r2, [r4, #4]
 8006dc6:	a904      	add	r1, sp, #16
 8006dc8:	3254      	adds	r2, #84	@ 0x54
 8006dca:	1852      	adds	r2, r2, r1
 8006dcc:	1c6e      	adds	r6, r5, #1
 8006dce:	6023      	str	r3, [r4, #0]
 8006dd0:	60e3      	str	r3, [r4, #12]
 8006dd2:	60a3      	str	r3, [r4, #8]
 8006dd4:	7013      	strb	r3, [r2, #0]
 8006dd6:	65a3      	str	r3, [r4, #88]	@ 0x58
 8006dd8:	4b54      	ldr	r3, [pc, #336]	@ (8006f2c <_svfiprintf_r+0x1e8>)
 8006dda:	2205      	movs	r2, #5
 8006ddc:	0018      	movs	r0, r3
 8006dde:	7831      	ldrb	r1, [r6, #0]
 8006de0:	9305      	str	r3, [sp, #20]
 8006de2:	f000 fa51 	bl	8007288 <memchr>
 8006de6:	1c75      	adds	r5, r6, #1
 8006de8:	2800      	cmp	r0, #0
 8006dea:	d11f      	bne.n	8006e2c <_svfiprintf_r+0xe8>
 8006dec:	6822      	ldr	r2, [r4, #0]
 8006dee:	06d3      	lsls	r3, r2, #27
 8006df0:	d504      	bpl.n	8006dfc <_svfiprintf_r+0xb8>
 8006df2:	2353      	movs	r3, #83	@ 0x53
 8006df4:	a904      	add	r1, sp, #16
 8006df6:	185b      	adds	r3, r3, r1
 8006df8:	2120      	movs	r1, #32
 8006dfa:	7019      	strb	r1, [r3, #0]
 8006dfc:	0713      	lsls	r3, r2, #28
 8006dfe:	d504      	bpl.n	8006e0a <_svfiprintf_r+0xc6>
 8006e00:	2353      	movs	r3, #83	@ 0x53
 8006e02:	a904      	add	r1, sp, #16
 8006e04:	185b      	adds	r3, r3, r1
 8006e06:	212b      	movs	r1, #43	@ 0x2b
 8006e08:	7019      	strb	r1, [r3, #0]
 8006e0a:	7833      	ldrb	r3, [r6, #0]
 8006e0c:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e0e:	d016      	beq.n	8006e3e <_svfiprintf_r+0xfa>
 8006e10:	0035      	movs	r5, r6
 8006e12:	2100      	movs	r1, #0
 8006e14:	200a      	movs	r0, #10
 8006e16:	68e3      	ldr	r3, [r4, #12]
 8006e18:	782a      	ldrb	r2, [r5, #0]
 8006e1a:	1c6e      	adds	r6, r5, #1
 8006e1c:	3a30      	subs	r2, #48	@ 0x30
 8006e1e:	2a09      	cmp	r2, #9
 8006e20:	d950      	bls.n	8006ec4 <_svfiprintf_r+0x180>
 8006e22:	2900      	cmp	r1, #0
 8006e24:	d111      	bne.n	8006e4a <_svfiprintf_r+0x106>
 8006e26:	e017      	b.n	8006e58 <_svfiprintf_r+0x114>
 8006e28:	3501      	adds	r5, #1
 8006e2a:	e7af      	b.n	8006d8c <_svfiprintf_r+0x48>
 8006e2c:	9b05      	ldr	r3, [sp, #20]
 8006e2e:	6822      	ldr	r2, [r4, #0]
 8006e30:	1ac0      	subs	r0, r0, r3
 8006e32:	2301      	movs	r3, #1
 8006e34:	4083      	lsls	r3, r0
 8006e36:	4313      	orrs	r3, r2
 8006e38:	002e      	movs	r6, r5
 8006e3a:	6023      	str	r3, [r4, #0]
 8006e3c:	e7cc      	b.n	8006dd8 <_svfiprintf_r+0x94>
 8006e3e:	9b07      	ldr	r3, [sp, #28]
 8006e40:	1d19      	adds	r1, r3, #4
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	9107      	str	r1, [sp, #28]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	db01      	blt.n	8006e4e <_svfiprintf_r+0x10a>
 8006e4a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006e4c:	e004      	b.n	8006e58 <_svfiprintf_r+0x114>
 8006e4e:	425b      	negs	r3, r3
 8006e50:	60e3      	str	r3, [r4, #12]
 8006e52:	2302      	movs	r3, #2
 8006e54:	4313      	orrs	r3, r2
 8006e56:	6023      	str	r3, [r4, #0]
 8006e58:	782b      	ldrb	r3, [r5, #0]
 8006e5a:	2b2e      	cmp	r3, #46	@ 0x2e
 8006e5c:	d10c      	bne.n	8006e78 <_svfiprintf_r+0x134>
 8006e5e:	786b      	ldrb	r3, [r5, #1]
 8006e60:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e62:	d134      	bne.n	8006ece <_svfiprintf_r+0x18a>
 8006e64:	9b07      	ldr	r3, [sp, #28]
 8006e66:	3502      	adds	r5, #2
 8006e68:	1d1a      	adds	r2, r3, #4
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	9207      	str	r2, [sp, #28]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	da01      	bge.n	8006e76 <_svfiprintf_r+0x132>
 8006e72:	2301      	movs	r3, #1
 8006e74:	425b      	negs	r3, r3
 8006e76:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e78:	4e2d      	ldr	r6, [pc, #180]	@ (8006f30 <_svfiprintf_r+0x1ec>)
 8006e7a:	2203      	movs	r2, #3
 8006e7c:	0030      	movs	r0, r6
 8006e7e:	7829      	ldrb	r1, [r5, #0]
 8006e80:	f000 fa02 	bl	8007288 <memchr>
 8006e84:	2800      	cmp	r0, #0
 8006e86:	d006      	beq.n	8006e96 <_svfiprintf_r+0x152>
 8006e88:	2340      	movs	r3, #64	@ 0x40
 8006e8a:	1b80      	subs	r0, r0, r6
 8006e8c:	4083      	lsls	r3, r0
 8006e8e:	6822      	ldr	r2, [r4, #0]
 8006e90:	3501      	adds	r5, #1
 8006e92:	4313      	orrs	r3, r2
 8006e94:	6023      	str	r3, [r4, #0]
 8006e96:	7829      	ldrb	r1, [r5, #0]
 8006e98:	2206      	movs	r2, #6
 8006e9a:	4826      	ldr	r0, [pc, #152]	@ (8006f34 <_svfiprintf_r+0x1f0>)
 8006e9c:	1c6e      	adds	r6, r5, #1
 8006e9e:	7621      	strb	r1, [r4, #24]
 8006ea0:	f000 f9f2 	bl	8007288 <memchr>
 8006ea4:	2800      	cmp	r0, #0
 8006ea6:	d038      	beq.n	8006f1a <_svfiprintf_r+0x1d6>
 8006ea8:	4b23      	ldr	r3, [pc, #140]	@ (8006f38 <_svfiprintf_r+0x1f4>)
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d122      	bne.n	8006ef4 <_svfiprintf_r+0x1b0>
 8006eae:	2207      	movs	r2, #7
 8006eb0:	9b07      	ldr	r3, [sp, #28]
 8006eb2:	3307      	adds	r3, #7
 8006eb4:	4393      	bics	r3, r2
 8006eb6:	3308      	adds	r3, #8
 8006eb8:	9307      	str	r3, [sp, #28]
 8006eba:	6963      	ldr	r3, [r4, #20]
 8006ebc:	9a04      	ldr	r2, [sp, #16]
 8006ebe:	189b      	adds	r3, r3, r2
 8006ec0:	6163      	str	r3, [r4, #20]
 8006ec2:	e762      	b.n	8006d8a <_svfiprintf_r+0x46>
 8006ec4:	4343      	muls	r3, r0
 8006ec6:	0035      	movs	r5, r6
 8006ec8:	2101      	movs	r1, #1
 8006eca:	189b      	adds	r3, r3, r2
 8006ecc:	e7a4      	b.n	8006e18 <_svfiprintf_r+0xd4>
 8006ece:	2300      	movs	r3, #0
 8006ed0:	200a      	movs	r0, #10
 8006ed2:	0019      	movs	r1, r3
 8006ed4:	3501      	adds	r5, #1
 8006ed6:	6063      	str	r3, [r4, #4]
 8006ed8:	782a      	ldrb	r2, [r5, #0]
 8006eda:	1c6e      	adds	r6, r5, #1
 8006edc:	3a30      	subs	r2, #48	@ 0x30
 8006ede:	2a09      	cmp	r2, #9
 8006ee0:	d903      	bls.n	8006eea <_svfiprintf_r+0x1a6>
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d0c8      	beq.n	8006e78 <_svfiprintf_r+0x134>
 8006ee6:	9109      	str	r1, [sp, #36]	@ 0x24
 8006ee8:	e7c6      	b.n	8006e78 <_svfiprintf_r+0x134>
 8006eea:	4341      	muls	r1, r0
 8006eec:	0035      	movs	r5, r6
 8006eee:	2301      	movs	r3, #1
 8006ef0:	1889      	adds	r1, r1, r2
 8006ef2:	e7f1      	b.n	8006ed8 <_svfiprintf_r+0x194>
 8006ef4:	aa07      	add	r2, sp, #28
 8006ef6:	9200      	str	r2, [sp, #0]
 8006ef8:	0021      	movs	r1, r4
 8006efa:	003a      	movs	r2, r7
 8006efc:	4b0f      	ldr	r3, [pc, #60]	@ (8006f3c <_svfiprintf_r+0x1f8>)
 8006efe:	9803      	ldr	r0, [sp, #12]
 8006f00:	e000      	b.n	8006f04 <_svfiprintf_r+0x1c0>
 8006f02:	bf00      	nop
 8006f04:	9004      	str	r0, [sp, #16]
 8006f06:	9b04      	ldr	r3, [sp, #16]
 8006f08:	3301      	adds	r3, #1
 8006f0a:	d1d6      	bne.n	8006eba <_svfiprintf_r+0x176>
 8006f0c:	89bb      	ldrh	r3, [r7, #12]
 8006f0e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8006f10:	065b      	lsls	r3, r3, #25
 8006f12:	d500      	bpl.n	8006f16 <_svfiprintf_r+0x1d2>
 8006f14:	e72c      	b.n	8006d70 <_svfiprintf_r+0x2c>
 8006f16:	b021      	add	sp, #132	@ 0x84
 8006f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f1a:	aa07      	add	r2, sp, #28
 8006f1c:	9200      	str	r2, [sp, #0]
 8006f1e:	0021      	movs	r1, r4
 8006f20:	003a      	movs	r2, r7
 8006f22:	4b06      	ldr	r3, [pc, #24]	@ (8006f3c <_svfiprintf_r+0x1f8>)
 8006f24:	9803      	ldr	r0, [sp, #12]
 8006f26:	f000 f87b 	bl	8007020 <_printf_i>
 8006f2a:	e7eb      	b.n	8006f04 <_svfiprintf_r+0x1c0>
 8006f2c:	08007408 	.word	0x08007408
 8006f30:	0800740e 	.word	0x0800740e
 8006f34:	08007412 	.word	0x08007412
 8006f38:	00000000 	.word	0x00000000
 8006f3c:	08006c85 	.word	0x08006c85

08006f40 <_printf_common>:
 8006f40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f42:	0016      	movs	r6, r2
 8006f44:	9301      	str	r3, [sp, #4]
 8006f46:	688a      	ldr	r2, [r1, #8]
 8006f48:	690b      	ldr	r3, [r1, #16]
 8006f4a:	000c      	movs	r4, r1
 8006f4c:	9000      	str	r0, [sp, #0]
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	da00      	bge.n	8006f54 <_printf_common+0x14>
 8006f52:	0013      	movs	r3, r2
 8006f54:	0022      	movs	r2, r4
 8006f56:	6033      	str	r3, [r6, #0]
 8006f58:	3243      	adds	r2, #67	@ 0x43
 8006f5a:	7812      	ldrb	r2, [r2, #0]
 8006f5c:	2a00      	cmp	r2, #0
 8006f5e:	d001      	beq.n	8006f64 <_printf_common+0x24>
 8006f60:	3301      	adds	r3, #1
 8006f62:	6033      	str	r3, [r6, #0]
 8006f64:	6823      	ldr	r3, [r4, #0]
 8006f66:	069b      	lsls	r3, r3, #26
 8006f68:	d502      	bpl.n	8006f70 <_printf_common+0x30>
 8006f6a:	6833      	ldr	r3, [r6, #0]
 8006f6c:	3302      	adds	r3, #2
 8006f6e:	6033      	str	r3, [r6, #0]
 8006f70:	6822      	ldr	r2, [r4, #0]
 8006f72:	2306      	movs	r3, #6
 8006f74:	0015      	movs	r5, r2
 8006f76:	401d      	ands	r5, r3
 8006f78:	421a      	tst	r2, r3
 8006f7a:	d027      	beq.n	8006fcc <_printf_common+0x8c>
 8006f7c:	0023      	movs	r3, r4
 8006f7e:	3343      	adds	r3, #67	@ 0x43
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	1e5a      	subs	r2, r3, #1
 8006f84:	4193      	sbcs	r3, r2
 8006f86:	6822      	ldr	r2, [r4, #0]
 8006f88:	0692      	lsls	r2, r2, #26
 8006f8a:	d430      	bmi.n	8006fee <_printf_common+0xae>
 8006f8c:	0022      	movs	r2, r4
 8006f8e:	9901      	ldr	r1, [sp, #4]
 8006f90:	9800      	ldr	r0, [sp, #0]
 8006f92:	9d08      	ldr	r5, [sp, #32]
 8006f94:	3243      	adds	r2, #67	@ 0x43
 8006f96:	47a8      	blx	r5
 8006f98:	3001      	adds	r0, #1
 8006f9a:	d025      	beq.n	8006fe8 <_printf_common+0xa8>
 8006f9c:	2206      	movs	r2, #6
 8006f9e:	6823      	ldr	r3, [r4, #0]
 8006fa0:	2500      	movs	r5, #0
 8006fa2:	4013      	ands	r3, r2
 8006fa4:	2b04      	cmp	r3, #4
 8006fa6:	d105      	bne.n	8006fb4 <_printf_common+0x74>
 8006fa8:	6833      	ldr	r3, [r6, #0]
 8006faa:	68e5      	ldr	r5, [r4, #12]
 8006fac:	1aed      	subs	r5, r5, r3
 8006fae:	43eb      	mvns	r3, r5
 8006fb0:	17db      	asrs	r3, r3, #31
 8006fb2:	401d      	ands	r5, r3
 8006fb4:	68a3      	ldr	r3, [r4, #8]
 8006fb6:	6922      	ldr	r2, [r4, #16]
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	dd01      	ble.n	8006fc0 <_printf_common+0x80>
 8006fbc:	1a9b      	subs	r3, r3, r2
 8006fbe:	18ed      	adds	r5, r5, r3
 8006fc0:	2600      	movs	r6, #0
 8006fc2:	42b5      	cmp	r5, r6
 8006fc4:	d120      	bne.n	8007008 <_printf_common+0xc8>
 8006fc6:	2000      	movs	r0, #0
 8006fc8:	e010      	b.n	8006fec <_printf_common+0xac>
 8006fca:	3501      	adds	r5, #1
 8006fcc:	68e3      	ldr	r3, [r4, #12]
 8006fce:	6832      	ldr	r2, [r6, #0]
 8006fd0:	1a9b      	subs	r3, r3, r2
 8006fd2:	42ab      	cmp	r3, r5
 8006fd4:	ddd2      	ble.n	8006f7c <_printf_common+0x3c>
 8006fd6:	0022      	movs	r2, r4
 8006fd8:	2301      	movs	r3, #1
 8006fda:	9901      	ldr	r1, [sp, #4]
 8006fdc:	9800      	ldr	r0, [sp, #0]
 8006fde:	9f08      	ldr	r7, [sp, #32]
 8006fe0:	3219      	adds	r2, #25
 8006fe2:	47b8      	blx	r7
 8006fe4:	3001      	adds	r0, #1
 8006fe6:	d1f0      	bne.n	8006fca <_printf_common+0x8a>
 8006fe8:	2001      	movs	r0, #1
 8006fea:	4240      	negs	r0, r0
 8006fec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006fee:	2030      	movs	r0, #48	@ 0x30
 8006ff0:	18e1      	adds	r1, r4, r3
 8006ff2:	3143      	adds	r1, #67	@ 0x43
 8006ff4:	7008      	strb	r0, [r1, #0]
 8006ff6:	0021      	movs	r1, r4
 8006ff8:	1c5a      	adds	r2, r3, #1
 8006ffa:	3145      	adds	r1, #69	@ 0x45
 8006ffc:	7809      	ldrb	r1, [r1, #0]
 8006ffe:	18a2      	adds	r2, r4, r2
 8007000:	3243      	adds	r2, #67	@ 0x43
 8007002:	3302      	adds	r3, #2
 8007004:	7011      	strb	r1, [r2, #0]
 8007006:	e7c1      	b.n	8006f8c <_printf_common+0x4c>
 8007008:	0022      	movs	r2, r4
 800700a:	2301      	movs	r3, #1
 800700c:	9901      	ldr	r1, [sp, #4]
 800700e:	9800      	ldr	r0, [sp, #0]
 8007010:	9f08      	ldr	r7, [sp, #32]
 8007012:	321a      	adds	r2, #26
 8007014:	47b8      	blx	r7
 8007016:	3001      	adds	r0, #1
 8007018:	d0e6      	beq.n	8006fe8 <_printf_common+0xa8>
 800701a:	3601      	adds	r6, #1
 800701c:	e7d1      	b.n	8006fc2 <_printf_common+0x82>
	...

08007020 <_printf_i>:
 8007020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007022:	b08b      	sub	sp, #44	@ 0x2c
 8007024:	9206      	str	r2, [sp, #24]
 8007026:	000a      	movs	r2, r1
 8007028:	3243      	adds	r2, #67	@ 0x43
 800702a:	9307      	str	r3, [sp, #28]
 800702c:	9005      	str	r0, [sp, #20]
 800702e:	9203      	str	r2, [sp, #12]
 8007030:	7e0a      	ldrb	r2, [r1, #24]
 8007032:	000c      	movs	r4, r1
 8007034:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007036:	2a78      	cmp	r2, #120	@ 0x78
 8007038:	d809      	bhi.n	800704e <_printf_i+0x2e>
 800703a:	2a62      	cmp	r2, #98	@ 0x62
 800703c:	d80b      	bhi.n	8007056 <_printf_i+0x36>
 800703e:	2a00      	cmp	r2, #0
 8007040:	d100      	bne.n	8007044 <_printf_i+0x24>
 8007042:	e0bc      	b.n	80071be <_printf_i+0x19e>
 8007044:	497b      	ldr	r1, [pc, #492]	@ (8007234 <_printf_i+0x214>)
 8007046:	9104      	str	r1, [sp, #16]
 8007048:	2a58      	cmp	r2, #88	@ 0x58
 800704a:	d100      	bne.n	800704e <_printf_i+0x2e>
 800704c:	e090      	b.n	8007170 <_printf_i+0x150>
 800704e:	0025      	movs	r5, r4
 8007050:	3542      	adds	r5, #66	@ 0x42
 8007052:	702a      	strb	r2, [r5, #0]
 8007054:	e022      	b.n	800709c <_printf_i+0x7c>
 8007056:	0010      	movs	r0, r2
 8007058:	3863      	subs	r0, #99	@ 0x63
 800705a:	2815      	cmp	r0, #21
 800705c:	d8f7      	bhi.n	800704e <_printf_i+0x2e>
 800705e:	f7f9 f859 	bl	8000114 <__gnu_thumb1_case_shi>
 8007062:	0016      	.short	0x0016
 8007064:	fff6001f 	.word	0xfff6001f
 8007068:	fff6fff6 	.word	0xfff6fff6
 800706c:	001ffff6 	.word	0x001ffff6
 8007070:	fff6fff6 	.word	0xfff6fff6
 8007074:	fff6fff6 	.word	0xfff6fff6
 8007078:	003600a1 	.word	0x003600a1
 800707c:	fff60080 	.word	0xfff60080
 8007080:	00b2fff6 	.word	0x00b2fff6
 8007084:	0036fff6 	.word	0x0036fff6
 8007088:	fff6fff6 	.word	0xfff6fff6
 800708c:	0084      	.short	0x0084
 800708e:	0025      	movs	r5, r4
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	3542      	adds	r5, #66	@ 0x42
 8007094:	1d11      	adds	r1, r2, #4
 8007096:	6019      	str	r1, [r3, #0]
 8007098:	6813      	ldr	r3, [r2, #0]
 800709a:	702b      	strb	r3, [r5, #0]
 800709c:	2301      	movs	r3, #1
 800709e:	e0a0      	b.n	80071e2 <_printf_i+0x1c2>
 80070a0:	6818      	ldr	r0, [r3, #0]
 80070a2:	6809      	ldr	r1, [r1, #0]
 80070a4:	1d02      	adds	r2, r0, #4
 80070a6:	060d      	lsls	r5, r1, #24
 80070a8:	d50b      	bpl.n	80070c2 <_printf_i+0xa2>
 80070aa:	6806      	ldr	r6, [r0, #0]
 80070ac:	601a      	str	r2, [r3, #0]
 80070ae:	2e00      	cmp	r6, #0
 80070b0:	da03      	bge.n	80070ba <_printf_i+0x9a>
 80070b2:	232d      	movs	r3, #45	@ 0x2d
 80070b4:	9a03      	ldr	r2, [sp, #12]
 80070b6:	4276      	negs	r6, r6
 80070b8:	7013      	strb	r3, [r2, #0]
 80070ba:	4b5e      	ldr	r3, [pc, #376]	@ (8007234 <_printf_i+0x214>)
 80070bc:	270a      	movs	r7, #10
 80070be:	9304      	str	r3, [sp, #16]
 80070c0:	e018      	b.n	80070f4 <_printf_i+0xd4>
 80070c2:	6806      	ldr	r6, [r0, #0]
 80070c4:	601a      	str	r2, [r3, #0]
 80070c6:	0649      	lsls	r1, r1, #25
 80070c8:	d5f1      	bpl.n	80070ae <_printf_i+0x8e>
 80070ca:	b236      	sxth	r6, r6
 80070cc:	e7ef      	b.n	80070ae <_printf_i+0x8e>
 80070ce:	6808      	ldr	r0, [r1, #0]
 80070d0:	6819      	ldr	r1, [r3, #0]
 80070d2:	c940      	ldmia	r1!, {r6}
 80070d4:	0605      	lsls	r5, r0, #24
 80070d6:	d402      	bmi.n	80070de <_printf_i+0xbe>
 80070d8:	0640      	lsls	r0, r0, #25
 80070da:	d500      	bpl.n	80070de <_printf_i+0xbe>
 80070dc:	b2b6      	uxth	r6, r6
 80070de:	6019      	str	r1, [r3, #0]
 80070e0:	4b54      	ldr	r3, [pc, #336]	@ (8007234 <_printf_i+0x214>)
 80070e2:	270a      	movs	r7, #10
 80070e4:	9304      	str	r3, [sp, #16]
 80070e6:	2a6f      	cmp	r2, #111	@ 0x6f
 80070e8:	d100      	bne.n	80070ec <_printf_i+0xcc>
 80070ea:	3f02      	subs	r7, #2
 80070ec:	0023      	movs	r3, r4
 80070ee:	2200      	movs	r2, #0
 80070f0:	3343      	adds	r3, #67	@ 0x43
 80070f2:	701a      	strb	r2, [r3, #0]
 80070f4:	6863      	ldr	r3, [r4, #4]
 80070f6:	60a3      	str	r3, [r4, #8]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	db03      	blt.n	8007104 <_printf_i+0xe4>
 80070fc:	2104      	movs	r1, #4
 80070fe:	6822      	ldr	r2, [r4, #0]
 8007100:	438a      	bics	r2, r1
 8007102:	6022      	str	r2, [r4, #0]
 8007104:	2e00      	cmp	r6, #0
 8007106:	d102      	bne.n	800710e <_printf_i+0xee>
 8007108:	9d03      	ldr	r5, [sp, #12]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d00c      	beq.n	8007128 <_printf_i+0x108>
 800710e:	9d03      	ldr	r5, [sp, #12]
 8007110:	0030      	movs	r0, r6
 8007112:	0039      	movs	r1, r7
 8007114:	f7f9 f88e 	bl	8000234 <__aeabi_uidivmod>
 8007118:	9b04      	ldr	r3, [sp, #16]
 800711a:	3d01      	subs	r5, #1
 800711c:	5c5b      	ldrb	r3, [r3, r1]
 800711e:	702b      	strb	r3, [r5, #0]
 8007120:	0033      	movs	r3, r6
 8007122:	0006      	movs	r6, r0
 8007124:	429f      	cmp	r7, r3
 8007126:	d9f3      	bls.n	8007110 <_printf_i+0xf0>
 8007128:	2f08      	cmp	r7, #8
 800712a:	d109      	bne.n	8007140 <_printf_i+0x120>
 800712c:	6823      	ldr	r3, [r4, #0]
 800712e:	07db      	lsls	r3, r3, #31
 8007130:	d506      	bpl.n	8007140 <_printf_i+0x120>
 8007132:	6862      	ldr	r2, [r4, #4]
 8007134:	6923      	ldr	r3, [r4, #16]
 8007136:	429a      	cmp	r2, r3
 8007138:	dc02      	bgt.n	8007140 <_printf_i+0x120>
 800713a:	2330      	movs	r3, #48	@ 0x30
 800713c:	3d01      	subs	r5, #1
 800713e:	702b      	strb	r3, [r5, #0]
 8007140:	9b03      	ldr	r3, [sp, #12]
 8007142:	1b5b      	subs	r3, r3, r5
 8007144:	6123      	str	r3, [r4, #16]
 8007146:	9b07      	ldr	r3, [sp, #28]
 8007148:	0021      	movs	r1, r4
 800714a:	9300      	str	r3, [sp, #0]
 800714c:	9805      	ldr	r0, [sp, #20]
 800714e:	9b06      	ldr	r3, [sp, #24]
 8007150:	aa09      	add	r2, sp, #36	@ 0x24
 8007152:	f7ff fef5 	bl	8006f40 <_printf_common>
 8007156:	3001      	adds	r0, #1
 8007158:	d148      	bne.n	80071ec <_printf_i+0x1cc>
 800715a:	2001      	movs	r0, #1
 800715c:	4240      	negs	r0, r0
 800715e:	b00b      	add	sp, #44	@ 0x2c
 8007160:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007162:	2220      	movs	r2, #32
 8007164:	6809      	ldr	r1, [r1, #0]
 8007166:	430a      	orrs	r2, r1
 8007168:	6022      	str	r2, [r4, #0]
 800716a:	2278      	movs	r2, #120	@ 0x78
 800716c:	4932      	ldr	r1, [pc, #200]	@ (8007238 <_printf_i+0x218>)
 800716e:	9104      	str	r1, [sp, #16]
 8007170:	0021      	movs	r1, r4
 8007172:	3145      	adds	r1, #69	@ 0x45
 8007174:	700a      	strb	r2, [r1, #0]
 8007176:	6819      	ldr	r1, [r3, #0]
 8007178:	6822      	ldr	r2, [r4, #0]
 800717a:	c940      	ldmia	r1!, {r6}
 800717c:	0610      	lsls	r0, r2, #24
 800717e:	d402      	bmi.n	8007186 <_printf_i+0x166>
 8007180:	0650      	lsls	r0, r2, #25
 8007182:	d500      	bpl.n	8007186 <_printf_i+0x166>
 8007184:	b2b6      	uxth	r6, r6
 8007186:	6019      	str	r1, [r3, #0]
 8007188:	07d3      	lsls	r3, r2, #31
 800718a:	d502      	bpl.n	8007192 <_printf_i+0x172>
 800718c:	2320      	movs	r3, #32
 800718e:	4313      	orrs	r3, r2
 8007190:	6023      	str	r3, [r4, #0]
 8007192:	2e00      	cmp	r6, #0
 8007194:	d001      	beq.n	800719a <_printf_i+0x17a>
 8007196:	2710      	movs	r7, #16
 8007198:	e7a8      	b.n	80070ec <_printf_i+0xcc>
 800719a:	2220      	movs	r2, #32
 800719c:	6823      	ldr	r3, [r4, #0]
 800719e:	4393      	bics	r3, r2
 80071a0:	6023      	str	r3, [r4, #0]
 80071a2:	e7f8      	b.n	8007196 <_printf_i+0x176>
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	680d      	ldr	r5, [r1, #0]
 80071a8:	1d10      	adds	r0, r2, #4
 80071aa:	6949      	ldr	r1, [r1, #20]
 80071ac:	6018      	str	r0, [r3, #0]
 80071ae:	6813      	ldr	r3, [r2, #0]
 80071b0:	062e      	lsls	r6, r5, #24
 80071b2:	d501      	bpl.n	80071b8 <_printf_i+0x198>
 80071b4:	6019      	str	r1, [r3, #0]
 80071b6:	e002      	b.n	80071be <_printf_i+0x19e>
 80071b8:	066d      	lsls	r5, r5, #25
 80071ba:	d5fb      	bpl.n	80071b4 <_printf_i+0x194>
 80071bc:	8019      	strh	r1, [r3, #0]
 80071be:	2300      	movs	r3, #0
 80071c0:	9d03      	ldr	r5, [sp, #12]
 80071c2:	6123      	str	r3, [r4, #16]
 80071c4:	e7bf      	b.n	8007146 <_printf_i+0x126>
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	1d11      	adds	r1, r2, #4
 80071ca:	6019      	str	r1, [r3, #0]
 80071cc:	6815      	ldr	r5, [r2, #0]
 80071ce:	2100      	movs	r1, #0
 80071d0:	0028      	movs	r0, r5
 80071d2:	6862      	ldr	r2, [r4, #4]
 80071d4:	f000 f858 	bl	8007288 <memchr>
 80071d8:	2800      	cmp	r0, #0
 80071da:	d001      	beq.n	80071e0 <_printf_i+0x1c0>
 80071dc:	1b40      	subs	r0, r0, r5
 80071de:	6060      	str	r0, [r4, #4]
 80071e0:	6863      	ldr	r3, [r4, #4]
 80071e2:	6123      	str	r3, [r4, #16]
 80071e4:	2300      	movs	r3, #0
 80071e6:	9a03      	ldr	r2, [sp, #12]
 80071e8:	7013      	strb	r3, [r2, #0]
 80071ea:	e7ac      	b.n	8007146 <_printf_i+0x126>
 80071ec:	002a      	movs	r2, r5
 80071ee:	6923      	ldr	r3, [r4, #16]
 80071f0:	9906      	ldr	r1, [sp, #24]
 80071f2:	9805      	ldr	r0, [sp, #20]
 80071f4:	9d07      	ldr	r5, [sp, #28]
 80071f6:	47a8      	blx	r5
 80071f8:	3001      	adds	r0, #1
 80071fa:	d0ae      	beq.n	800715a <_printf_i+0x13a>
 80071fc:	6823      	ldr	r3, [r4, #0]
 80071fe:	079b      	lsls	r3, r3, #30
 8007200:	d415      	bmi.n	800722e <_printf_i+0x20e>
 8007202:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007204:	68e0      	ldr	r0, [r4, #12]
 8007206:	4298      	cmp	r0, r3
 8007208:	daa9      	bge.n	800715e <_printf_i+0x13e>
 800720a:	0018      	movs	r0, r3
 800720c:	e7a7      	b.n	800715e <_printf_i+0x13e>
 800720e:	0022      	movs	r2, r4
 8007210:	2301      	movs	r3, #1
 8007212:	9906      	ldr	r1, [sp, #24]
 8007214:	9805      	ldr	r0, [sp, #20]
 8007216:	9e07      	ldr	r6, [sp, #28]
 8007218:	3219      	adds	r2, #25
 800721a:	47b0      	blx	r6
 800721c:	3001      	adds	r0, #1
 800721e:	d09c      	beq.n	800715a <_printf_i+0x13a>
 8007220:	3501      	adds	r5, #1
 8007222:	68e3      	ldr	r3, [r4, #12]
 8007224:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007226:	1a9b      	subs	r3, r3, r2
 8007228:	42ab      	cmp	r3, r5
 800722a:	dcf0      	bgt.n	800720e <_printf_i+0x1ee>
 800722c:	e7e9      	b.n	8007202 <_printf_i+0x1e2>
 800722e:	2500      	movs	r5, #0
 8007230:	e7f7      	b.n	8007222 <_printf_i+0x202>
 8007232:	46c0      	nop			@ (mov r8, r8)
 8007234:	08007419 	.word	0x08007419
 8007238:	0800742a 	.word	0x0800742a

0800723c <memmove>:
 800723c:	b510      	push	{r4, lr}
 800723e:	4288      	cmp	r0, r1
 8007240:	d806      	bhi.n	8007250 <memmove+0x14>
 8007242:	2300      	movs	r3, #0
 8007244:	429a      	cmp	r2, r3
 8007246:	d008      	beq.n	800725a <memmove+0x1e>
 8007248:	5ccc      	ldrb	r4, [r1, r3]
 800724a:	54c4      	strb	r4, [r0, r3]
 800724c:	3301      	adds	r3, #1
 800724e:	e7f9      	b.n	8007244 <memmove+0x8>
 8007250:	188b      	adds	r3, r1, r2
 8007252:	4298      	cmp	r0, r3
 8007254:	d2f5      	bcs.n	8007242 <memmove+0x6>
 8007256:	3a01      	subs	r2, #1
 8007258:	d200      	bcs.n	800725c <memmove+0x20>
 800725a:	bd10      	pop	{r4, pc}
 800725c:	5c8b      	ldrb	r3, [r1, r2]
 800725e:	5483      	strb	r3, [r0, r2]
 8007260:	e7f9      	b.n	8007256 <memmove+0x1a>
	...

08007264 <_sbrk_r>:
 8007264:	2300      	movs	r3, #0
 8007266:	b570      	push	{r4, r5, r6, lr}
 8007268:	4d06      	ldr	r5, [pc, #24]	@ (8007284 <_sbrk_r+0x20>)
 800726a:	0004      	movs	r4, r0
 800726c:	0008      	movs	r0, r1
 800726e:	602b      	str	r3, [r5, #0]
 8007270:	f7fb fa9a 	bl	80027a8 <_sbrk>
 8007274:	1c43      	adds	r3, r0, #1
 8007276:	d103      	bne.n	8007280 <_sbrk_r+0x1c>
 8007278:	682b      	ldr	r3, [r5, #0]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d000      	beq.n	8007280 <_sbrk_r+0x1c>
 800727e:	6023      	str	r3, [r4, #0]
 8007280:	bd70      	pop	{r4, r5, r6, pc}
 8007282:	46c0      	nop			@ (mov r8, r8)
 8007284:	20000358 	.word	0x20000358

08007288 <memchr>:
 8007288:	b2c9      	uxtb	r1, r1
 800728a:	1882      	adds	r2, r0, r2
 800728c:	4290      	cmp	r0, r2
 800728e:	d101      	bne.n	8007294 <memchr+0xc>
 8007290:	2000      	movs	r0, #0
 8007292:	4770      	bx	lr
 8007294:	7803      	ldrb	r3, [r0, #0]
 8007296:	428b      	cmp	r3, r1
 8007298:	d0fb      	beq.n	8007292 <memchr+0xa>
 800729a:	3001      	adds	r0, #1
 800729c:	e7f6      	b.n	800728c <memchr+0x4>

0800729e <_realloc_r>:
 800729e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80072a0:	0006      	movs	r6, r0
 80072a2:	000c      	movs	r4, r1
 80072a4:	0015      	movs	r5, r2
 80072a6:	2900      	cmp	r1, #0
 80072a8:	d105      	bne.n	80072b6 <_realloc_r+0x18>
 80072aa:	0011      	movs	r1, r2
 80072ac:	f7ff fc5a 	bl	8006b64 <_malloc_r>
 80072b0:	0004      	movs	r4, r0
 80072b2:	0020      	movs	r0, r4
 80072b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80072b6:	2a00      	cmp	r2, #0
 80072b8:	d103      	bne.n	80072c2 <_realloc_r+0x24>
 80072ba:	f7ff fbe7 	bl	8006a8c <_free_r>
 80072be:	2400      	movs	r4, #0
 80072c0:	e7f7      	b.n	80072b2 <_realloc_r+0x14>
 80072c2:	f000 f81b 	bl	80072fc <_malloc_usable_size_r>
 80072c6:	0007      	movs	r7, r0
 80072c8:	4285      	cmp	r5, r0
 80072ca:	d802      	bhi.n	80072d2 <_realloc_r+0x34>
 80072cc:	0843      	lsrs	r3, r0, #1
 80072ce:	42ab      	cmp	r3, r5
 80072d0:	d3ef      	bcc.n	80072b2 <_realloc_r+0x14>
 80072d2:	0029      	movs	r1, r5
 80072d4:	0030      	movs	r0, r6
 80072d6:	f7ff fc45 	bl	8006b64 <_malloc_r>
 80072da:	9001      	str	r0, [sp, #4]
 80072dc:	2800      	cmp	r0, #0
 80072de:	d0ee      	beq.n	80072be <_realloc_r+0x20>
 80072e0:	002a      	movs	r2, r5
 80072e2:	42bd      	cmp	r5, r7
 80072e4:	d900      	bls.n	80072e8 <_realloc_r+0x4a>
 80072e6:	003a      	movs	r2, r7
 80072e8:	0021      	movs	r1, r4
 80072ea:	9801      	ldr	r0, [sp, #4]
 80072ec:	f7ff fbc4 	bl	8006a78 <memcpy>
 80072f0:	0021      	movs	r1, r4
 80072f2:	0030      	movs	r0, r6
 80072f4:	f7ff fbca 	bl	8006a8c <_free_r>
 80072f8:	9c01      	ldr	r4, [sp, #4]
 80072fa:	e7da      	b.n	80072b2 <_realloc_r+0x14>

080072fc <_malloc_usable_size_r>:
 80072fc:	1f0b      	subs	r3, r1, #4
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	1f18      	subs	r0, r3, #4
 8007302:	2b00      	cmp	r3, #0
 8007304:	da01      	bge.n	800730a <_malloc_usable_size_r+0xe>
 8007306:	580b      	ldr	r3, [r1, r0]
 8007308:	18c0      	adds	r0, r0, r3
 800730a:	4770      	bx	lr

0800730c <_init>:
 800730c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800730e:	46c0      	nop			@ (mov r8, r8)
 8007310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007312:	bc08      	pop	{r3}
 8007314:	469e      	mov	lr, r3
 8007316:	4770      	bx	lr

08007318 <_fini>:
 8007318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800731a:	46c0      	nop			@ (mov r8, r8)
 800731c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800731e:	bc08      	pop	{r3}
 8007320:	469e      	mov	lr, r3
 8007322:	4770      	bx	lr
